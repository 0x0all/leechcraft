/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "sslerror2treeitem.h"
#include <QStringList>
#include <QDateTime>
#include <QTreeWidgetItem>
#include <QSslError>

namespace LeechCraft
{
namespace Util
{
	QTreeWidgetItem* SslError2TreeItem (const QSslError& error)
	{
		QTreeWidgetItem *item = new QTreeWidgetItem (QStringList ("Error:") << error.errorString ());

		QSslCertificate cer = error.certificate ();
		if (cer.isNull ())
		{
			new QTreeWidgetItem (item,
					QStringList (QObject::tr ("Certificate")) <<
						QObject::tr ("(No certificate available for this error)"));
			return item;
		}

		new QTreeWidgetItem (item, QStringList (QObject::tr ("Valid:")) <<
	#if QT_VERSION < 0x050000
					(cer.isValid () ? QObject::tr ("yes") : QObject::tr ("no")));
	#else
					(!cer.isBlacklisted () ? QObject::tr ("yes") : QObject::tr ("no")));
	#endif
		new QTreeWidgetItem (item, QStringList (QObject::tr ("Effective date:")) <<
					cer.effectiveDate ().toString ());
		new QTreeWidgetItem (item, QStringList (QObject::tr ("Expiry date:")) <<
					cer.expiryDate ().toString ());
		new QTreeWidgetItem (item, QStringList (QObject::tr ("Version:")) <<
					cer.version ());
		new QTreeWidgetItem (item, QStringList (QObject::tr ("Serial number:")) <<
					cer.serialNumber ());
		new QTreeWidgetItem (item, QStringList (QObject::tr ("MD5 digest:")) <<
					cer.digest ().toHex ());
		new QTreeWidgetItem (item, QStringList (QObject::tr ("SHA1 digest:")) <<
					cer.digest (QCryptographicHash::Sha1).toHex ());

		QTreeWidgetItem *issuer = new QTreeWidgetItem (item,
				QStringList (QObject::tr ("Issuer info")));

		QString tmpString;
	#if QT_VERSION >= 0x050000
		auto cvt = [] (const QStringList& list) { return list.join ("; "); };
	#else
		auto cvt = [] (const QString& str) { return str; };
	#endif
		tmpString = cvt (cer.issuerInfo (QSslCertificate::Organization));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (issuer,
					QStringList (QObject::tr ("Organization:")) << tmpString);

		tmpString = cvt (cer.issuerInfo (QSslCertificate::CommonName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (issuer,
					QStringList (QObject::tr ("Common name:")) << tmpString);

		tmpString = cvt (cer.issuerInfo (QSslCertificate::LocalityName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (issuer,
					QStringList (QObject::tr ("Locality:")) << tmpString);

		tmpString = cvt (cer.issuerInfo (QSslCertificate::OrganizationalUnitName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (issuer,
					QStringList (QObject::tr ("Organizational unit name:")) << tmpString);

		tmpString = cvt (cer.issuerInfo (QSslCertificate::CountryName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (issuer,
					QStringList (QObject::tr ("Country name:")) << tmpString);

		tmpString = cvt (cer.issuerInfo (QSslCertificate::StateOrProvinceName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (issuer,
					QStringList (QObject::tr ("State or province name:")) << tmpString);

		QTreeWidgetItem *subject = new QTreeWidgetItem (item,
				QStringList (QObject::tr ("Subject info")));

		tmpString = cvt (cer.subjectInfo (QSslCertificate::Organization));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (subject,
					QStringList (QObject::tr ("Organization:")) << tmpString);

		tmpString = cvt (cer.subjectInfo (QSslCertificate::CommonName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (subject,
					QStringList (QObject::tr ("Common name:")) << tmpString);

		tmpString = cvt (cer.subjectInfo (QSslCertificate::LocalityName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (subject,
					QStringList (QObject::tr ("Locality:")) << tmpString);

		tmpString = cvt (cer.subjectInfo (QSslCertificate::OrganizationalUnitName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (subject,
					QStringList (QObject::tr ("Organizational unit name:")) << tmpString);

		tmpString = cvt (cer.subjectInfo (QSslCertificate::CountryName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (subject,
					QStringList (QObject::tr ("Country name:")) << tmpString);

		tmpString = cvt (cer.subjectInfo (QSslCertificate::StateOrProvinceName));
		if (!tmpString.isEmpty ())
			new QTreeWidgetItem (subject,
					QStringList (QObject::tr ("State or province name:")) << tmpString);

		return item;
	}
}
}
