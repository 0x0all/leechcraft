/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include "shortcutsconfig.h"

class QKeySequence;
class QWidget;
class QObject;

template<typename T>
class QList;

namespace LeechCraft
{
namespace Util
{
	/** @brief Makes \em func invokable with shortcuts in \em seq.
	 *
	 * This function creates one QShortcut object per each key sequence in
	 * \em seqs and calls \em func when one of the shortcuts is activated.
	 *
	 * If \em seqs is empty, this function does nothing.
	 *
	 * @param[in] seqs The list of key sequences to handle.
	 * @param[in] func The function to invoke when one of key sequences in
	 * \em seqs is activated.
	 * @param[in] parent The parent object for the shortcuts.
	 *
	 * @ingroup ShortcutsUtil
	 */
	UTIL_SHORTCUTS_API void CreateShortcuts (const QList<QKeySequence>& seqs,
			const std::function<void ()>& func, QWidget *parent);

	/** @brief Makes \em metamethod invokable with shortcuts in \em seq.
	 *
	 * This function creates one QShortcut object per each key sequence in
	 * \em seqs and calls \em metamethod of the given \em object when one
	 * of the shortcuts is activated.
	 *
	 * If \em seqs is empty, this function does nothing.
	 *
	 * @param[in] seqs The list of key sequences to handle.
	 * @param[in] object The object whose metamethod should be invoked.
	 * @param[in] metamethod The metamethod to invoke when one of key
	 * sequences in \em seqs is activated.
	 * @param[in] parent The parent object for the shortcuts.
	 *
	 * @ingroup ShortcutsUtil
	 */
	UTIL_SHORTCUTS_API void CreateShortcuts (const QList<QKeySequence>& seqs,
			QObject *object, const char *metamethod, QWidget *parent);
}
}
