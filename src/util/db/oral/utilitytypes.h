/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <utility>
#include <QDataStream>
#include <QByteArray>

namespace LC::Util::oral
{
	template<typename T>
	struct AsDataStream
	{
		using BaseType = QByteArray;

		T Val_;

		operator T () const &
		{
			return Val_;
		}

		operator T&& () &&
		{
			return std::move (Val_);
		}

		AsDataStream () = default;
		AsDataStream (const AsDataStream&) = default;
		AsDataStream (AsDataStream&&) = default;

		AsDataStream& operator= (const AsDataStream&) = default;
		AsDataStream& operator= (AsDataStream&&) = default;

		template<typename... Args>
		AsDataStream (Args&&... args)
		: Val_ { std::forward<Args> (args)... }
		{
		}

		template<typename U>
		AsDataStream& operator= (U&& val)
		{
			Val_ = std::forward<U> (val);
			return *this;
		}

		BaseType ToBaseType () const
		{
			QByteArray ba;
			{
				QDataStream out { &ba, QIODevice::WriteOnly };
				out << Val_;
			}
			return ba;
		}

		static AsDataStream FromBaseType (const QByteArray& ba)
		{
			QDataStream in { ba };

			AsDataStream res;
			in >> res.Val_;
			return res;
		}
	};

}
