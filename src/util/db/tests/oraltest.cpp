/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "oraltest.h"
#include <QtTest>
#include <oral.h>

QTEST_MAIN (LeechCraft::Util::OralTest)

namespace lco = LeechCraft::Util::oral;

struct SimpleRecord
{
	lco::PKey<int, lco::NoAutogen> ID_;
	QString Value_;

	static QString ClassName ()
	{
		return "SimpleRecord";
	}

	static QString FieldNameMorpher (const QString& str)
	{
		return str.left (str.size () - 1);
	}

	friend bool operator== (const SimpleRecord& left, const SimpleRecord& right)
	{
		return left.ID_ == right.ID_ &&
				left.Value_ == right.Value_;
	}
};

BOOST_FUSION_ADAPT_STRUCT (SimpleRecord,
		ID_,
		Value_)

namespace LeechCraft
{
namespace Util
{
	namespace
	{
		QSqlDatabase MakeDatabase ()
		{
			auto db = QSqlDatabase::addDatabase ("QSQLITE", Util::GenConnectionName ("TestConnection"));
			db.setDatabaseName (":memory:");
			if (!db.open ())
				throw std::runtime_error { "cannot create test database" };
			return db;
		}
	}

	namespace sph = oral::sph;

	void OralTest::testSimpleRecordInsertSelect ()
	{
		auto db = MakeDatabase ();

		auto adapted = Util::oral::AdaptPtr<SimpleRecord> (db);

		for (int i = 0; i < 3; ++i)
			adapted->DoInsert_ ({ i, QString::number (i) });

		const auto& list = adapted->DoSelectAll_ ();
		QCOMPARE (list, (QList<SimpleRecord> { { 0, "0" }, { 1, "1" }, { 2, "2" } }));
	}

	void OralTest::testSimpleRecordInsertReplaceSelect ()
	{
		auto db = MakeDatabase ();

		auto adapted = Util::oral::AdaptPtr<SimpleRecord> (db);

		for (int i = 0; i < 3; ++i)
			adapted->DoInsert_ ({ 0, QString::number (i) }, lco::InsertAction::Replace);

		const auto& list = adapted->DoSelectAll_ ();
		QCOMPARE (list, (QList<SimpleRecord> { { 0, "2" } }));
	}

	void OralTest::testSimpleRecordInsertIgnoreSelect ()
	{
		auto db = MakeDatabase ();

		auto adapted = Util::oral::AdaptPtr<SimpleRecord> (db);

		for (int i = 0; i < 3; ++i)
			adapted->DoInsert_ ({ 0, QString::number (i) }, lco::InsertAction::Ignore);

		const auto& list = adapted->DoSelectAll_ ();
		QCOMPARE (list, (QList<SimpleRecord> { { 0, "0" } }));
	}

	void OralTest::testSimpleRecordInsertSelectByFields ()
	{
		auto db = MakeDatabase ();

		auto adapted = Util::oral::AdaptPtr<SimpleRecord> (db);

		for (int i = 0; i < 3; ++i)
			adapted->DoInsert_ ({ i, QString::number (i) });

		const auto& list = adapted->DoSelectByFields_ (sph::_0 == 1);
		QCOMPARE (list, (QList<SimpleRecord> { { 1, "1" } }));
	}

	void OralTest::testSimpleRecordInsertSelectByFields2 ()
	{
		auto db = MakeDatabase ();

		auto adapted = Util::oral::AdaptPtr<SimpleRecord> (db);

		for (int i = 0; i < 3; ++i)
			adapted->DoInsert_ ({ i, QString::number (i) });

		const auto& list = adapted->DoSelectByFields_ (sph::_0 < 2);
		QCOMPARE (list, (QList<SimpleRecord> { { 0, "0" }, { 1, "1" } }));
	}

	void OralTest::testSimpleRecordInsertSelectByFields3 ()
	{
		auto db = MakeDatabase ();

		auto adapted = Util::oral::AdaptPtr<SimpleRecord> (db);

		for (int i = 0; i < 3; ++i)
			adapted->DoInsert_ ({ i, QString::number (i) });

		const auto& list = adapted->DoSelectByFields_ (sph::_0 < 2 && sph::_1 == QString { "1" });
		QCOMPARE (list, (QList<SimpleRecord> { { 1, "1" } }));
	}

	void OralTest::testSimpleRecordInsertSelectOneByFields ()
	{
		auto db = MakeDatabase ();

		auto adapted = Util::oral::AdaptPtr<SimpleRecord> (db);

		for (int i = 0; i < 3; ++i)
			adapted->DoInsert_ ({ i, QString::number (i) });

		const auto& single = adapted->DoSelectOneByFields_ (sph::_0 == 1);
		QCOMPARE (single, (boost::optional<SimpleRecord> { { 1, "1" } }));
	}
}
}
