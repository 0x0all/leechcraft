/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include "oral.h"

namespace LeechCraft
{
namespace Util
{
namespace oral
{
	namespace detail
	{
		bool MatchesSchema (const QString& baseName, const QString& schema, QSqlDatabase& db)
		{
			auto result = Util::RunTextQuery (db,
					QString { "SELECT sql FROM sqlite_master WHERE type = 'table' AND name = '%1'" }
							.arg (baseName));
			if (!result.next ())
				return true;

			const auto& existingDDL = result.value (0).toString ();

			auto figureOutFields = [] (const QString& str)
			{
				auto firstOpen = str.indexOf ('(');
				auto lastClose = str.lastIndexOf (')');
				return str.midRef (firstOpen, lastClose - firstOpen);
			};
			auto existing = figureOutFields (existingDDL);
			auto suggested = figureOutFields (schema);
			return existing == suggested;
		}
	}

	template<typename Record>
	void Migrate (QSqlDatabase& db)
	{
		const auto& baseName = Record::ClassName ();

		const auto& thisName = "copy" + baseName;
		const auto& schema = detail::AdaptCreateTable<Record> (detail::BuildCachedFieldsData<Record> (thisName));

		if (detail::MatchesSchema (baseName, schema, db))
		{
			qDebug () << Q_FUNC_INFO
					<< "not migrating"
					<< db.connectionName ();
			return;
		}

		qDebug () << Q_FUNC_INFO
				<< "migrating"
				<< db.connectionName ();

		Util::DBLock lock { db };
		lock.Init ();

		Util::RunTextQuery (db, schema);

		const auto& fields = detail::GetFieldsNames<Record> {} ().join (", ");

		Util::RunTextQuery (db,
				QString { "INSERT INTO %2 (%1) SELECT %1 FROM %3;" }
						.arg (fields)
						.arg (thisName)
						.arg (baseName));

		Util::RunTextQuery (db,
				QString { "DROP TABLE %1;" }
						.arg (baseName));
		Util::RunTextQuery (db,
				QString { "ALTER TABLE %1 RENAME TO %2;" }
						.arg (thisName)
						.arg (baseName));

		lock.Good ();
	}
}
}
}
