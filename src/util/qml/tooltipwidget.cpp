/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2013  Oleg Linkin <MaledictusDeMagog@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "tooltipwidget.h"
#include <QToolTip>
#include <QtDebug>

namespace LeechCraft
{
namespace Util
{
	ToolTipWidget::ToolTipWidget (QDeclarativeItem *parent)
	: QDeclarativeItem (parent)
	, ContainsMouse_ (false)
	{
		setAcceptHoverEvents (true);
		connect (&Timer_,
				SIGNAL (timeout ()),
				this,
				SLOT (timeout ()));
		Timer_.setSingleShot (true);
	}

	void ToolTipWidget::SetText (const QString& text)
	{
		if (Text_ != text)
		{
			Text_ = text;
			emit textChanged ();
		}
	}

	QString ToolTipWidget::GetText () const
	{
		return Text_;
	}

	bool ToolTipWidget::IsContainsMouse () const
	{
		return ContainsMouse_;
	}

	void ToolTipWidget::ShowToolTip (const QString& text) const
	{
		QToolTip::showText (cursor ().pos (), text);
	}

	void ToolTipWidget::hoverEnterEvent (QGraphicsSceneHoverEvent *event)
	{
		Timer_.start (1000);
		ContainsMouse_ = true;
		emit containsMouseChanged ();
		QDeclarativeItem::hoverEnterEvent (event);
	}

	void ToolTipWidget::hoverLeaveEvent (QGraphicsSceneHoverEvent *event)
	{
		Timer_.stop ();
		QToolTip::hideText ();
		ContainsMouse_ = false;
		emit containsMouseChanged ();
		QDeclarativeItem::hoverLeaveEvent (event);
	}

	void ToolTipWidget::timeout ()
	{
		ShowToolTip (Text_);
	}
}
}
