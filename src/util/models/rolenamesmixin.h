/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <utility>
#include <QHash>

namespace LC
{
namespace Util
{
	/** @brief Wraps differences between role names handling in Qt4 and
	 * Qt5.
	 *
	 * Qt4 uses QAbstractItemModel::setRoleNames() to set role names for
	 * a (non-virtual) QAbstractItemModel::roleNames() method. Qt5, on
	 * the other hand, just suggests overriding the (virtual) roleNames()
	 * method. This class provides an uniform interface. This class
	 * provides an uniform interface for role names setting.
	 *
	 * @tparam Model The original model type to derive from.
	 *
	 * @ingroup ModelUtil
	 */
	template<typename Model>
	class RoleNamesMixin : public Model
	{
		QHash<int, QByteArray> RoleNames_;
	protected:
		/** @brief Default constructor.
		 *
		 * Assumes the existence of a default constructor in the
		 * \em Model type.
		 */
		RoleNamesMixin () = default;

		/** @brief Constructs the base \em Model type with the given
		 * \em args.
		 *
		 * @tparam Args The arguments of the values to pass to the
		 * \em Model constructor.
		 * @param[in] args The values to pass to the \em Model
		 * constructor.
		 */
		template<typename... Args>
		RoleNamesMixin (Args&&... args)
		: Model { std::forward<Args> (args)... }
		{
		}

		/** @brief Sets the role names to \em roleNames.
		 *
		 * @param[in] roleNames The mapping from role value to its name.
		 *
		 * @sa roleNames()
		 */
		void setRoleNames (const QHash<int, QByteArray>& roleNames)
		{
			RoleNames_ = roleNames;
		}

		/** @brief Returns the role names.
		 *
		 * Returns the mapping from the role value to its name that was
		 * previously set via setRoleNames().
		 *
		 * @return The mapping from role value to its name.
		 *
		 * @sa setRoleNames()
		 */
		QHash<int, QByteArray> roleNames () const override
		{
			return RoleNames_;
		}
	};
}
}
