/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#ifndef USE_CPP14
#include <functional>
#endif

#include <type_traits>

namespace LeechCraft
{
namespace Util
{
	/** @brief Binds an instance of an object to its member function.
	 *
	 * @param[in] fn The member function of class T.
	 * @param[in] c The instance of class T to bind to the member
	 * function \em fn.
	 * @return A functor callable with all arguments of \em fn but the
	 * object itself.
	 * @tparam R The return type of the function.
	 * @tparam T The type of the object.
	 * @tparam Args The arguments to the function, besides the object
	 * itself.
	 */
#ifdef USE_CPP14
	template<typename R, typename B, typename C, typename... Args>
	auto BindMemFn (R (B::*fn) (Args...), C *c)
	{
		static_assert (std::is_base_of<B, C> {}, "Base class where the member pointer belongs must be convertible to the binded object's class.");
		return [fn, c] (Args... args) { return (c->*fn) (args...); };
	}

	template<typename R, typename B, typename C, typename... Args>
	auto BindMemFn (R (B::*fn) (Args...) const, const C *c)
	{
		static_assert (std::is_base_of<B, C> {}, "Base class where the member pointer belongs must be convertible to the binded object's class.");
		return [fn, c] (Args... args) { return (c->*fn) (args...); };
	}
#else
	template<typename R, typename B, typename C, typename... Args>
	std::function<R (Args...)> BindMemFn (R (B::*fn) (Args...), C *c)
	{
		static_assert (std::is_base_of<B, C> {}, "Base class where the member pointer belongs must be convertible to the binded object's class.");
		return [fn, c] (Args... args) { return (c->*fn) (args...); };
	}

	template<typename R, typename B, typename C, typename... Args>
	std::function<R (Args...)> BindMemFn (R (B::*fn) (Args...) const, const C *c)
	{
		static_assert (std::is_base_of<B, C> {}, "Base class where the member pointer belongs must be convertible to the binded object's class.");
		return [fn, c] (Args... args) { return (c->*fn) (args...); };
	}
#endif
}
}
