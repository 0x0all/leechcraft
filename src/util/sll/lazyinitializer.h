/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include <boost/optional.hpp>

namespace LeechCraft
{
namespace Util
{
	template<typename Source, typename Object>
	class LazyInitializer
	{
		Source Source_;

		boost::optional<Object> Object_;

		std::function<Object (Source)> Initializer_;
		std::function<void (Source&)> ClearSource_;
	public:
		template<typename Init>
		LazyInitializer (const Source& source,
				const Init& initializer,
				const std::function<void (Source&)>& clear = [] (Source& src) { src = Source {}; })
		: Source_ { source }
		, Initializer_ { initializer }
		, ClearSource_ { clear }
		{
		}

		LazyInitializer (const Object& object)
		: Object_ { object }
		{
		}

		LazyInitializer& operator= (const Object& object)
		{
			Object_ = object;
			ClearSource_ (Source_);
			return *this;
		}

		operator Object ()
		{
			CheckInit ();
			return *Object_;
		}

		Object& operator-> ()
		{
			CheckInit ();
			return *Object_;
		}
	private:
		void CheckInit ()
		{
			if (!Object_)
			{
				Object_ = Initializer_ (Source_);
				ClearSource_ (Source_);
			}
		}
	};
}
}
