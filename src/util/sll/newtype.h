/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

namespace LeechCraft
{
namespace Util
{
	/** @brief A somewhat "strong" typedef.
	 *
	 * \em NewType provides Haskell's newtype-like semantics.
	 *
	 * Typical usage is as follows:
	 *	\code
		using FirstAlias = Util::NewType<BaseType, NewTypeTag>;
		using SecondAlias = Util::NewType<BaseType, NewTypeTag>;
		\endcode
	 *
	 * After this, <code>FirstAlias</code> and <code>SecondAlias</code>
	 * become more or less independent from C++'s type system point of
	 * view.
	 *
	 * @note Using this class (and this header) requires pretty decent
	 * C++14 support for now provided only by clang 3.4+.
	 *
	 * @tparam T The type for which to create the params for.
	 */
	template<typename T, size_t, size_t>
	class NewType : public T
	{
	public:
		using T::T;

		NewType (const T& t)
		: T { t }
		{
		}
	};

#if __cpp_constexpr >= 201304
	namespace detail
	{
		constexpr size_t NewTypeHash (const char *str)
		{
			const auto basis = 14695981039346656037ULL;
			const auto prime = 1099511628211ULL;
			size_t hash = 0;
			auto value = basis;
			for (size_t i = 0; str [i]; ++i)
			{
				hash += value;
				value = (value ^ str [i]) * prime;
			}
			return hash;
		}
	}
#else
	namespace detail
	{
		template<typename T>
		constexpr size_t NewTypeHash (T)
		{
			static_assert (std::is_same<T, struct Foo>::value,
					"Sorry, no NewTypeHash, seems like your compiler doesn't support relaxed constexpr.");
			return 0;
		}
	}
#endif
}
}

#define NewTypeTag LeechCraft::Util::detail::NewTypeHash(__FILE__), __LINE__
