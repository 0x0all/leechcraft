/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <tuple>
#include <type_traits>
#include <utility>

namespace LeechCraft
{
namespace Util
{
	template<typename F, typename... PrevArgs>
	class CurryImpl
	{
		F m_f;

		std::tuple<PrevArgs...> m_prevArgs;
	public:
		template<typename CF, typename CT>
		CurryImpl (CF&& f, CT&& prev)
		: m_f { std::forward<CF> (f) }
		, m_prevArgs { std::forward<CT> (prev) }
		{
		}

		template<typename T>
		auto operator() (T&& arg) const &
		{
			return CurryImpl::run (*this, std::forward<T> (arg));
		}

		template<typename T>
		auto operator() (T&& arg) &
		{
			return CurryImpl::run (std::as_const (*this), std::forward<T> (arg));
		}

		template<typename T>
		auto operator() (T&& arg) &&
		{
			return CurryImpl::run (std::move (*this), std::forward<T> (arg));
		}
	private:
		template<typename This, typename T>
		static auto run (This&& refThis, T&& arg)
		{
			if constexpr (std::is_invocable_v<F, PrevArgs..., T>)
			{
				auto wrapper = [&refThis, &arg] (auto&&... args)
				{
					return std::invoke (std::move (refThis.m_f), std::forward<decltype (args)> (args)..., std::forward<T> (arg));
				};
				return std::apply (std::move (wrapper), std::move (refThis.m_prevArgs));
			}
			else
				return CurryImpl<F, PrevArgs..., T>
				{
					std::move (refThis.m_f),
					std::tuple_cat (std::move (refThis.m_prevArgs), std::forward_as_tuple (std::forward<T> (arg)))
				};
		}
	};

	template<typename F, typename... Args>
	CurryImpl<std::decay_t<F>, Args...> Curry (F&& f, Args&&... args)
	{
		return { std::forward<F> (f), std::forward_as_tuple (std::forward<Args> (args)...) };
	}
}
}
