/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QFuture>

namespace LeechCraft
{
namespace Util
{
	template<typename T>
#if QT_VERSION < 0x050000
	class ConcurrentException : public QtConcurrent::Exception
#else
	class ConcurrentException : public QException
#endif
							  , public T
	{
	public:
		ConcurrentException () = default;

		template<typename... Args>
		ConcurrentException (Args&&... args)
		: T { std::forward<Args...> (args...) }
		{
		}

		void raise () const override
		{
			throw ConcurrentException<T> { *this };
		}

		ConcurrentException<T>* clone () const override
		{
			return new ConcurrentException<T> { *this };
		}

		const char* what () const noexcept override
		{
			return T::what ();
		}
	};

	template<typename T>
	class ExceptionWrapperBase
	{
		const T BaseEx_;
	public:
		ExceptionWrapperBase (const T& t)
		: BaseEx_ { t }
		{
		}

		ExceptionWrapperBase (T&& t)
		: BaseEx_ { std::move (t) }
		{
		}

		const char* what () const noexcept
		{
			return BaseEx_.what ();
		}
	};
}
}
