/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <boost/variant.hpp>
#include "void.h"
#include "util.h"
#include "typelist.h"
#include "typelevel.h"
#include "detector.h"

namespace LeechCraft
{
namespace Util
{
	namespace detail
	{
		template<typename... Bases>
		struct VisitorBase : std::decay_t<Bases>...
		{
			VisitorBase (Bases&&... bases)
			: std::decay_t<Bases> { std::forward<Bases> (bases) }...
			{
			}

			using std::decay_t<Bases>::operator()...;
		};

		template<typename R, typename... Args>
		struct Visitor : boost::static_visitor<R>
					   , VisitorBase<Args...>
		{
			using VisitorBase<Args...>::VisitorBase;
		};

		template<typename T>
		constexpr T Declval () { throw "shall not be called"; }

		template<typename... Args>
		constexpr bool AllLValueRefs = AllOf<std::is_lvalue_reference, Args...>;

		template<typename... Args>
		constexpr bool AllRValueRefs = AllOf<std::is_rvalue_reference, Args...>;

		template<typename... Args>
		constexpr bool AllConsts = AllOf<std::is_const, Args...>;

		template<typename... Args>
		constexpr bool AllConstsWithoutRefs = AllOf<std::is_const, std::remove_reference_t<Args>...>;

		template<typename R, typename... Args>
		constexpr decltype (auto) FixCommonType ()
		{
			if constexpr (AllConsts<Args...>)
				return Declval<std::add_const_t<R>> ();
			else if constexpr (AllLValueRefs<Args...>)
			{
				if constexpr (AllConstsWithoutRefs<Args...>)
					return Declval<std::add_lvalue_reference_t<std::add_const_t<R>>> ();
				else
					return Declval<std::add_lvalue_reference_t<R>> ();
			}
			else if constexpr (AllRValueRefs<Args...>)
			{
				static_assert (!AllConstsWithoutRefs<Args...>, "const rvalue references are useless");
				return Declval<std::add_rvalue_reference_t<R>> ();
			}
			else
				return Declval<R> ();
		}

		template<typename R, typename... Args>
		using FixCommonType_t = decltype (FixCommonType<R, Args...> ());

		template<typename... Vars,
				typename... Args,
				typename Common = std::common_type_t<std::result_of_t<detail::VisitorBase<Args...> (Vars&)>...>,
				typename Res = FixCommonType_t<Common, std::result_of_t<detail::VisitorBase<Args...> (Vars&)>...>>
		constexpr Res DetectCommonType (Typelist<Vars...>, Typelist<Args...>);
	}

	template<typename... Vars, typename... Args>
	decltype (auto) Visit (const boost::variant<Vars...>& v, Args&&... args)
	{
		using R_t = decltype (detail::DetectCommonType (Typelist<Vars...> {}, Typelist<Args...> {}));

		detail::Visitor<R_t, Args...> visitor { std::forward<Args> (args)... };
		return boost::apply_visitor (visitor, v);
	}

	template<typename... Vars, typename... Args>
	decltype (auto) Visit (boost::variant<Vars...>& v, Args&&... args)
	{
		using R_t = decltype (detail::DetectCommonType (Typelist<Vars...> {}, Typelist<Args...> {}));

		detail::Visitor<R_t, Args...> visitor { std::forward<Args> (args)... };
		return boost::apply_visitor (visitor, v);
	}

	namespace detail
	{
		struct VisitorFinallyTag {};
	}

	template<typename FinallyFunc, typename... Args>
	class Visitor
	{
		detail::VisitorBase<Args...> Base_;

		FinallyFunc Finally_;
	public:
		Visitor (Args&&... args)
		: Base_ { std::forward<Args> (args)... }
		{
		}

		Visitor (const detail::VisitorFinallyTag&, Args&&... args, FinallyFunc&& func)
		: Base_ { std::forward<Args> (args)... }
		, Finally_ { std::forward<FinallyFunc> (func) }
		{
		}

		template<typename T>
		decltype (auto) operator() (const T& var) const
		{
			if constexpr (std::is_same_v<FinallyFunc, Void>)
				return Visit (var, Base_);
			else
			{
				const auto guard = MakeScopeGuard (Finally_);
				return Visit (var, Base_);
			}
		}

		template<typename F>
		Visitor<F, detail::VisitorBase<Args...>> Finally (F&& func)
		{
			return { detail::VisitorFinallyTag {}, std::move (Base_), std::forward<F> (func) };
		}
	};

	template<typename... Args>
	Visitor (Args&&...) -> Visitor<Void, Args...>;

	template<typename T, typename... Args>
	auto InvokeOn (T&& t, Args&&... args)
	{
		return detail::VisitorBase<Args...> { std::forward<Args> (args)... } (std::forward<T> (t));
	}
}
}
