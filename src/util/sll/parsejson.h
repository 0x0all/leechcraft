/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QByteArray>
#include <QVariant>
#include <QIODevice>
#include <QtDebug>
#include <QJsonDocument>

namespace LC
{
namespace Util
{
	/** @brief Parses JSON content in the given bytearray.
	 *
	 * This functions uses QJson on Qt4 (don't forget to link to it!) and
	 * Qt's native JSON parsers on Qt5.
	 *
	 * @param[in] bytes The byte array to parse JSON from.
	 * @param[in] context The context string to be used in logging
	 * messages.
	 * @return The recursive QVariant with JSON contents.
	 */
	inline QVariant ParseJson (const QByteArray& bytes, const char *context)
	{
		QJsonParseError error;
		const auto& result = QJsonDocument::fromJson (bytes, &error).toVariant ();
		if (error.error != QJsonParseError::NoError)
		{
			qWarning () << context
					<< "cannot parse"
					<< error.errorString ();
			return {};
		}
		return result;
	}

	/** @brief Utility function parsing JSON from the \em device.
	 *
	 * This function reads all available data from the \em device and
	 * passes it to the other ParseJson() overload.
	 *
	 * @param[in] device The device from which JSON-encoded data should
	 * be read.
	 * @param[in] context The context string to be used in logging
	 * messages.
	 * @return The recursive QVariant with JSON contents.
	 */
	inline QVariant ParseJson (QIODevice *device, const char *context)
	{
		return ParseJson (device->readAll (), context);
	}
}
}
