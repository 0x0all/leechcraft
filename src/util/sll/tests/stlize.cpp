/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "stlize.h"
#include <QtTest>
#include <qtutil.h>

QTEST_MAIN (LeechCraft::Util::StlizeTest)

namespace LeechCraft
{
namespace Util
{
	namespace
	{
		QMap<int, QString> GetSimpleMap ()
		{
			QMap<int, QString> someMap;
			someMap [0] = "aaa";
			someMap [1] = "bbb";
			someMap [2] = "ccc";
			return someMap;
		}
	}

	void StlizeTest::testConst ()
	{
		const auto& map = GetSimpleMap ();

		QStringList list;
		for (const auto& pair : Util::Stlize (map))
			list << pair.second;

		QCOMPARE (list, (QStringList { "aaa", "bbb", "ccc" }));
	}

	void StlizeTest::testNonConst ()
	{
		auto map = GetSimpleMap ();

		QStringList list;
		for (const auto& pair : Util::Stlize (map))
			list << pair.second;

		QCOMPARE (list, (QStringList { "aaa", "bbb", "ccc" }));
	}

	void StlizeTest::testNonConstModify ()
	{
		auto getMap = []
		{
			QMap<int, QString> someMap;
			someMap [0] = "aaa";
			someMap [1] = "bbb";
			someMap [2] = "ccc";
			return someMap;
		};

		auto map = getMap ();

		QStringList list;
		for (const auto& pair : Util::Stlize (map))
		{
			list << pair.second;
			pair.second.clear ();
		}

		QCOMPARE (list, (QStringList { "aaa", "bbb", "ccc" }));
		QCOMPARE (true, (std::all_of (map.begin (), map.end (), [] (const QString& str) { return str.isEmpty (); })));
	}
}
}

