/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QHash>
#include <QStringList>
#include "xdgconfig.h"

namespace LeechCraft
{
namespace Util
{
namespace XDG
{
	/** @brief A parser for XDG <code>.desktop</code> files.
	 *
	 * This parser does not produce any structured information. Instead,
	 * it only returns a hash from group name to corresponding group
	 * fields (see Result_t). A more structured representation is
	 * provided by the Item class.
	 *
	 * @sa Item
	 */
	class DesktopParser
	{
	public:
		/** @brief Mapping from a language to the list of values for that
		 * language.
		 *
		 * "No language" corresponds to a null string.
		 */
		using LangValue_t = QHash<QString, QStringList>;

		/** @brief Mapping from a field name to the list of
		 * language-dependent values of that field.
		 */
		using Group_t = QHash<QString, LangValue_t>;

		/** @brief Mapping from a group name to the group itself.
		 */
		using Result_t = QHash<QString, Group_t>;

		/** @brief Parses the XDG \em data.
		 *
		 * @param[in] data The byte array containing XDG
		 * <code>.desktop</code> file data.
		 * @return The set of groups in the XDG data.
		 */
		UTIL_XDG_API Result_t operator() (const QByteArray& data);
	};
}
}
}
