/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "itemtypes.h"
#include <QStringList>
#include <QDir>
#include <QtDebug>
#include <util/sll/prelude.h>

namespace LeechCraft
{
namespace Util
{
namespace XDG
{
	namespace
	{
		QStringList ToPathsImpl (Type type)
		{
			switch (type)
			{
			case Type::Application:
			case Type::Dir:
			case Type::URL:
				return
				{
					"/usr/share/applications",
					"/usr/local/share/applications"
				};
			case Type::Other:
				return {};
			}

			qWarning () << Q_FUNC_INFO
					<< "unknown type"
					<< static_cast<int> (type);
			return {};
		}

		QStringList Recurse (const QString& path)
		{
			const auto& infos = QDir { path }.entryInfoList (QDir::AllDirs | QDir::NoDotAndDotDot);

			QStringList result { path };
			result += Util::ConcatMap (infos,
					[] (const QFileInfo& info)
					{
						return Recurse (info.absoluteFilePath ());
					});
			return result;
		}

		QStringList ToPathsRecurse (Type type)
		{
			return Util::ConcatMap (ToPathsImpl (type), Recurse);
		}
	}

	QStringList ToPaths (const QList<Type>& types)
	{
		return Util::ConcatMap (types, ToPathsRecurse);
	}
}
}
}
