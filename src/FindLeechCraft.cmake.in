# LEECHCRAFT_INCLUDE_DIR
# LEECHCRAFT_LIBRARIES
# LEECHCRAFT_FOUND

if (USE_QT5)
	set (CMAKE_INCLUDE_CURRENT_DIR ON)
	find_package (Qt5Widgets)

	find_package(Qt5LinguistTools REQUIRED)
	if (Qt5LinguistTools_FOUND)
		if (NOT TARGET Qt5::lconvert AND TARGET Qt5::lrelease)
			get_target_property(_lrelease_location Qt5::lrelease LOCATION)
			get_filename_component(_lrelease_path ${_lrelease_location} PATH)
			find_program(QT_LCONVERT_EXECUTABLE NAMES lconvert-qt5 lconvert PATHS ${_lrelease_path} NO_DEFAULT_PATH NO_CMAKE_FIND_ROOT_PATH)
		elseif(TARGET Qt5::lconvert AND NOT Qt5_LCONVERT_EXECUTABLE)
			# Newer Qt5 versions define the target, but not the Qt5_LCONVERT_EXECUTABLE variable for some reason
			get_target_property(QT_LCONVERT_EXECUTABLE Qt5::lconvert LOCATION)
		endif()

		# Compatibility with the Qt4 variables
		set(QT_LRELEASE_EXECUTABLE ${Qt5_LRELEASE_EXECUTABLE})
		set(QT_LUPDATE_EXECUTABLE ${Qt5_LUPDATE_EXECUTABLE})
		if (Qt5_LCONVERT_EXECUTABLE)
			set(QT_LCONVERT_EXECUTABLE ${Qt5_LCONVERT_EXECUTABLE})
		endif()
	endif()
else ()
	find_package (Qt4 REQUIRED)
endif ()

macro (QtWrapUi outfiles)
	set (UIS_H)
	if (USE_QT5)
		QT5_WRAP_UI (UIS_H ${ARGN})
	else ()
		QT4_WRAP_UI (UIS_H ${ARGN})
	endif ()
	set (${outfiles} ${${outfiles}} ${UIS_H})
endmacro ()

macro (QtAddResources outfiles)
	set (RCCS)
	if (USE_QT5)
		QT5_ADD_RESOURCES (RCCS ${ARGN})
	else ()
		QT4_ADD_RESOURCES (RCCS ${ARGN})
	endif ()
	set (${outfiles} ${${outfiles}} ${RCCS})
endmacro ()

macro (FindQtLibs Target)
	cmake_policy (SET CMP0043 NEW)
	if (USE_QT5)
		set (CMAKE_INCLUDE_CURRENT_DIR ON)
		find_package (Qt5Widgets)
		QT5_USE_MODULES (${Target} ${ARGN})
	else ()
		foreach (_currentArg ${ARGN})
			if ((NOT ${_currentArg} STREQUAL Concurrent) AND
					(NOT ${_currentArg} STREQUAL Widgets) AND
					(NOT ${_currentArg} STREQUAL X11Extras))
				if ((${_currentArg} STREQUAL Quick) OR
						(${_currentArg} STREQUAL Qml) OR
						(${_currentArg} STREQUAL QuickWidgets))
					set (QT_USE_QTDECLARATIVE TRUE)
				elseif ((${_currentArg} STREQUAL WebKitWidgets) OR
						(${_currentArg} STREQUAL WebKit))
					set (QT_USE_QTWEBKIT TRUE)
				else ()
					string (TOUPPER ${_currentArg} _currentArgUpper)
					set (QT_USE_QT${_currentArgUpper} TRUE)
				endif ()
			endif ()
			if (NOT QT_USE_FILE)
				find_package (Qt4 REQUIRED)
			endif ()
			include (${QT_USE_FILE})
			target_link_libraries (${Target} ${QT_LIBRARIES})
		endforeach ()
	endif ()
endmacro ()

find_path(LEECHCRAFT_INCLUDE_DIR NAMES leechcraft/config.h PATH ENV)
if (LEECHCRAFT_INCLUDE_DIR)
	set (LEECHCRAFT_INCLUDE_DIR "${LEECHCRAFT_INCLUDE_DIR}/leechcraft")
endif ()

find_library(_LEECHCRAFT_UTIL NAMES leechcraft-util@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_DB NAMES leechcraft-util-db@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_GUI NAMES leechcraft-util-gui@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_MODELS NAMES leechcraft-util-models@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_NETWORK NAMES leechcraft-util-network@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_QML NAMES leechcraft-util-qml@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_SHORTCUTS NAMES leechcraft-util-shortcuts@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_SLL NAMES leechcraft-util-sll@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_SVCAUTH NAMES leechcraft-util-svcauth@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_SYS NAMES leechcraft-util-sys@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_TAGS NAMES leechcraft-util-tags@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_THREADS NAMES leechcraft-util-threads@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_XDG NAMES leechcraft-util-xdg@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_XPC NAMES leechcraft-util-xpc@LC_LIBSUFFIX@)
find_library(_LEECHCRAFT_UTIL_XSD NAMES leechcraft-util-xsd@LC_LIBSUFFIX@)

find_library(_LEECHCRAFT_UTIL_X11_OPT NAMES leechcraft-util-x11@LC_LIBSUFFIX@)
set (_LEECHCRAFT_UTIL_X11)
if (_LEECHCRAFT_UTIL_X11_OPT)
	set (_LEECHCRAFT_UTIL_X11 "${_LEECHCRAFT_UTIL_X11_OPT}")
endif ()

find_library(_LEECHCRAFT_XSD NAMES leechcraft-xsd@LC_LIBSUFFIX@)
set (LEECHCRAFT_LIBRARIES
	${_LEECHCRAFT_UTIL}
	${_LEECHCRAFT_UTIL_DB}
	${_LEECHCRAFT_UTIL_GUI}
	${_LEECHCRAFT_UTIL_MODELS}
	${_LEECHCRAFT_UTIL_NETWORK}
	${_LEECHCRAFT_UTIL_QML}
	${_LEECHCRAFT_UTIL_SHORTCUTS}
	${_LEECHCRAFT_UTIL_SLL}
	${_LEECHCRAFT_UTIL_SVCAUTH}
	${_LEECHCRAFT_UTIL_SYS}
	${_LEECHCRAFT_UTIL_TAGS}
	${_LEECHCRAFT_UTIL_THREADS}
	${_LEECHCRAFT_UTIL_X11}
	${_LEECHCRAFT_UTIL_XDG}
	${_LEECHCRAFT_UTIL_XPC}
	${_LEECHCRAFT_UTIL_XSD}
	${_LEECHCRAFT_XSD})
set (LEECHCRAFT_USE_FILE "${CMAKE_MODULE_PATH}/UseLeechCraft.cmake")

if(LEECHCRAFT_INCLUDE_DIR AND _LEECHCRAFT_UTIL AND _LEECHCRAFT_XSD)
	set(LEECHCRAFT_FOUND 1)
endif()

if(LEECHCRAFT_FOUND)
	message(STATUS "Found LeechCraft libraries at ${LEECHCRAFT_LIBRARIES}")
	message(STATUS "Found LeechCraft headers at ${LEECHCRAFT_INCLUDE_DIR}")
else()
	if(LEECHCRAFT_FIND_REQUIRED)
		message(FATAL_ERROR "Could NOT find required LeechCraft library, aborting")
	else()
		message(STATUS "Could NOT find LeechCraft")
	endif()
endif()

set (CMAKE_AUTOMOC TRUE)

function (CreateTrsUpTarget PlugName Langs Sources Forms Xml)
endfunction ()

function (CreateQmlTrsUpTarget PlugName Langs QmlFiles Xml)
endfunction ()

function (CreateTrs PlugName Langs CompiledTranVar)
	string (LENGTH "${PlugName}" _pnameLength)
	set (_basename "leechcraft")
	if (_pnameLength)
		set (_basename "${_basename}_${PlugName}")
	endif ()
	foreach (_LANG ${Langs})
		set (_tran ${_tran} ${_basename}_${_LANG}.ts)
		set (_ctran ${_ctran} ${CMAKE_CURRENT_SOURCE_DIR}/${_basename}_${_LANG}.qm)
	endforeach ()
	set (${CompiledTranVar} ${_ctran} PARENT_SCOPE)

	add_custom_command (OUTPUT ${_ctran}
		COMMAND "${QT_LRELEASE_EXECUTABLE}" ${_tran}
		DEPENDS ${_tran}
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		)
	install (FILES ${_ctran} DESTINATION ${LC_TRANSLATIONS_DEST})
	set (${CompiledTranVar} ${_ctran} PARENT_SCOPE)
endfunction ()

function (CreateTrsQml PlugName Langs Target QmlDirs)
	set (_basename "leechcraft_${PlugName}_qml")
	foreach (_LANG ${Langs})
		set (_tran ${_tran} ${_basename}_${_LANG}.ts)
		set (_ctran ${_ctran} ${CMAKE_CURRENT_SOURCE_DIR}/${_basename}_${_LANG}.qm)
	endforeach ()
	set (${CompiledTranVar} ${_ctran} PARENT_SCOPE)

	set (_marker "${_basename}_trsqml_marker")

	add_custom_target (${_marker}
		COMMAND "${QT_LRELEASE_EXECUTABLE}" ${_tran}
		COMMAND "${CMAKE_COMMAND}" -E tar cfj temp.tar ${_ctran}
		DEPENDS ${_tran}
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		)
	foreach (_DIR ${QmlDirs})
		string (REPLACE "/" "_" _ODIR ${_DIR})
		add_custom_target ("${_marker}_${_ODIR}_mkdir"
			COMMAND "${CMAKE_COMMAND}" -E make_directory "${CMAKE_CURRENT_SOURCE_DIR}/${_DIR}/ts/"
			DEPENDS ${_marker}
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
			)
		add_custom_target ("${_marker}_${_ODIR}"
			COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_CURRENT_SOURCE_DIR}/temp.tar" "temp.tar"
			COMMAND "${CMAKE_COMMAND}" -E tar xfj temp.tar
			COMMAND "${CMAKE_COMMAND}" -E remove temp.tar
			DEPENDS "${_marker}_${_ODIR}_mkdir"
			WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/${_DIR}/ts/
			)
	endforeach ()

	add_custom_target ("${_marker}_whole"
		COMMAND "${CMAKE_COMMAND}" -E remove temp.tar
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		)
	foreach (_DIR ${QmlDirs})
		string (REPLACE "/" "_" _ODIR ${_DIR})
		add_dependencies ("${_marker}_whole" "${_marker}_${_ODIR}")
	endforeach ()

	add_dependencies (${Target} "${_marker}_whole")
endfunction ()

set (LC_BINDIR @LC_BINDIR@)
set (LC_PLUGINS_DEST @LC_PLUGINS_DEST@)
set (LC_TRANSLATIONS_DEST @LC_TRANSLATIONS_DEST@)
set (LC_SETTINGS_DEST @LC_SETTINGS_DEST@)
set (LC_QML_DEST @LC_QML_DEST@)
set (LC_QML5_DEST @LC_QML5_DEST@)
set (LC_SCRIPTS_DEST @LC_SCRIPTS_DEST@)
set (LC_SHARE_DEST @LC_SHARE_DEST@)
set (LC_INSTALLEDMANIFEST_DEST @LC_INSTALLEDMANIFEST_DEST@)

set (CMAKE_CXX_FLAGS "@CMAKE_CXX_FLAGS@")
set (CMAKE_SHARED_LINKER_FLAGS "@CMAKE_SHARED_LINKER_FLAGS@")
set (CMAKE_EXE_LINKER_FLAGS "@CMAKE_EXE_LINKER_FLAGS@")
