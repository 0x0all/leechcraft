/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QtPlugin>
#include "audiostructs.h"

template<typename>
class QFuture;

namespace Media
{
	/** @brief Interface for plugins fetching tags for untagged files.
	 *
	 * If a plugin is able to fetch tags from a tags database by, for
	 * example, an audio fingerprint (like AcoustID/MusicBrainz database)
	 * it should implement this interface.
	 */
	class Q_DECL_EXPORT ITagsFetcher
	{
	public:
		virtual ~ITagsFetcher () {}

		/** @brief Requests fetching tags for the given file.
		 *
		 * This function initiates a search for tags for the given file
		 * and returns a QFuture that can be used to obtain the results.
		 *
		 * @param[in] filename The name of the file to search tags for.
		 * @return The QFuture with the tags corresponding to \em filename.
		 */
		virtual QFuture<AudioInfo> FetchTags (const QString& filename) = 0;
	};
}

Q_DECLARE_INTERFACE (Media::ITagsFetcher, "org.LeechCraft.Media.ITagsFetcher/1.0")
