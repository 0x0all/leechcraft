/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QtPlugin>

/** @brief Describes the progress of a single long-running operation.
 *
 * @sa ILoadProgressReporter
 */
class Q_DECL_EXPORT ILoadProcess
{
public:
	virtual ~ILoadProcess () {}

	/** @brief Sets the current progress to \em value.
	 *
	 * @param value The new value for the progress.
	 */
	virtual void ReportValue (int value) = 0;

	/** @brief Increments the current value for the progress.
	 */
	virtual void operator++ () = 0;
};

using ILoadProcess_ptr = std::shared_ptr<ILoadProcess>;

/** @brief Interface for reporting progress of some long-running operation
 * during load time.
 *
 * This object can be used to track multiple operations at once. Each
 * operation corresponds to an object returned by InitiateProcess() for
 * that operation.
 *
 * This object should be used by any plugin doing some long-running
 * operation during LeechCraft load (like a DB migration) because of
 * usability reasons.
 *
 * @sa IPluginManager::CreateLoadProgressReporter()
 * @sa ILoadProcess
 */
class Q_DECL_EXPORT ILoadProgressReporter
{
public:
	virtual ~ILoadProgressReporter () {}

	/** @brief Notifies about a specific long-running process during load.
	 *
	 * @param title The human-readable title of the operation.
	 * @param min The initial number of steps already done.
	 * @param max The total number of steps that should be done by.
	 * @return The object used to track this exact operation.
	 */
	virtual ILoadProcess_ptr InitiateProcess (const QString& title, int min, int max) = 0;
};

using ILoadProgressReporter_ptr = std::shared_ptr<ILoadProgressReporter>;

Q_DECLARE_INTERFACE (ILoadProgressReporter, "org.Deviant.LeechCraft.ILoadProgressReporter/1.0")
