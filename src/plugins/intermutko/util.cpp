/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "util.h"
#include <QComboBox>
#include <util/util.h>
#include "localeentry.h"

namespace LeechCraft
{
namespace Intermutko
{
	QString GetCountryName (QLocale::Language lang, QLocale::Country country)
	{
		return country == QLocale::AnyCountry ?
				QObject::tr ("Any country") :
				QLocale {lang, country }.nativeCountryName ();
	}

	QString GetDisplayCode (const LocaleEntry& entry)
	{
		const auto& name = Util::GetInternetLocaleName ({ entry.Language_, entry.Country_ });
		return entry.Country_ != QLocale::AnyCountry ?
				name :
				name.left (2);
	}

	void FillLanguageCombobox (QComboBox *combo)
	{
		for (int i = 0; i < QLocale::LastLanguage; ++i)
		{
			if (i == QLocale::C)
				continue;

			combo->addItem (QLocale::languageToString (static_cast<QLocale::Language> (i)), i);
		}
		combo->model ()->sort (0);
	}
}
}
