/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_SYNCER_SERVERCONNECTION_H
#define PLUGINS_SYNCER_SERVERCONNECTION_H
#include <QObject>

class QTcpSocket;

namespace LeechCraft
{
namespace Syncer
{
	class ServerConnection : public QObject
	{
		Q_OBJECT

		QTcpSocket *Socket_;
		QByteArray Chain_;
	public:
		enum ErrorCode
		{
			ECUnknownCommand = 0,
			ECUserRegistered,
			ECUserNotRegistered,
			ECWrongPassword,
			ECAlreadyConnected,
			ECOddFilterParameters,
			ECWrongDeltaID
		};

		ServerConnection (const QByteArray&, QObject* = 0);

		static QByteArray FmtMsg (const QList<QByteArray>&);
		static QList<QByteArray> UnfmtMsg (const QByteArray&);

	public slots:
		void performLogin ();
		void reqMaxDelta ();
		void getDeltas (quint32 from);
		void putDeltas (const QList<QByteArray>&, quint32);
	private slots:
		void handleConnected ();
		void handleReadyRead ();
	signals:
		void success (const QList<QByteArray>&);
		void fail ();
		void deltaOutOfOrder ();
		void maxDeltaIDReceived (quint32);
	};
}
}

#endif
