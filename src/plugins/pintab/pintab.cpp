/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "pintab.h"
#include <QIcon>
#include <QMenu>
#include <QtDebug>
#include <util/util.h>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/core/icoretabwidget.h>
#include <interfaces/core/irootwindowsmanager.h>

#warning "Don't forget to add support for multiple windows here."

namespace LeechCraft
{
namespace PinTab
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		Util::InstallTranslator ("pintab");

		MainTabWidget_ = proxy->GetRootWindowsManager ()->GetTabWidget (0);
		connect (MainTabWidget_->GetQObject (),
				SIGNAL (tabInserted (int)),
				this,
				SLOT (checkPinState (int)));

		PinTab_ = new QAction (tr ("Pin tab"), this);
		connect (PinTab_,
				SIGNAL (triggered ()),
				this,
				SLOT (pinTab ()));

		UnPinTab_ = new QAction (tr ("Unpin tab"), this);
		connect (UnPinTab_,
				SIGNAL (triggered ()),
				this,
				SLOT (unPinTab ()));

		CloseSide_ = MainTabWidget_->GetCloseButtonPosition ();

		Id_ = 0;
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.PinTab";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "PinTab";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Support tabs pinning.");
	}

	QIcon Plugin::GetIcon () const
	{
		static QIcon icon (":/pintab/resources/images/pintab.svg");
		return icon;
	}

	QSet<QByteArray> Plugin::GetPluginClasses () const
	{
		QSet<QByteArray> result;
		result << "org.LeechCraft.Core.Plugins/1.0";
		return result;
	}

	void Plugin::hookTabContextMenuFill (LeechCraft::IHookProxy_ptr,
			QMenu *menu, int index)
	{
		QList<QAction*> actions = MainTabWidget_->GetPermanentActions ();
		QAction *firstAction = 0;
		if (!actions.isEmpty ())
			firstAction = actions.at (0);

		int realIndex = MainTabWidget_->TabData (index).toInt ();
		if (PinTabsIndex2TabData_.contains (realIndex))
		{
			menu->insertAction (firstAction, UnPinTab_);
			UnPinTab_->setProperty ("Leechcraft/PinTab/CurrentIndex", index);
		}
		else
		{
			menu->insertAction (firstAction, PinTab_);
			PinTab_->setProperty ("Leechcraft/PinTab/CurrentIndex", index);
		}
	}

	void Plugin::hookTabFinishedMoving (LeechCraft::IHookProxy_ptr, int index)
	{
		int realIndex = MainTabWidget_->TabData (index).toInt ();
		int realNextIndex = MainTabWidget_->TabData (index + 1).toInt ();
		int realPrevIndex = MainTabWidget_->TabData (index - 1).toInt ();
		if (PinTabsIndex2TabData_.contains (realNextIndex) &&
				!PinTabsIndex2TabData_.contains (realIndex))
		{
			pinTab (index);
			MainTabWidget_->MoveTab (PinTabsIndex2TabData_.count () - 1, index);
		}
		else if (PinTabsIndex2TabData_.contains (realIndex) &&
				index &&
				!PinTabsIndex2TabData_.contains (realPrevIndex))
		{
			unPinTab (index);
			MainTabWidget_->MoveTab (PinTabsIndex2TabData_.count (), index);
		}
	}

	void Plugin::hookTabSetText (IHookProxy_ptr proxy, int index)
	{
		int realIndex = MainTabWidget_->TabData (index).toInt ();
		if (PinTabsIndex2TabData_.contains (realIndex))
			proxy->CancelDefault ();
	}

	void Plugin::pinTab (int index)
	{
		if (index == -1)
			index = sender ()->property ("Leechcraft/PinTab/CurrentIndex").toInt ();

		if (index < 0 ||
				index >= MainTabWidget_->WidgetCount ())
		{
			qWarning () << Q_FUNC_INFO
					<< "invalid index "
					<< index;
			return;
		}

		MainTabWidget_->Widget (index)->
				setProperty ("SessionData/org.LeechCraft.PinTab.PinState", true);
		++Id_;
		auto pair = qMakePair (MainTabWidget_->TabText (index),
				MainTabWidget_->TabButton (index, CloseSide_));
		MainTabWidget_->SetTabData (index, Id_);
		MainTabWidget_->SetTabText (index, "");
		MainTabWidget_->SetTabClosable (index, false);
		PinTabsIndex2TabData_ [Id_] = pair;

		MainTabWidget_->MoveTab (index, PinTabsIndex2TabData_.count () - 1);
	}

	void Plugin::unPinTab (int index)
	{
		if (index == -1)
			index = sender ()->property ("Leechcraft/PinTab/CurrentIndex").toInt ();

		if (index < 0 ||
				index >= MainTabWidget_->WidgetCount ())
		{
			qWarning () << Q_FUNC_INFO
					<< "invalid index "
					<< index;
			return;
		}

		int realIndex = MainTabWidget_->TabData (index).toInt ();
		MainTabWidget_->Widget (index)->
				setProperty ("SessionData/org.LeechCraft.PinTab.PinState", false);
		auto data = PinTabsIndex2TabData_.take (realIndex);

		MainTabWidget_->SetTabText (index, data.first);
		MainTabWidget_->SetTabClosable (index, true, data.second);

		MainTabWidget_->MoveTab (index, PinTabsIndex2TabData_.count ());
	}

	void Plugin::checkPinState (int index)
	{
		if (MainTabWidget_->WidgetCount () <= index)
			return;

		bool isPinned = MainTabWidget_->Widget (index)->
				property ("SessionData/org.LeechCraft.PinTab.PinState").toBool ();

		if (isPinned)
			pinTab (index);
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_pintab, LeechCraft::PinTab::Plugin);
