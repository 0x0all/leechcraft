/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2011  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/


#pragma once

#include "kinotify.h"
#include <QWebView>
#include <QStateMachine>
#include "interfaces/structures.h"

namespace LeechCraft
{
namespace Util
{
	class ResourceLoader;
}

namespace Kinotify
{
	class NotificationAction;

	class KinotifyWidget : public QWebView
	{
		Q_OBJECT
		Q_PROPERTY (qreal opacity READ windowOpacity WRITE setWindowOpacity)

		ICoreProxy_ptr Proxy_;

		QString ID_;

		QString Title_;
		QString Body_;
		QString ImagePath_;
		QString Theme_;

		QSize DefaultSize_;
		int Timeout_;
		int AnimationTime_;
		QTimer *CloseTimer_;
		QTimer *CheckTimer_;
		QStateMachine Machine_;
		QStringList ActionsNames_;
		NotificationAction *Action_;
		std::shared_ptr<Util::ResourceLoader> ThemeLoader_;
		QPixmap OverridePixmap_;
		QObject_ptr HandlerGuard_;

		static QMap<QString, QString> ThemeCache_;

		Entity E_;
	public:
		KinotifyWidget (ICoreProxy_ptr, int timeout = 0, QWidget *widget = 0, int animationTimeout = 300);
		void SetThemeLoader (std::shared_ptr<Util::ResourceLoader>);

		static void ClearThemeCache ();

		void SetEntity (const Entity&);

		QString GetTitle () const;
		QString GetBody () const;

		QString GetID () const;
		void SetID (const QString&);

		void SetContent (const QString&, const QString&,
				const QString&, const QSize& size = QSize (350, 70));
		void OverrideImage (const QPixmap&);
		void PrepareNotification ();
		void SetActions (const QStringList&, QObject_ptr);
	protected:
		virtual void mousePressEvent (QMouseEvent*);
		virtual void showEvent (QShowEvent*);
	private:
		const QByteArray MakeImage (const QString& imgPath = QString ());
		const QByteArray MakeImage (const QPixmap&);
		void CreateWidget ();
		void LoadTheme (const QString&);
		void SetData ();
		void SetWidgetPlace ();
		void ShowNotification ();
	public slots:
		void stateMachinePause ();
		void closeNotification ();
		void closeNotificationWidget ();
		void initJavaScript ();
		void handleLinkClicked (const QUrl&);
	signals:
		void initiateCloseNotification ();
		void checkNotificationQueue ();
		void gotEntity (const LeechCraft::Entity&);
	};
}
}
