/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "clipboardwatcher.h"
#include <QApplication>
#include <QTimer>
#include <QClipboard>
#include <util/xpc/util.h>
#include <util/sll/slotclosure.h>
#include <interfaces/core/ientitymanager.h>
#include "xmlsettingsmanager.h"

namespace LC
{
namespace Nacheku
{
	ClipboardWatcher::ClipboardWatcher (IEntityManager *iem, QObject *parent)
	: QObject { parent }
	{
		new Util::SlotClosure<Util::NoDeletePolicy>
		{
			[this, iem]
			{
				if (!XmlSettingsManager::Instance ()
						.property ("WatchClipboard").toBool ())
					return;

				const QString& text = QApplication::clipboard ()->text ();
				if (text.isEmpty () || text == PreviousClipboardContents_)
					return;

				PreviousClipboardContents_ = text;

				iem->HandleEntity (Util::MakeEntity (text.toUtf8 (),
						{},
						FromUserInitiated));
			},
			QApplication::clipboard (),
			SIGNAL (changed (QClipboard::Mode)),
			this
		};
	}
}
}

