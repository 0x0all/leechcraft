/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "browserwidgetsettingshandler.h"
#include "interfaces/poshuku/iwebview.h"
#include "browserwidget.h"
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Poshuku
{
	BrowserWidgetSettingsHandler::BrowserWidgetSettingsHandler (BrowserWidget *widget)
	: QObject { widget }
	, View_ { widget->GetWebView () }
	{
		XmlSettingsManager::Instance ()->RegisterObject ({
					"AutoLoadImages",
					"AllowJavascript",
					"AllowPlugins",
					"JavascriptCanOpenWindows",
					"JavascriptCanAccessClipboard",
					"UserStyleSheet",
					"LocalStorageDB",
					"EnableXSSAuditing",
					"EnableWebGL",
					"EnableHyperlinkAuditing",
					"EnableSmoothScrolling"
				},
				this, "viewerSettingsChanged");

		viewerSettingsChanged ();
	}

	void BrowserWidgetSettingsHandler::viewerSettingsChanged ()
	{
		auto xsm = XmlSettingsManager::Instance ();

		View_->SetAttribute (IWebView::Attribute::AutoLoadImages,
				xsm->property ("AutoLoadImages").toBool ());
		View_->SetAttribute (IWebView::Attribute::JavascriptEnabled,
				xsm->property ("AllowJavascript").toBool ());
		View_->SetAttribute (IWebView::Attribute::PluginsEnabled,
				xsm->property ("AllowPlugins").toBool ());
		View_->SetAttribute (IWebView::Attribute::JavascriptCanOpenWindows,
				xsm->property ("JavascriptCanOpenWindows").toBool ());
		View_->SetAttribute (IWebView::Attribute::JavascriptCanAccessClipboard,
				xsm->property ("JavascriptCanAccessClipboard").toBool ());
		View_->SetAttribute (IWebView::Attribute::LocalStorageEnabled,
				xsm->property ("LocalStorageDB").toBool ());
		View_->SetAttribute (IWebView::Attribute::XSSAuditingEnabled,
				xsm->property ("EnableXSSAuditing").toBool ());
		View_->SetAttribute (IWebView::Attribute::HyperlinkAuditingEnabled,
				xsm->property ("EnableHyperlinkAuditing").toBool ());
		View_->SetAttribute (IWebView::Attribute::WebGLEnabled,
				xsm->property ("EnableWebGL").toBool ());
		View_->SetAttribute (IWebView::Attribute::ScrollAnimatorEnabled,
				xsm->property ("EnableSmoothScrolling").toBool ());
	}
}
}
