/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "passwordremember.h"
#include <QtDebug>
#include <util/xpc/util.h>
#include <util/sll/qtutil.h>
#include <util/sll/prelude.h>
#include <util/sll/util.h>
#include <interfaces/core/ipluginsmanager.h>
#include <interfaces/ipersistentstorageplugin.h>
#include "core.h"

namespace LeechCraft
{
namespace Poshuku
{
	PasswordRemember::PasswordRemember (QWidget *parent)
	: Util::PageNotification (parent)
	{
		Ui_.setupUi (this);
	}

	void PasswordRemember::add (const PageFormsData_t& data)
	{
		TempData_ = data;

		const auto sb = Core::Instance ().GetStorageBackend ();
		for (auto& list : TempData_)
			list.erase (std::remove_if (list.begin (), list.end (),
					[sb] (const auto& ed) { return sb->GetFormsIgnored (ed.PageURL_.toString ()); }));

		for (auto i = TempData_.begin (); i != TempData_.end (); )
			if (i.value ().isEmpty ())
				i = TempData_.erase (i);
			else
				++i;

		if (!TempData_.isEmpty ())
			show ();
	}

	void PasswordRemember::on_Remember__released ()
	{
		auto hideGuard = Util::MakeScopeGuard ([this]
				{
					TempData_.clear ();
					hide ();
				});

		if (TempData_.isEmpty ())
			return;

		const auto storagePlugin = Core::Instance ().GetProxy ()->GetPluginsManager ()->
				GetAllCastableTo<IPersistentStoragePlugin*> ().value (0);
		if (!storagePlugin)
			return;

		const auto& storage = storagePlugin->RequestStorage ();
		if (!storage)
			return;

		for (const auto& pair : Util::Stlize (TempData_))
			storage->Set ("org.LeechCraft.Poshuku.Forms.InputByName/" + pair.first.toUtf8 (),
					Util::Map (pair.second, &QVariant::fromValue<ElementData>));
	}

	void PasswordRemember::on_NotNow__released ()
	{
		TempData_.clear ();
		hide ();
	}

	void PasswordRemember::on_Never__released ()
	{
		const auto sb = Core::Instance ().GetStorageBackend ();
		for (const auto& pair : Util::Stlize (TempData_))
			for (const auto& ed : pair.second)
				sb->SetFormsIgnored (ed.PageURL_.toString (), true);

		TempData_.clear ();
		hide ();
	}
}
}
