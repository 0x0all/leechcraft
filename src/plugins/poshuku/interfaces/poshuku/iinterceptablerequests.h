/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include <boost/variant.hpp>
#include <QUrl>
#include <QtPlugin>

namespace LeechCraft
{
namespace Poshuku
{
	class IInterceptableRequests
	{
	protected:
		virtual ~IInterceptableRequests () = default;
	public:
		enum class NavigationType
		{
			Unknown,
			Link,
			Typed,
			FormSubmitted,
			BackForward,
			Reload,
			Other
		};

		enum class ResourceType
		{
			Unknown,
			MainFrame,
			SubFrame,
			Stylesheet,
			Script,
			Image,
			FontResource,
			SubResource,
			Object,
			Media,
			Worker,
			SharedWorker,
			Prefetch,
			Favicon,
			Xhr,
			Ping,
			ServiceWorker,
			CspReport,
			PluginResource,
			Other
		};

		struct RequestInfo
		{
			QUrl RequestUrl_;

			QUrl PageUrl_;
			NavigationType Type_;
			ResourceType Type_;

			boost::optional<IWebView*> View_;
		};

		struct Block {};
		struct Allow {};

		struct Redirect
		{
			QUrl NewUrl_;
		};

		using Result_t = boost::variant<Block, Allow, Redirect>;

		virtual void AddInterceptor (const std::function<Result_t (RequestInfo)>&) = 0;
	};
}
}

Q_DECLARE_INTERFACE (LeechCraft::Poshuku::IInterceptableRequests,
		"org.LeechCraft.Poshuku.IInterceptableRequests/1.0")
