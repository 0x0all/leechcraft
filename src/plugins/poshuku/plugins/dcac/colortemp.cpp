/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "colortemp.h"
#include <cmath>
#include <QImage>

namespace LeechCraft
{
namespace Poshuku
{
namespace DCAC
{
	namespace
	{
		int Clamp (double color)
		{
			return std::max (std::min (static_cast<int> (std::round (color)), 255), 0);
		}

		int Temp2Red (double temperature)
		{
			if (temperature <= 66)
				return 255;

			return Clamp (329.6987 * (std::pow (temperature - 60, -0.1332)));
		}

		int Temp2Green (double temperature)
		{
			if (temperature <= 66)
				return Clamp (99.47 * std::log (temperature) - 161.12);
			else
				return Clamp (288.122 * std::pow (temperature - 60, -0.0755));
		}

		int Temp2Blue (double temperature)
		{
			if (temperature >= 66)
				return 255;
			if (temperature <= 19)
				return 0;

			return Clamp (138.52 * std::log (temperature - 10) - 305.0);
		}

		/** http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/ is used.
		 *
		 * Even though http://www.vendian.org/mncharity/dir3/blackbody/UnstableURLs/bbr_color.html
		 * for instance.
		 */
		QRgb Temp2Rgb (double temperature)
		{
			temperature /= 100;
			return qRgb (Temp2Red (temperature), Temp2Green (temperature), Temp2Blue (temperature));
		}
	}

	void AdjustColorTemp (QImage& image, int temperature)
	{
	}
}
}
}
