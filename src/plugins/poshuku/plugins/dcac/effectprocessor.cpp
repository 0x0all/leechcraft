/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "effectprocessor.h"
#include <QPainter>
#include <QWidget>
#include <QtDebug>
#include <util/sll/visitor.h>
#include "invertcolors.h"
#include "reducelightness.h"
#include "colortemp.h"

namespace LeechCraft
{
namespace Poshuku
{
namespace DCAC
{
	EffectProcessor::EffectProcessor (QWidget *view)
	: QGraphicsEffect { view }
	{
	}

	void EffectProcessor::SetEffects (QList<Effect_t> effects)
	{
		if (effects == Effects_)
			return;

		Effects_ = std::move (effects);
		update ();
	}

	namespace
	{
		bool ApplyEffect (const Effect_t& effect, QImage& image)
		{
			return Util::Visit (effect,
					[&image] (const InvertEffect& effect)
					{
						return InvertColors (image, effect.Threshold_);
					},
					[&image] (const LightnessEffect& effect)
					{
						ReduceLightness (image, effect.Factor_);
						return true;
					},
					[&image] (const ColorTempEffect& effect)
					{
						AdjustColorTemp (image, effect.Temperature_);
						return true;
					});
		}
	}

	void EffectProcessor::draw (QPainter *painter)
	{
		if (Effects_.isEmpty ())
		{
			drawSource (painter);
			return;
		}

		QPoint offset;

		auto image = sourcePixmap (Qt::LogicalCoordinates, &offset, QGraphicsEffect::NoPad).toImage ();
		switch (image.format ())
		{
		case QImage::Format_ARGB32:
		case QImage::Format_ARGB32_Premultiplied:
			break;
		default:
			image = image.convertToFormat (QImage::Format_ARGB32);
			break;
		}
		image.detach ();

		bool hadEffects = false;
		for (const auto& effect : Effects_)
			if (ApplyEffect (effect, image))
				hadEffects = true;

		if (hadEffects)
			painter->drawImage (offset, image);
		else
			drawSource (painter);
	}
}
}
}
