/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "webpluginfactory.h"
#include <QWidget>
#include <interfaces/poshuku/iwebpluginprovider.h>

namespace LeechCraft
{
namespace Poshuku
{
namespace WebKitView
{
	WebPluginFactory::WebPluginFactory (IPluginsManager *pm, QObject* parent)
	: QWebPluginFactory { parent }
	, PM_ { pm }
	{
		Reload ();
	}

	QObject* WebPluginFactory::create (const QString& mime,
			const QUrl& url,
			const QStringList& args, const QStringList& params) const
	{
		for (const auto plugin : MIME2Plugin_.values (mime))
			if (const auto result = plugin->Create (mime, url, args, params))
				return result;

		return nullptr;
	}

	QList<QWebPluginFactory::Plugin> WebPluginFactory::plugins () const
	{
		QList<Plugin> result;
		for (const auto plugin : Plugins_)
			if (const auto res = plugin->Plugin (true))
				result << *res;
		return result;
	}

	void WebPluginFactory::refreshPlugins ()
	{
		Reload ();
		QWebPluginFactory::refreshPlugins ();
	}

	void WebPluginFactory::Reload ()
	{
		Plugins_.clear ();
		MIME2Plugin_.clear ();

		for (const auto provider : PM_->GetAllCastableTo<IWebPluginProvider*> ())
			Plugins_ += provider->GetWebPlugins ();

		for (const auto plugin : Plugins_)
		{
			const auto maybeInfo = plugin->Plugin (false);
			if (maybeInfo)
				for (const auto& mime : maybeInfo->mimeTypes)
					MIME2Plugin_.insertMulti (mime.name, plugin);
		}
	}
}
}
}
