/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "webviewsmoothscroller.h"
#include <cmath>
#include <qwebview.h>
#include <qwebpage.h>
#include <qwebframe.h>
#include <QKeyEvent>
#include <QTimer>
#include <util/sll/lambdaeventfilter.h>

namespace LeechCraft
{
namespace Poshuku
{
namespace WebKitView
{
	WebViewSmoothScroller::WebViewSmoothScroller (QWebView *view)
	: QObject { view }
	, View_ { view }
	, ScrollTimer_ { new QTimer { this } }
	{
		connect (ScrollTimer_,
				SIGNAL (timeout ()),
				this,
				SLOT (handleAutoscroll ()));

		auto ef = Util::MakeLambdaEventFilter ([this] (QKeyEvent *event)
				{
					if (event->modifiers () == Qt::SHIFT &&
						(event->key () == Qt::Key_PageUp || event->key () == Qt::Key_PageDown))
					{
						ScrollDelta_ += event->key () == Qt::Key_PageUp ? -0.1 : 0.1;
						if (!ScrollTimer_->isActive ())
							ScrollTimer_->start (30);
						return true;
					}
					else if (event->modifiers () == Qt::SHIFT &&
							 event->key () == Qt::Key_Delete)
					{
						ScrollDelta_ = 0;
						ScrollTimer_->stop ();
						return true;
					}
					return false;
				},
				this);
		view->installEventFilter (ef);
	}

	void WebViewSmoothScroller::handleAutoscroll ()
	{
		if (std::fabs (ScrollDelta_) < std::numeric_limits<decltype (ScrollDelta_)>::epsilon ())
			return;

		AccumulatedScrollShift_ += ScrollDelta_;

		if (std::abs (AccumulatedScrollShift_) >= 1)
		{
			const auto mf = View_->page ()->mainFrame ();
			auto pos = mf->scrollPosition ();
			pos += QPoint (0, AccumulatedScrollShift_);
			mf->setScrollPosition (pos);

			AccumulatedScrollShift_ -= static_cast<int> (AccumulatedScrollShift_);
		}
	}
}
}
}
