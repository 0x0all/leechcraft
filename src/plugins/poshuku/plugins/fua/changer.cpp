/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "changer.h"
#include <QPushButton>
#include <util/sll/prelude.h>

namespace LeechCraft
{
namespace Poshuku
{
namespace Fua
{
	Changer::Changer (const QList<QPair<QString, QString>>& ids,
			const QMap<QString, QString>& backLookup,
			const QString& suggestedDomain,
			const QString& selectedID,
			QWidget *parent)
	: QDialog (parent)
	, IDs_ (ids)
	, BackLookup_ (backLookup)
	{
		Ui_.setupUi (this);

		Ui_.Agent_->addItems (Util::Map (ids, [] (const QPair<QString, QString>& pair) { return pair.first; }));
		Ui_.Domain_->setText (suggestedDomain);
		Ui_.IDString_->setText (selectedID);
		Ui_.Agent_->setCurrentIndex (Ui_.Agent_->findText (BackLookup_ [selectedID]));
		SetEnabled ();
	}

	QString Changer::GetDomain () const
	{
		return Ui_.Domain_->text ();
	}

	QString Changer::GetID () const
	{
		return Ui_.IDString_->text ();
	}

	void Changer::on_Domain__textChanged ()
	{
		SetEnabled ();
	}

	void Changer::on_IDString__textChanged ()
	{
		SetEnabled ();
	}

	void Changer::on_Agent__currentIndexChanged (int idx)
	{
		if (idx >= 0)
			Ui_.IDString_->setText (IDs_.value (idx).second);
	}

	void Changer::SetEnabled ()
	{
		Ui_.ButtonBox_->button (QDialogButtonBox::Ok)->
			setEnabled (Ui_.Domain_->text ().size () &&
					Ui_.IDString_->text ().size ());
	}
}
}
}
