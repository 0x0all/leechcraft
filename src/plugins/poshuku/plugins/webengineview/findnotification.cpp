/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "findnotification.h"
#include <QWebEngineView>

namespace LeechCraft::Poshuku::WebEngineView
{
	FindNotification::FindNotification (ICoreProxy_ptr proxy, QWebEngineView *near)
	: Util::FindNotification { proxy, near }
	, WebView_ { near }
	{
		connect (near,
				&QWebEngineView::loadFinished,
				this,
				[this]
				{
					if (PreviousFindText_.isEmpty ())
						return;

					ClearFindResults ();
					findNext ();
				});
	}

	void FindNotification::ClearFindResults ()
	{
		PreviousFindText_ = "";
		WebView_->findText ({});
	}

	namespace
	{
		auto ToPageFlags (FindNotification::FindFlags flags)
		{
			QWebEnginePage::FindFlags pageFlags;
			auto check = [&pageFlags, flags] (FindNotification::FindFlag ourFlag, QWebEnginePage::FindFlag pageFlag)
			{
				if (flags & ourFlag)
					pageFlags |= pageFlag;
			};
			check (FindNotification::FindCaseSensitively, QWebEnginePage::FindCaseSensitively);
			check (FindNotification::FindBackwards, QWebEnginePage::FindBackward);
			return pageFlags;
		}
	}

	void FindNotification::handleNext (const QString& text, FindFlags findFlags)
	{
		const auto flags = ToPageFlags (findFlags);

		if (PreviousFindText_ != text)
		{
			WebView_->findText ({}, flags);
			PreviousFindText_ = text;
		}

		WebView_->findText (text, flags, [this] (bool found) { SetSuccessful (found); });
	}

	void FindNotification::reject ()
	{
		Util::FindNotification::reject ();
		ClearFindResults ();
	}
}
