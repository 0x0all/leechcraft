/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "icondatabase.h"
#include <functional>
#include <QUrl>
#include <QIcon>
#include "icondatabaseondisk.h"
#include "stringpathtrie.h"

namespace LeechCraft::Poshuku::WebEngineView
{
	IconDatabase::IconDatabase (QObject *parent)
	: QObject { parent }
	, DB_ { std::make_shared<IconDatabaseOnDisk> () }
	, Trie_ { std::make_shared<StringPathTrie<QUrl>> () }
	{
		for (const auto& [pageUrl, iconUrl] : DB_->GetAllPages ())
			MarkUrl (pageUrl, iconUrl);
	}

	void IconDatabase::UpdateIcon (const QUrl& pageUrl, const QIcon& icon, const QUrl& iconUrl)
	{
		if (icon.isNull ())
			return;

		DB_->UpdateIcon (pageUrl, icon, iconUrl);
		MarkUrl (pageUrl, iconUrl);
	}

	namespace
	{
		template<typename F>
		auto WithRefs (const QUrl& url, F&& fun)
		{
			auto path = url.path ();
			auto refs = path.splitRef ('/', QString::SkipEmptyParts);
			auto host = url.host ();
			refs.prepend ({ &host });

			return std::invoke (std::forward<F> (fun), std::move (refs));
		}
	}

	QIcon IconDatabase::GetIcon (const QUrl& pageUrl)
	{
		const auto& maybeMatch = WithRefs (pageUrl, [this] (const auto& refs) { return Trie_->BestMatch (refs); });
		return maybeMatch ?
				DB_->GetIcon (*maybeMatch) :
				QIcon {};
	}

	void IconDatabase::MarkUrl (const QUrl& pageUrl, const QUrl& iconUrl)
	{
		WithRefs (pageUrl, [this, iconUrl] (const auto& refs) { Trie_->Mark (refs, std::move (iconUrl)); });
	}
}
