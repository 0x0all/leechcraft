/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "icondatabaseondisk.h"
#include <QUrl>
#include <QIcon>
#include <QDir>
#include <QSqlError>
#include <util/db/oral/oral.h>
#include <util/db/oral/utilitytypes.h>
#include <util/sys/paths.h>

namespace LeechCraft::Poshuku::WebEngineView
{
	struct IconDatabaseOnDisk::IconUrl2IconRecord
	{
		Util::oral::PKey<QUrl, Util::oral::NoAutogen> IconUrl_;
		Util::oral::AsDataStream<QIcon> Icon_;

		static QString ClassName ()
		{
			return "IconUrl2Icon";
		}
	};

	struct IconDatabaseOnDisk::PageUrl2IconUrlRecord
	{
		Util::oral::PKey<QUrl, Util::oral::NoAutogen> PageUrl_;
		Util::oral::References<&IconUrl2IconRecord::IconUrl_> IconUrl_;
		QDateTime LastUpdate_;

		static QString ClassName ()
		{
			return "PageUrl2IconUrl";
		}
	};
}

using IDOD = LeechCraft::Poshuku::WebEngineView::IconDatabaseOnDisk;

BOOST_FUSION_ADAPT_STRUCT (IDOD::IconUrl2IconRecord,
		IconUrl_,
		Icon_)

BOOST_FUSION_ADAPT_STRUCT (IDOD::PageUrl2IconUrlRecord,
		PageUrl_,
		IconUrl_,
		LastUpdate_)

namespace LeechCraft::Poshuku::WebEngineView
{
	IconDatabaseOnDisk::IconDatabaseOnDisk ()
	: DB_ { QSqlDatabase::addDatabase ("QSQLITE",
			Util::GenConnectionName ("org.LeechCraft.Poshuku.WebEngineView.IconDB")) }
	{
		const auto& cacheDir = Util::GetUserDir (Util::UserDir::Cache, "poshuku/webengineview");
		DB_.setDatabaseName (cacheDir.filePath ("icons.db"));

		if (!DB_.open ())
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot open the database";
			Util::DBLock::DumpError (DB_.lastError ());
			throw std::runtime_error { "Cannot create database" };
		}

		Util::RunTextQuery (DB_, "PRAGMA synchronous = NORMAL;");
		Util::RunTextQuery (DB_, "PRAGMA journal_mode = WAL;");

		IconUrl2Icon_ = Util::oral::AdaptPtr<IconUrl2IconRecord> (DB_);
		PageUrl2IconUrl_ = Util::oral::AdaptPtr<PageUrl2IconUrlRecord> (DB_);
	}

	namespace sph = Util::oral::sph;

	void IconDatabaseOnDisk::UpdateIcon (const QUrl& pageUrl, const QIcon& icon, const QUrl& iconUrl)
	{
		using Replace = Util::oral::InsertAction::Replace;

		const auto& now = QDateTime::currentDateTime ();

		IconUrl2Icon_->Insert ({ iconUrl, icon }, Replace::PKey<IconUrl2IconRecord>);
		PageUrl2IconUrl_->Insert ({ pageUrl, iconUrl, now }, Replace::PKey<PageUrl2IconUrlRecord>);
	}

	QIcon IconDatabaseOnDisk::GetIcon (const QUrl& pageUrl)
	{
		return IconUrl2Icon_->SelectOne (sph::fields<&IconUrl2IconRecord::Icon_>,
				sph::f<&IconUrl2IconRecord::IconUrl_> == sph::f<&PageUrl2IconUrlRecord::IconUrl_> &&
				sph::f<&PageUrl2IconUrlRecord::PageUrl_> == pageUrl)
				.value_or (Util::oral::AsDataStream<QIcon> {});
	}

	QList<std::tuple<QUrl, QUrl>> IconDatabaseOnDisk::GetAllPages () const
	{
		return PageUrl2IconUrl_->Select (sph::fields<&PageUrl2IconUrlRecord::PageUrl_, &PageUrl2IconUrlRecord::IconUrl_>);
	}
}
