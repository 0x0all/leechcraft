/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QHash>
#include <QString>

namespace LeechCraft::Poshuku::WebEngineView
{
	template<typename V>
	class StringPathTrie
	{
		std::optional<V> Value_;

		// TODO C++20 use transparent hashes and unordered_map
		QHash<QString, StringPathTrie> Children_;
	public:
		void Mark (const QVector<QStringRef>& path, V value)
		{
			Mark (path.begin (), path.end (), std::move (value));
		}

		const std::optional<V>& BestMatch (const QVector<QStringRef>& path) const
		{
			return BestMatch (path.begin (), path.end ());
		}
	private:
		template<typename It>
		void Mark (It begin, It end, V value)
		{
			if (begin == end)
			{
				Value_ = std::move (value);
				return;
			}

			const auto& strRef = QString::fromRawData (begin->constData (), begin->size ());
			Children_ [strRef].Mark (begin + 1, end, std::move (value));
		}

		template<typename It>
		const std::optional<V>& BestMatch (It begin, It end) const
		{
			if (begin == end)
				return Value_;

			const auto& strRef = QString::fromRawData (begin->constData (), begin->size ());
			const auto pos = Children_.find (strRef);
			return pos == Children_.end () ?
					Value_ :
					pos->BestMatch (begin + 1, end);
		}
	};
}
