/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "proxyobject.h"

#if QT_VERSION < 0x050000
#include <qwebkitversion.h>
#endif

#include <util/sys/sysinfo.h>
#include <interfaces/core/icoreproxy.h>
#include "core.h"
#include "xmlsettingsmanager.h"
#include "browserwidget.h"

namespace LeechCraft
{
namespace Poshuku
{
	QObject* ProxyObject::GetHistoryModel () const
	{
		return Core::Instance ().GetHistoryModel ();
	}

	QObject* ProxyObject::GetFavoritesModel () const
	{
		return Core::Instance ().GetFavoritesModel ();
	}

	QObject* ProxyObject::OpenInNewTab (const QUrl& url, bool inverted) const
	{
		bool raise = XmlSettingsManager::Instance ()->
				property ("BackgroundNewTabs").toBool ();
		if (inverted)
			raise = !raise;
		return Core::Instance ().NewURL (url, raise);
	}

	IStorageBackend_ptr ProxyObject::CreateStorageBackend ()
	{
		return StorageBackend::Create ();
	}

	QString ProxyObject::GetUserAgent (const QUrl& url) const
	{
		const auto& result = Core::Instance ().GetUserAgent (url);
		if (!result.isEmpty ())
			return result;

		return GetDefaultUserAgent ();
	}

	QString ProxyObject::GetDefaultUserAgent () const
	{
#if defined(Q_OS_WIN32)
		const auto platform = "Windows";
#elif defined (Q_OS_MAC)
		const auto platform = "Macintosh";
#else
		const auto platform = "X11";
#endif

		const auto& osInfo = Util::SysInfo::GetOSInfo ();
		auto osVersion = osInfo.Flavour_;
		if (!osInfo.Arch_.isEmpty ())
			osVersion += " " + osInfo.Arch_;

		const auto& lcVersion = Core::Instance ().GetProxy ()->GetVersion ();

		return QString { "Mozilla/5.0 (%1; %2) AppleWebKit/%3 (KHTML, like Gecko) Leechcraft/%4 Safari/%3" }
				.arg (platform)
				.arg (osVersion)
				.arg (qWebKitVersion ())
				.arg (lcVersion.section ('-', 0, 0));
	}
}
}
