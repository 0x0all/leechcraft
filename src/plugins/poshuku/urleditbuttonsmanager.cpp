/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "urleditbuttonsmanager.h"
#include <QToolButton>
#include <qwebframe.h>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/core/iiconthememanager.h>
#include "customwebview.h"
#include "core.h"
#include "progresslineedit.h"

namespace LeechCraft
{
namespace Poshuku
{
	UrlEditButtonsManager::UrlEditButtonsManager (CustomWebView *view,
			ProgressLineEdit *edit, QAction *add2favs)
	: QObject { view }
	, View_ { view }
	, LineEdit_ { edit }
	, Add2Favorites_ { add2favs }
	{
		connect (&Core::Instance (),
				SIGNAL (bookmarkAdded (const QString&)),
				this,
				SLOT (checkPageAsFavorite (const QString&)));
		connect (&Core::Instance (),
				SIGNAL (bookmarkRemoved (const QString&)),
				this,
				SLOT (checkPageAsFavorite (const QString&)));
		connect (LineEdit_,
				SIGNAL (textChanged (const QString&)),
				this,
				SLOT (checkPageAsFavorite (const QString&)));
		connect (View_,
				SIGNAL (loadFinished (bool)),
				this,
				SLOT (updateBookmarksState ()));

		LineEdit_->InsertAction (Add2Favorites_, 0, true);
	}

	void UrlEditButtonsManager::checkPageAsFavorite (const QString& url)
	{
		if (url != View_->url ().toString () &&
				url != LineEdit_->text ())
			return;

		if (Core::Instance ().IsUrlInFavourites (url))
		{
			Add2Favorites_->setProperty ("ActionIcon", "list-remove");
			Add2Favorites_->setText (tr ("Remove bookmark"));
			Add2Favorites_->setToolTip (tr ("Remove bookmark"));

			if (auto btn = LineEdit_->GetButtonFromAction (Add2Favorites_))
				btn->setIcon (Core::Instance ().GetProxy ()->
						GetIconThemeManager ()->GetIcon ("list-remove"));
		}
		else
		{
			Add2Favorites_->setProperty ("ActionIcon", "bookmark-new");
			Add2Favorites_->setText (tr ("Add bookmark"));
			Add2Favorites_->setToolTip (tr ("Add bookmark"));

			if (auto btn = LineEdit_->GetButtonFromAction (Add2Favorites_))
				btn->setIcon (Core::Instance ().GetProxy ()->
						GetIconThemeManager ()->GetIcon ("bookmark-new"));
		}
	}

	void UrlEditButtonsManager::updateBookmarksState ()
	{
		checkPageAsFavorite (View_->url ().toString ());
	}
}
}
