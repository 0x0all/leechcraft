/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <functional>
#include <optional>
#include <QSize>
#include <QString>
#include <util/sll/eitherfwd.h>

class QByteArray;
class QNetworkReply;
class QNetworkAccessManager;

template<typename, typename>
class QHash;

namespace LC
{
namespace Imgaste
{
	enum class HostingService
	{
		SavepicRu,
		ImagebinCa,
		PomfCat,
		MixtapeMoe
	};

	struct ImageInfo
	{
		quint64 Size_;
		QSize Dim_;
	};

	struct HostingServiceInfo
	{
		QString Name_;
		std::function<bool (ImageInfo)> Accepts_;
	};

	bool operator< (HostingService, HostingService);
	HostingServiceInfo ToInfo (HostingService);
	std::optional<HostingService> FromString (const QString&);
	QList<HostingService> GetAllServices ();

	struct Worker
	{
		virtual ~Worker () {}

		struct Error {};

		using Result_t = Util::Either<Error, QString>;

		using Headers_t = QHash<QByteArray, QList<QByteArray>>;

		virtual QNetworkReply* Post (const QByteArray& imageData,
				const QString& format, QNetworkAccessManager *am) const = 0;
		virtual Result_t GetLink (const QString& contents, const Headers_t& headers) const = 0;
	};

	typedef std::unique_ptr<Worker> Worker_ptr;

	Worker_ptr MakeWorker (HostingService);
}
}
