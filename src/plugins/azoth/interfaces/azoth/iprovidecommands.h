/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <variant>
#include <functional>
#include <stdexcept>
#include <QStringList>
#include <QtPlugin>

namespace LeechCraft
{
namespace Azoth
{
	class ICLEntry;

	struct StringCommandResult
	{
		bool StopProcessing_;
		QString Message_;
	};
	struct TextMorphResult
	{
		QString NewText_;
	};
	typedef std::variant<bool, StringCommandResult, TextMorphResult> CommandResult_t;

	typedef std::function<CommandResult_t (ICLEntry*, QString&)> Command_f;

	class CommandException : public std::runtime_error
	{
		const QString Error_;
		const bool TryOtherCommands_;
	public:
		CommandException (const QString& error, bool canTryOthers = false)
		: std::runtime_error { error.toUtf8 ().constData () }
		, Error_ { error }
		, TryOtherCommands_ { canTryOthers }
		{
		}

		const QString& GetError () const
		{
			return Error_;
		}

		bool CanTryOtherCommands () const
		{
			return TryOtherCommands_;
		}
	};

	struct StaticCommand
	{
		QStringList Names_;
		Command_f Command_;

		QString Description_;
		QString Help_;

		StaticCommand () = default;
		StaticCommand (const StaticCommand&) = default;

		StaticCommand (const QStringList& names, const Command_f& command)
		: Names_ { names }
		, Command_ { command }
		{
		}

		StaticCommand (const QStringList& names, const Command_f& command,
				const QString& descr, const QString& help)
		: Names_ { names }
		, Command_ { command }
		, Description_ { descr }
		, Help_ { help }
		{
		}
	};

	typedef QList<StaticCommand> StaticCommands_t;

	class IProvideCommands
	{
	public:
		virtual ~IProvideCommands () {}

		virtual StaticCommands_t GetStaticCommands (ICLEntry*) = 0;
	};
}
}

Q_DECLARE_INTERFACE (LeechCraft::Azoth::IProvideCommands, "org.LeechCraft.Azoth.IProvideCommands/1.0")
