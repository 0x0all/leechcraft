/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "sslerrorshandler.h"
#include <QSslError>
#include <QtDebug>
#include <util/sll/slotclosure.h>
#include <util/sll/visitor.h>
#include <util/sll/prelude.h>
#include "sslerrorsdialog.h"
#include "sslerrorschoicestorage.h"

namespace LeechCraft
{
namespace Azoth
{
	SslErrorsHandler::SslErrorsHandler (const Context_t& context, ICanHaveSslErrors *ichse)
	: QObject { ichse->GetQObject () }
	, Context_ { context }
	, ICHSE_ { ichse }
	{
		connect (ichse->GetQObject (),
				SIGNAL (sslErrors (QList<QSslError>, ICanHaveSslErrors::ISslErrorsReaction_ptr)),
				this,
				SLOT (sslErrors (QList<QSslError>, ICanHaveSslErrors::ISslErrorsReaction_ptr)));
	}

	namespace
	{
		bool CheckSavedChoice (SslErrorsChoiceStorage& storage,
				const SslErrorsHandler::Context_t& context,
				const QList<QSslError>& errors,
				const ICanHaveSslErrors::ISslErrorsReaction_ptr& reaction)
		{
			return Util::Visit (context,
					[] (SslErrorsHandler::AccountRegistration) { return false; },
					[&] (const SslErrorsHandler::Account& acc)
					{
						const auto choices = Util::Map (errors,
								[&] (QSslError err) { return storage.GetAction (acc.ID_, err.error ()); });

						if (std::any_of (choices.begin (), choices.end (),
								[] (const auto& choice) { return choice == SslErrorsChoiceStorage::Action::Abort; }))
						{
							reaction->Abort ();
							return true;
						}

						if (std::all_of (choices.begin (), choices.end (),
								[] (const auto& choice) { return choice == SslErrorsChoiceStorage::Action::Ignore; }))
						{
							reaction->Ignore ();
							return true;
						}

						return false;
					});
		}
	}

	void SslErrorsHandler::sslErrors (const QList<QSslError>& errors,
			const ICanHaveSslErrors::ISslErrorsReaction_ptr& reaction)
	{
		qDebug () << Q_FUNC_INFO;
		for (const auto& error : errors)
			qDebug () << error.errorString ();

		auto storage = std::make_shared<SslErrorsChoiceStorage> ();
		if (CheckSavedChoice (*storage, Context_, errors, reaction))
			return;

		SslErrorsDialog dia { Context_, errors };
		new Util::SlotClosure<Util::DeleteLaterPolicy>
		{
			[reaction] { reaction->Ignore (); },
			&dia,
			SIGNAL (accepted ()),
			&dia
		};
		new Util::SlotClosure<Util::DeleteLaterPolicy>
		{
			[reaction] { reaction->Abort (); },
			&dia,
			SIGNAL (rejected ()),
			&dia
		};
		dia.exec ();
	}
}
}
