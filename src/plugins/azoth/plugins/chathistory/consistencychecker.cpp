/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "consistencychecker.h"
#include <memory>
#include <boost/filesystem.hpp>
#include <QFile>
#include <QSqlDatabase>
#include <QMessageBox>
#include <QtConcurrentRun>
#include <util/db/util.h>
#include <util/sll/slotclosure.h>
#include <util/sll/visitor.h>
#include <util/threads/futures.h>
#include <util/util.h>
#include "dumper.h"

namespace LeechCraft
{
namespace Azoth
{
namespace ChatHistory
{
	class FailedImpl final : public ConsistencyChecker::IFailed
	{
		ConsistencyChecker * const Checker_;
	public:
		FailedImpl (ConsistencyChecker *checker)
		: Checker_ { checker }
		{
		}
	private:
		QFuture<ConsistencyChecker::DumpResult_t> DumpReinit () override
		{
			return Checker_->DumpReinit ();
		}
	};

	ConsistencyChecker::ConsistencyChecker (const QString& dbPath, QObject *parent)
	: DBPath_ { dbPath }
	{
	}

	QFuture<ConsistencyChecker::CheckResult_t> ConsistencyChecker::StartCheck ()
	{
		return QtConcurrent::run ([this] { return CheckDB (); });
	}

	ConsistencyChecker::CheckResult_t ConsistencyChecker::CheckDB ()
	{
		const auto& connName = Util::GenConnectionName ("ConsistencyChecker_" + DBPath_);

		std::shared_ptr<QSqlDatabase> db
		{
			new QSqlDatabase { QSqlDatabase::addDatabase ("QSQLITE", connName) },
			[connName] (QSqlDatabase *db)
			{
				delete db;
				QSqlDatabase::removeDatabase (connName);
			}
		};

		db->setDatabaseName (DBPath_);
		if (!db->open ())
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot open the DB, but that's not the kind of errors we're solving.";
			return Succeeded {};
		}

		QSqlQuery pragma { *db };
		if (pragma.exec ("PRAGMA integrity_check;") &&
				pragma.next () &&
				pragma.value (0) == "ok")
			return Succeeded {};
		else
			return std::make_shared<FailedImpl> (this);
	}

	QFuture<ConsistencyChecker::DumpResult_t> ConsistencyChecker::DumpReinit ()
	{
		QFutureInterface<DumpResult_t> iface;
		iface.reportStarted ();

		DumpReinitImpl (iface);

		return iface.future ();
	}

	namespace
	{
		void ReportResult (QFutureInterface<ConsistencyChecker::DumpResult_t> iface,
				const ConsistencyChecker::DumpResult_t& result)
		{
			iface.reportFinished (&result);
		}
	}

	void ConsistencyChecker::DumpReinitImpl (QFutureInterface<DumpResult_t> iface)
	{
		const QFileInfo fi { DBPath_ };
		const auto filesize = fi.size ();

		while (true)
		{
			const auto available = boost::filesystem::space (DBPath_.toStdString ()).available;
			qDebug () << Q_FUNC_INFO
					<< "db size:" << filesize
					<< "free space:" << available;
			if (available >= static_cast<qint64> (filesize))
				break;

			if (QMessageBox::question (nullptr,
						"LeechCraft",
						tr ("Not enough available space on partition with file %1: "
							"%2 while we expect the restored file to be around %3. "
							"Please either clean up the partition and retry or "
							"cancel the restore process.")
								.arg ("<em>" + DBPath_ + "</em>")
								.arg (Util::MakePrettySize (available))
								.arg (Util::MakePrettySize (filesize)),
						QMessageBox::Retry | QMessageBox::Cancel) == QMessageBox::Cancel)
			{
				ReportResult (iface, DumpError { tr ("Not enough available disk space.") });
				return;
			}
		}

		const auto& newPath = DBPath_ + ".new";

		while (true)
		{
			if (!QFile::exists (newPath))
				break;

			if (QMessageBox::question (nullptr,
						"LeechCraft",
						tr ("%1 already exists. Please either remove the file manually to retry the restore process or cancel it.")
								.arg ("<em>" + newPath + "</em>"),
						QMessageBox::Retry | QMessageBox::Cancel) == QMessageBox::Cancel)
			{
				ReportResult (iface, DumpError { tr ("Backup file already exists.") });
				return;
			}
		}

		const auto dumper = new Dumper { DBPath_, newPath };
		Util::Sequence (this, dumper->GetFuture ()) >>
				[=] (const Dumper::Result_t& result)
				{
					Util::Visit (result,
							[=] (const Dumper::Error& error)
							{
								ReportResult (iface,
										DumpError { tr ("Unable to restore the database.") + " " + error.What_ });
							},
							[=] (const Dumper::Finished&) { HandleDumperFinished (iface, newPath); });
				};
	}

	void ConsistencyChecker::HandleDumperFinished (QFutureInterface<DumpResult_t> iface, const QString& to)
	{
		const auto oldSize = QFileInfo { DBPath_ }.size ();
		const auto newSize = QFileInfo { to }.size ();

		const auto& backup = DBPath_ + ".bak";
		while (!QFile::rename (DBPath_, backup))
			QMessageBox::critical (nullptr,
					"LeechCraft",
					tr ("Unable to backup %1 to %2. Please remove %2 and hit OK.")
						.arg (DBPath_)
						.arg (backup));

		QFile::rename (to, DBPath_);

		ReportResult (iface, DumpFinished { oldSize, newSize });
	}
}
}
}
