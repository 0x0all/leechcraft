/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "avatarstimestampstorage.h"
#include <QDir>
#include <QSqlError>
#include <util/sys/paths.h>
#include <util/db/oral/oral.h>
#include <util/db/util.h>

namespace LeechCraft
{
namespace Azoth
{
namespace Vader
{
	struct AvatarsTimestampStorage::AvatarTimestamp
	{
		Util::oral::PKey<QString, Util::oral::NoAutogen> Email_;
		QDateTime TS_;

		static QString ClassName ()
		{
			return "AvatarTimestamps";
		}
	};
}
}
}

BOOST_FUSION_ADAPT_STRUCT (LeechCraft::Azoth::Vader::AvatarsTimestampStorage::AvatarTimestamp,
		Email_,
		TS_)

namespace LeechCraft
{
namespace Azoth
{
namespace Vader
{
	AvatarsTimestampStorage::AvatarsTimestampStorage ()
	: DB_ { "QSQLITE", "org.LeechCraft.Azoth.Vader.AvatarsTimestampStorage" }
	{
		if (!DB_->isOpen ())
		{
			const auto& cacheDir = Util::GetUserDir (Util::UserDir::Cache, "azoth/vader");
			DB_->setDatabaseName (cacheDir.filePath ("avatar_timestamps.db"));
			if (!DB_->open ())
			{
				qWarning () << Q_FUNC_INFO
						<< "cannot open the database";
				Util::DBLock::DumpError (DB_->lastError ());
				throw std::runtime_error { "Cannot create database" };
			}

			Util::RunTextQuery (DB_, "PRAGMA synchronous = NORMAL;");
			Util::RunTextQuery (DB_, "PRAGMA journal_mode = WAL;");
		}

		Adapted_ = Util::oral::AdaptPtr<AvatarTimestamp> (DB_);
	}

	boost::optional<QDateTime> AvatarsTimestampStorage::GetTimestamp (const QString& email)
	{
		namespace sph = Util::oral::sph;

		return Adapted_->SelectOne (sph::_1, sph::_0 == email);
	}

	void AvatarsTimestampStorage::SetTimestamp (const QString& full, const QDateTime& dt)
	{
		Adapted_->Insert ({ full, dt }, Util::oral::InsertAction::Replace);
	}
}
}
}
