/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "vkentry.h"
#include "vkaccount.h"
#include <QStringList>

namespace LeechCraft
{
namespace Azoth
{
namespace Murm
{
	VkEntry::VkEntry (const UserInfo& info, VkAccount *account)
	: QObject (account)
	, Account_ (account)
	, Info_ (info)
	{
	}

	void VkEntry::UpdateInfo (const UserInfo& info)
	{
		const bool updateStatus = info.IsOnline_ != Info_.IsOnline_;
		Info_ = info;

		if (updateStatus)
		{
			emit statusChanged (GetStatus (""), "");
			emit availableVariantsChanged (Variants ());
		}
	}

	const UserInfo& VkEntry::GetInfo () const
	{
		return Info_;
	}

	QObject* VkEntry::GetQObject ()
	{
		return this;
	}

	QObject* VkEntry::GetParentAccount () const
	{
		return Account_;
	}

	ICLEntry::Features VkEntry::GetEntryFeatures () const
	{
		return FPermanentEntry;
	}

	ICLEntry::EntryType VkEntry::GetEntryType () const
	{
		return ICLEntry::ETChat;
	}

	QString VkEntry::GetEntryName () const
	{
		QStringList components { Info_.FirstName_, Info_.Nick_, Info_.LastName_ };
		components.removeAll ({});
		return components.join (" ");
	}

	void VkEntry::SetEntryName (const QString&)
	{
	}

	QString VkEntry::GetEntryID () const
	{
		return Account_->GetAccountID () + QString::number (Info_.ID_);
	}

	QStringList VkEntry::Groups () const
	{
		return {};
	}

	void VkEntry::SetGroups (const QStringList&)
	{
	}

	QStringList VkEntry::Variants () const
	{
		return Info_.IsOnline_ ? QStringList ("") : QStringList ();
	}

	QObject* VkEntry::CreateMessage (IMessage::MessageType type, const QString& variant, const QString& body)
	{
		return nullptr;
	}

	QList<QObject*> VkEntry::GetAllMessages () const
	{
		return {};
	}

	void VkEntry::PurgeMessages (const QDateTime& before)
	{
	}

	void VkEntry::SetChatPartState (ChatPartState state, const QString& variant)
	{
	}

	EntryStatus VkEntry::GetStatus (const QString&) const
	{
		return { Info_.IsOnline_ ? SOnline : SOffline, {} };
	}

	QImage VkEntry::GetAvatar () const
	{
		return {};
	}

	QString VkEntry::GetRawInfo () const
	{
		return {};
	}

	void VkEntry::ShowInfo ()
	{
	}

	QList<QAction*> VkEntry::GetActions () const
	{
		return {};
	}

	QMap<QString, QVariant> VkEntry::GetClientInfo (const QString&) const
	{
		return {};
	}

	void VkEntry::MarkMsgsRead ()
	{
	}

	void VkEntry::ChatTabClosed()
	{
	}
}
}
}
