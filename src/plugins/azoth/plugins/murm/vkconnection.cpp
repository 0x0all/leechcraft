/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "vkconnection.h"
#include <QNetworkAccessManager>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QtDebug>
#include <qjson/parser.h>
#include <util/svcauth/vkauthmanager.h>
#include <util/queuemanager.h>

namespace LeechCraft
{
namespace Azoth
{
namespace Murm
{
	VkConnection::VkConnection (const QByteArray& cookies, ICoreProxy_ptr proxy)
	: AuthMgr_ (new Util::SvcAuth::VkAuthManager ("3778319",
			{ "messages", "notifications", "friends" }, cookies, proxy, this))
	, Proxy_ (proxy)
	, CallQueue_ (new Util::QueueManager (400))
	{
		connect (AuthMgr_,
				SIGNAL (cookiesChanged (QByteArray)),
				this,
				SLOT (saveCookies (QByteArray)));
		connect (AuthMgr_,
				SIGNAL (gotAuthKey (QString)),
				this,
				SLOT (callWithKey (QString)));

		Dispatcher_ [8] = [this] (const QVariantList& items)
			{ emit userStateChanged (items.value (1).toULongLong (), true); };
		Dispatcher_ [9] = [this] (const QVariantList& items)
			{ emit userStateChanged (items.value (1).toULongLong (), false); };
	}

	const QByteArray& VkConnection::GetCookies () const
	{
		return LastCookies_;
	}

	void VkConnection::RerequestFriends ()
	{
		PushFriendsRequest ();
		AuthMgr_->GetAuthKey ();
	}

	void VkConnection::SetStatus (const EntryStatus& status)
	{
		Status_ = status;
		if (Status_.State_ == SOffline)
			return;

		if (!LPKey_.isEmpty ())
			return;

		auto nam = Proxy_->GetNetworkAccessManager ();
		PreparedCalls_.push_back ([this, nam] (const QString& key)
			{
				QUrl lpUrl ("https://api.vk.com/method/friends.getLists");
				lpUrl.addQueryItem ("access_token", key);
				connect (nam->get (QNetworkRequest (lpUrl)),
						SIGNAL (finished ()),
						this,
						SLOT (handleGotFriendLists ()));
			});
		PushFriendsRequest ();
		PushLPFetchCall ();

		AuthMgr_->GetAuthKey ();
	}

	const EntryStatus& VkConnection::GetStatus () const
	{
		return Status_;
	}

	void VkConnection::PushFriendsRequest ()
	{
		auto nam = Proxy_->GetNetworkAccessManager ();
		PreparedCalls_.push_back ([this, nam] (const QString& key)
			{
				QUrl friendsUrl ("https://api.vk.com/method/friends.get");
				friendsUrl.addQueryItem ("access_token", key);
				friendsUrl.addQueryItem ("fields", "first_name,last_name,nickname,photo");
				connect (nam->get (QNetworkRequest (friendsUrl)),
						SIGNAL (finished ()),
						this,
						SLOT (handleGotFriends ()));
			});
	}

	void VkConnection::PushLPFetchCall ()
	{
		auto nam = Proxy_->GetNetworkAccessManager ();
		PreparedCalls_.push_back ([this, nam] (const QString& key)
			{
				QUrl lpUrl ("https://api.vk.com/method/messages.getLongPollServer");
				lpUrl.addQueryItem ("access_token", key);
				connect (nam->get (QNetworkRequest (lpUrl)),
						SIGNAL (finished ()),
						this,
						SLOT (handleGotLPServer ()));
			});
	}

	void VkConnection::Poll ()
	{
		QUrl url = LPURLTemplate_;
		url.addQueryItem ("ts", QString::number (LPTS_));
		connect (Proxy_->GetNetworkAccessManager ()->get (QNetworkRequest (url)),
				SIGNAL (finished ()),
				this,
				SLOT (handlePollFinished ()));
	}

	void VkConnection::handlePollFinished ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();

		const auto& data = QJson::Parser ().parse (reply);
		const auto& rootMap = data.toMap ();
		if (rootMap.contains ("failed"))
		{
			PushLPFetchCall ();
			AuthMgr_->GetAuthKey ();
			return;
		}

		for (const auto& update : rootMap ["updates"].toList ())
		{
			const auto& parmList = update.toList ();
			const auto code = parmList.value (0).toInt ();

			if (!Dispatcher_.contains (code))
				qWarning () << Q_FUNC_INFO
						<< "unknown code"
						<< code;
			else
				Dispatcher_ [code] (parmList);
		}

		LPTS_ = rootMap ["ts"].toULongLong ();
		Poll ();
	}

	void VkConnection::callWithKey (const QString& key)
	{
		while (!PreparedCalls_.isEmpty ())
		{
			auto f = PreparedCalls_.takeFirst ();
			CallQueue_->Schedule ([f, key] { f (key); });
		}
	}

	void VkConnection::handleGotFriendLists ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();

		QList<ListInfo> lists;

		const auto& data = QJson::Parser ().parse (reply);
		for (const auto& item : data.toMap () ["response"].toList ())
		{
			const auto& map = item.toMap ();
			lists.append ({ map ["lid"].toULongLong (), map ["name"].toString () });
		}

		emit gotLists (lists);
	}

	void VkConnection::handleGotFriends ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();

		QList<UserInfo> users;

		const auto& data = QJson::Parser ().parse (reply);
		for (const auto& item : data.toMap () ["response"].toList ())
		{
			const auto& userMap = item.toMap ();
			if (userMap.contains ("deactivated"))
				continue;

			QList<qulonglong> lists;
			for (const auto& item : userMap ["lists"].toList ())
				lists << item.toULongLong ();

			const UserInfo ui
			{
				userMap ["uid"].toULongLong (),

				userMap ["first_name"].toString (),
				userMap ["last_name"].toString (),
				userMap ["nickname"].toString (),

				QUrl (userMap ["photo"].toString ()),

				static_cast<bool> (userMap ["online"].toULongLong ()),

				lists
			};
			users << ui;
		}

		emit gotUsers (users);
	}

	void VkConnection::handleGotLPServer ()
	{
		auto reply = qobject_cast<QNetworkReply*> (sender ());
		reply->deleteLater ();

		const auto& data = QJson::Parser ().parse (reply);
		const auto& map = data.toMap () ["response"].toMap ();

		LPKey_ = map ["key"].toString ();
		LPServer_ = map ["server"].toString ();
		LPTS_ = map ["ts"].toULongLong ();

		LPURLTemplate_ = QUrl ("http://" + LPServer_);
		LPURLTemplate_.addQueryItem ("act", "a_check");
		LPURLTemplate_.addQueryItem ("key", LPKey_);
		LPURLTemplate_.addQueryItem ("wait", "25");
		LPURLTemplate_.addQueryItem ("mode", "2");

		Poll ();
	}

	void VkConnection::saveCookies (const QByteArray& cookies)
	{
		LastCookies_ = cookies;
		emit cookiesChanged ();
	}
}
}
}
