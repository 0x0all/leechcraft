/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "pendingupload.h"
#include <QFileInfo>
#include <QNetworkRequest>
#include <QNetworkReply>
#include <QHttpMultiPart>
#include <util/sll/parsejson.h>
#include <util/sll/slotclosure.h>
#include <util/sll/urloperator.h>
#include "vkaccount.h"
#include "vkentry.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Murm
{
	PendingUpload::PendingUpload (VkEntry *entry, const QString& path, VkAccount* acc)
	: QObject { acc }
	, Acc_ { acc }
	, Conn_ { acc->GetConnection () }
	, Path_ { path }
	, Entry_ { entry }
	{
		const auto nam = acc->GetCoreProxy ()->GetNetworkAccessManager ();
		Conn_->QueueRequest ([=] (const QString& key, const VkConnection::UrlParams_t& params)
			{
				QUrl url ("https://api.vk.com/method/docs.getUploadServer");
				Util::UrlOperator { url } ("access_token", key);

				VkConnection::AddParams (url, params);

				auto reply = nam->get (QNetworkRequest (url));
				new Util::SlotClosure<Util::DeleteLaterPolicy>
				{
					[this, reply]
					{
						HandleGotServer (reply);
						reply->deleteLater ();
					},
					reply,
					SIGNAL (finished ()),
					this
				};
				return reply;
			});
	}

	QString PendingUpload::GetSourceID () const
	{
		return Entry_->GetEntryID ();
	}

	QString PendingUpload::GetName () const
	{
		return Path_;
	}

	qint64 PendingUpload::GetSize () const
	{
		return QFileInfo { Path_ }.size ();
	}

	QString PendingUpload::GetComment () const
	{
		return {};
	}

	TransferDirection PendingUpload::GetDirection () const
	{
		return TDOut;
	}

	void PendingUpload::Accept (const QString&)
	{
	}

	void PendingUpload::Abort ()
	{
	}

	void PendingUpload::HandleGotServer (QNetworkReply *reply)
	{
	}
}
}
}
