/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "georesolver.h"
#include "vkconnection.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Murm
{
	GeoResolver::GeoResolver (VkConnection *conn, QObject *parent)
	: QObject (parent)
	, Conn_ (conn)
	{
	}

	void GeoResolver::CacheCountries (QList<int> ids)
	{
		auto newEnd = std::remove_if (ids.begin (), ids.end (),
				[this] (int id) { return Countries_.contains (id); });
		ids.erase (newEnd, ids.end ());

		Conn_->RequestGeoIds (ids,
				[this] (const QHash<int, QString>& result)
					{ Countries_.unite (result); },
				VkConnection::GeoIdType::Country);
	}

	void GeoResolver::GetCountry (int code, std::function<void (QString)> setter)
	{
		if (Countries_.contains (code))
		{
			setter (Countries_ [code]);
			return;
		}

		Conn_->RequestGeoIds ({ code },
				[this, setter, code] (const QHash<int, QString>& result)
				{
					Countries_.unite (result);
					setter (result [code]);
				},
				VkConnection::GeoIdType::Country);
	}
}
}
}
