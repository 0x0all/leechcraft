/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "actionsstorage.h"
#include <QStringList>
#include <QAction>
#include <util/sll/slotclosure.h>

namespace LeechCraft
{
namespace Azoth
{
namespace Autopaste
{
	QList<QAction*> ActionsStorage::GetEntryActions (QObject *entry)
	{
		if (Entry2Actions_.contains (entry))
			return Entry2Actions_.value (entry);

		new Util::SlotClosure<Util::DeleteLaterPolicy>
		{
			[this, entry] { Entry2Actions_.remove (entry); },
			entry,
			SIGNAL (destroyed ()),
			this
		};

		const auto paste = new QAction { tr ("Paste to pastebin..."), entry };
		paste->setProperty ("ActionIcon", "edit-paste");
		paste->setProperty ("Azoth/Autopaste/Areas", QStringList { "toolbar" });

		new Util::SlotClosure<Util::NoDeletePolicy>
		{
			[this, entry] { emit pasteRequested (entry); },
			paste,
			SIGNAL (triggered ()),
			paste
		};

		const QList<QAction*> list { paste };
		Entry2Actions_ [entry] = list;
		return list;
	}

	QStringList ActionsStorage::GetActionAreas (const QObject *action) const
	{
		return action->property ("Azoth/Autopaste/Areas").toStringList ();
	}
}
}
}
