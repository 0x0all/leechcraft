/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "toxaccount.h"
#include <QUuid>
#include <QDataStream>
#include <QtDebug>
#include <util/sll/slotclosure.h>
#include "toxprotocol.h"
#include "toxthread.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Sarin
{
	ToxAccount::ToxAccount (const QByteArray& uid, const QString& name, ToxProtocol *parent)
	: QObject { parent }
	, Proto_ { parent }
	, UID_ { uid }
	, Name_ { name }
	{
	}

	ToxAccount::ToxAccount (const QString& name, ToxProtocol *parent)
	: ToxAccount { QUuid::createUuid ().toByteArray (), name, parent }
	{
	}

	QByteArray ToxAccount::Serialize ()
	{
		QByteArray ba;
		QDataStream str { &ba, QIODevice::WriteOnly };
		str << static_cast<quint8> (1)
				<< UID_
				<< Name_
				<< Nick_
				<< ToxState_;

		return ba;
	}

	ToxAccount* ToxAccount::Deserialize (const QByteArray& data, ToxProtocol *proto)
	{
		QDataStream str { data };
		quint8 version = 0;
		str >> version;
		if (version != 1)
		{
			qWarning () << Q_FUNC_INFO
					<< "unknown version"
					<< version;
			return nullptr;
		}

		QByteArray uid;
		QString name;
		str >> uid
				>> name;

		const auto acc = new ToxAccount { uid, name, proto };
		str >> acc->Nick_
				>> acc->ToxState_;
		return acc;
	}

	void ToxAccount::SetNickname (const QString& nickname)
	{
		if (nickname == Nick_)
			return;

		Nick_ = nickname;
		emit accountChanged (this);
	}

	QObject* ToxAccount::GetQObject ()
	{
		return this;
	}

	QObject* ToxAccount::GetParentProtocol () const
	{
		return Proto_;
	}

	IAccount::AccountFeatures ToxAccount::GetAccountFeatures () const
	{
		return FRenamable;
	}

	QList<QObject*> ToxAccount::GetCLEntries ()
	{
		return {};
	}

	QString ToxAccount::GetAccountName () const
	{
		return Name_;
	}

	QString ToxAccount::GetOurNick () const
	{
		return Nick_.isEmpty () ? Name_ : Nick_;
	}

	void ToxAccount::RenameAccount (const QString& name)
	{
		if (name == Name_)
			return;

		Name_ = name;
		emit accountRenamed (Name_);
		emit accountChanged (this);
	}

	QByteArray ToxAccount::GetAccountID () const
	{
		return UID_;
	}

	QList<QAction*> ToxAccount::GetActions () const
	{
		return {};
	}

	void ToxAccount::OpenConfigurationDialog ()
	{
	}

	EntryStatus ToxAccount::GetState () const
	{
		return Thread_ ? Thread_->GetStatus () : EntryStatus {};
	}

	void ToxAccount::ChangeState (const EntryStatus& status)
	{
		if (status.State_ == SOffline)
		{
			if (Thread_ && Thread_->IsStoppable ())
			{
				new Util::SlotClosure<Util::DeleteLaterPolicy>
				{
					[thread = Thread_, status, this] { emit statusChanged (status); },
					Thread_.get (),
					SIGNAL (finished ()),
					Thread_.get ()
				};
				Thread_->Stop ();
			}
			Thread_.reset ();
			return;
		}

		if (!Thread_)
			InitThread (status);
		else
			Thread_->SetStatus (status);
	}

	void ToxAccount::Authorize (QObject*)
	{
	}

	void ToxAccount::DenyAuth (QObject*)
	{
	}

	void ToxAccount::RequestAuth (const QString&, const QString&, const QString&, const QStringList&)
	{
	}

	void ToxAccount::RemoveEntry (QObject*)
	{
	}

	QObject* ToxAccount::GetTransferManager () const
	{
		return nullptr;
	}

	void ToxAccount::InitThread (const EntryStatus& status)
	{
		Thread_ = std::make_shared<ToxThread> (Nick_, ToxState_);
		Thread_->SetStatus (status);
		connect (Thread_.get (),
				SIGNAL (statusChanged (EntryStatus)),
				this,
				SIGNAL (statusChanged (EntryStatus)));
		connect (Thread_.get (),
				SIGNAL (toxStateChanged (QByteArray)),
				this,
				SLOT (handleToxStateChanged (QByteArray)));
		Thread_->start (QThread::IdlePriority);
	}

	void ToxAccount::handleToxStateChanged (const QByteArray& toxState)
	{
		ToxState_ = toxState;
		emit accountChanged (this);
	}
}
}
}
