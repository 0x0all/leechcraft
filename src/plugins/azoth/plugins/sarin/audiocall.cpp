/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "audiocall.h"
#include <QAudioFormat>
#include <QFuture>
#include <QFutureWatcher>
#include <util/sll/slotclosure.h>
#include "threadexceptions.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Sarin
{
	AudioCall::AudioCall (const QString& sourceId, Direction dir, CallManager *callMgr)
	: SourceId_ { sourceId }
	, Dir_ { dir }
	, CallMgr_ { callMgr }
	{
		if (dir == DOut)
			InitiateCall ();
	}

	IMediaCall::Direction AudioCall::GetDirection () const
	{
		return Dir_;
	}

	QString AudioCall::GetSourceID () const
	{
		return SourceId_;
	}

	void AudioCall::Accept ()
	{
	}

	void AudioCall::Hangup ()
	{
	}

	QIODevice* AudioCall::GetAudioDevice ()
	{
		return nullptr;
	}

	QAudioFormat AudioCall::GetAudioFormat ()
	{
		return {};
	}

	QIODevice* AudioCall::GetVideoDevice ()
	{
		return nullptr;
	}

	void AudioCall::InitiateCall ()
	{
		auto watcher = new QFutureWatcher<CallManager::InitiateResult> { this };
		new Util::SlotClosure<Util::DeleteLaterPolicy>
		{
			[watcher, this]
			{
				watcher->deleteLater ();
				HandleInitiateResult (watcher->future ());
			},
			watcher,
			SIGNAL (finished ()),
			watcher
		};
		watcher->setFuture (CallMgr_->InitiateCall (SourceId_.toUtf8 ()));
	}

	void AudioCall::HandleInitiateResult (const QFuture<CallManager::InitiateResult>& future)
	{
		try
		{
			const auto index = future.result ().CallIndex_;
			qDebug () << Q_FUNC_INFO
					<< index;
			emit stateChanged (SActive);
		}
		catch (const ThreadException& ex)
		{
			qWarning () << Q_FUNC_INFO
					<< "got exception:"
					<< ex.what ();
			emit stateChanged (SFinished);
		}
		catch (const CallInitiateException& ex)
		{
			qWarning () << Q_FUNC_INFO
					<< "error initiating call:"
					<< ex.what ();
			emit stateChanged (SFinished);
		}
	}
}
}
}
