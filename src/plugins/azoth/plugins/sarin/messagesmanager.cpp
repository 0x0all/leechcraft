/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "messagesmanager.h"
#include <tox/tox.h>
#include "toxaccount.h"
#include "toxthread.h"
#include "chatmessage.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Sarin
{
	MessagesManager::MessagesManager (ToxAccount *acc)
	: QObject { acc }
	{
		connect (acc,
				SIGNAL (threadChanged (std::shared_ptr<ToxThread>)),
				this,
				SLOT (setThread (std::shared_ptr<ToxThread>)));
	}

	void MessagesManager::SendMessage (const QByteArray& privkey, ChatMessage *msg)
	{
		const auto thread = Thread_.lock ();
		if (!thread)
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot send messages in offline";
			return;
		}

		const auto& body = msg->GetBody ();
		thread->ScheduleFunction ([pkey = QByteArray::fromHex (privkey), body, this] (Tox *tox) -> uint32_t
				{
					const auto friendNum = tox_get_friend_number (tox,
							reinterpret_cast<const uint8_t*> (pkey.constData ()));
					if (friendNum < 0)
					{
						qWarning () << Q_FUNC_INFO
								<< "unknown friend";
						return 0;
					}

					const auto& msgUtf8 = body.toUtf8 ();
					return tox_send_message (tox,
							friendNum,
							reinterpret_cast<const uint8_t*> (msgUtf8.constData ()),
							msgUtf8.size ());
				});
	}

	void MessagesManager::setThread (const std::shared_ptr<ToxThread>& thread)
	{
		Thread_ = thread;
	}
}
}
}
