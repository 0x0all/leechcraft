/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "checker.h"
#include <algorithm>
#include <QFile>
#include <QTextCodec>
#include <util/util.h>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Rosenthal
{
	Checker::Checker (QObject *parent)
	: QObject (parent)
	{
		XmlSettingsManager::Instance ().RegisterObject ("CustomLocales",
				this, "handleCustomLocalesChanged");
		handleCustomLocalesChanged ();
	}

	QStringList Checker::GetPropositions (const QString& word) const
	{
		if (!Hunspell_)
			return {};

		const QByteArray& encoded = Codec_->fromUnicode (word);
		if (Hunspell_->spell (encoded.data ()))
			return QStringList ();

		char **wlist = 0;
		const int ns = Hunspell_->suggest (&wlist, encoded.data ());
		if (!ns || !wlist)
			return QStringList ();

		QStringList result;
		for (int i = 0; i < std::min (ns, 10); ++i)
			result << Codec_->toUnicode (wlist [i]);
		Hunspell_->free_list (&wlist, ns);

		return result;
	}

	bool Checker::IsCorrect (const QString& word) const
	{
		if (!Hunspell_)
			return true;

		const QByteArray& encoded = Codec_->fromUnicode (word);
		return Hunspell_->spell (encoded.data ());
	}

	void Checker::handleCustomLocalesChanged ()
	{
		Hunspell_.reset ();

		const QString& userSetting = XmlSettingsManager::Instance ()
				.property ("CustomLocales").toString ();
		const QStringList& userLocales = userSetting.split (' ', QString::SkipEmptyParts);

		const QString& locale = userLocales.value (0, Util::GetLocaleName ());

		QStringList candidates (Util::CreateIfNotExists ("data/dicts/myspell/").absolutePath ());
#ifdef Q_OS_WIN32
		candidates << qApp->applicationDirPath () + "/myspell/";
#else
		candidates << "/usr/local/share/myspell/"
				<< "/usr/share/myspell/"
				<< "/usr/local/share/myspell/dicts/"
				<< "/usr/share/myspell/dicts/"
				<< "/usr/local/share/hunspell/"
				<< "/usr/share/hunspell/";
#endif
		const auto basePos = std::find_if (candidates.begin (), candidates.end (),
				[&locale] (const QString& base) { return QFile::exists (base + locale + ".aff"); });
		if (basePos == candidates.end ())
			return;

		const auto& baBase = (*basePos + locale).toLatin1 ();
		Hunspell_.reset (new Hunspell (baBase + ".aff", baBase + ".dic"));

		if (!locale.startsWith ("en_"))
			Hunspell_->add_dic ((*basePos + "en_GB.dic").toLatin1 ());

		if (userLocales.size () > 1)
			for (const auto& loc : userLocales)
			{
				if (loc == locale ||
						loc == "en_GB")
					continue;

				Hunspell_->add_dic ((*basePos + loc + ".dic").toLatin1 ());
			}

		Codec_ = QTextCodec::codecForName (Hunspell_->get_dic_encoding ());
	}
}
}
}
