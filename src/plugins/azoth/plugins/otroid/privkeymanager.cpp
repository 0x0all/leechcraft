/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "privkeymanager.h"
#include <QStandardItemModel>

extern "C"
{
#include <libotr/privkey.h>
}

#include <interfaces/azoth/iproxyobject.h>
#include <interfaces/azoth/iaccount.h>
#include "util.h"

namespace LeechCraft
{
namespace Azoth
{
namespace OTRoid
{
	PrivKeyManager::PrivKeyManager (const OtrlUserState state, IProxyObject *proxy)
	: UserState_ { state }
	, AzothProxy_ { proxy }
	, Model_ { new QStandardItemModel { this } }
	{
	}

	QAbstractItemModel* PrivKeyManager::GetModel () const
	{
		return Model_;
	}

	void PrivKeyManager::reloadAll ()
	{
		Model_->clear ();
		Model_->setHorizontalHeaderLabels ({ tr ("Account"), tr ("Private key") });

		for (auto pkey = UserState_->privkey_root; pkey; pkey = pkey->next)
		{
			char fpHash [OTRL_PRIVKEY_FPRINT_HUMAN_LEN];
			if (!otrl_privkey_fingerprint (UserState_,
						fpHash, pkey->accountname, pkey->protocol))
				continue;

			const auto accObj = AzothProxy_->GetAccount (QString::fromUtf8 (pkey->accountname));
			const auto acc = qobject_cast<IAccount*> (accObj);
			if (!acc)
				continue;

			QList<QStandardItem*> row
			{
				new QStandardItem { acc->GetAccountName () },
				new QStandardItem { QString { fpHash } }
			};
			for (auto item : row)
				item->setEditable (false);
			Model_->appendRow (row);
		}
	}
}
}
}
