/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "openurlcommand.h"
#include <boost/spirit/include/qi.hpp>
#include <boost/spirit/include/phoenix.hpp>
#include <boost/spirit/include/qi_uint.hpp>
#include <boost/fusion/adapted.hpp>
#include <boost/fusion/adapted/std_pair.hpp>
#include <boost/fusion/include/std_pair.hpp>
#include <QStringList>
#include <QUrl>
#include <util/xpc/util.h>
#include <interfaces/core/ientitymanager.h>
#include <interfaces/azoth/iclentry.h>
#include <interfaces/azoth/imessage.h>
#include <interfaces/azoth/iproxyobject.h>
#include <interfaces/azoth/iprovidecommands.h>

namespace LeechCraft
{
namespace Azoth
{
namespace MuCommands
{
	namespace
	{
		QStringList GetAllUrls (IProxyObject *azothProxy, ICLEntry *entry)
		{
			QStringList urls;
			for (const auto msgObj : entry->GetAllMessages ())
			{
				const auto msg = qobject_cast<IMessage*> (msgObj);
				switch (msg->GetMessageType ())
				{
				case IMessage::Type::ChatMessage:
				case IMessage::Type::MUCMessage:
					break;
				default:
					continue;
				}

				urls += azothProxy->GetFormatterProxy ().FindLinks (msg->GetBody ());
			}

			urls.removeDuplicates ();

			return urls;
		}
	}

	StringCommandResult ListUrls (IProxyObject *azothProxy, ICLEntry *entry, const QString&)
	{
		const auto& urls = GetAllUrls (azothProxy, entry);
		const auto& body = urls.isEmpty () ?
				QObject::tr ("Sorry, no links found, chat more!") :
				QObject::tr ("Found links:") + "<ol><li>" + urls.join ("</li><li>") + "</li></ol>";
		return { true, body };
	}

	namespace
	{
		using UrlIndex_t = int;

		struct UrlRange
		{
			boost::optional<int> Start_;
			boost::optional<int> End_;
		};

		struct UrlRegExp
		{
			std::string Pat_;
		};

		using OpenUrlParams_t = boost::variant<UrlIndex_t, UrlRange, UrlRegExp>;
	}
}
}
}

BOOST_FUSION_ADAPT_STRUCT (LeechCraft::Azoth::MuCommands::UrlRange,
		(boost::optional<int>, Start_)
		(boost::optional<int>, End_));

BOOST_FUSION_ADAPT_STRUCT (LeechCraft::Azoth::MuCommands::UrlRegExp,
		(std::string, Pat_));

namespace LeechCraft
{
namespace Azoth
{
namespace MuCommands
{
	namespace
	{
		namespace ascii = boost::spirit::ascii;
		namespace qi = boost::spirit::qi;
		namespace phoenix = boost::phoenix;

		template<typename Iter>
		struct Parser : qi::grammar<Iter, OpenUrlParams_t ()>
		{
			qi::rule<Iter, OpenUrlParams_t ()> Start_;
			qi::rule<Iter, UrlIndex_t ()> Index_;
			qi::rule<Iter, UrlRange ()> Range_;
			qi::rule<Iter, UrlRegExp ()> RegExp_;

			Parser ()
			: Parser::base_type { Start_ }
			{
				Index_ = qi::int_;
				Range_ = -(qi::int_) >> qi::lit (':') >> -(qi::int_);
				RegExp_ = qi::lit ("rx ") >> +qi::char_;

				Start_ = Range_ | Index_ | RegExp_;
			}
		};

		template<typename Iter>
		OpenUrlParams_t ParseCommand (Iter begin, Iter end)
		{
			OpenUrlParams_t res;
			qi::parse (begin, end, Parser<Iter> {}, res);
			return res;
		}

		OpenUrlParams_t ParseCommand (const QString& cmd)
		{
			const auto& unicode = cmd.section (' ', 1).toUtf8 ();
			return ParseCommand (unicode.begin (), unicode.end ());
		}
	}

	bool OpenUrl (const ICoreProxy_ptr& coreProxy, IProxyObject *azothProxy,
			ICLEntry *entry, const QString& text, TaskParameters params)
	{
		const auto& urls = GetAllUrls (azothProxy, entry);

		const auto& split = text.split (' ', QString::SkipEmptyParts).mid (1);

		QList<int> indexes;
		if (split.isEmpty ())
			indexes << urls.size () - 1;
		else if (split.size () == 1 && split.at (0) == "*")
			for (int i = 0; i < urls.size (); ++i)
				indexes << i;

		for (const auto& item : split)
		{
			bool ok = false;
			const auto idx = item.toInt (&ok);
			if (ok)
				indexes << idx - 1;
		}

		const auto iem = coreProxy->GetEntityManager ();
		for (const auto idx : indexes)
		{
			const auto& url = urls.value (idx);
			if (url.isEmpty ())
				continue;

			const auto& entity = Util::MakeEntity (QUrl::fromEncoded (url.toUtf8 ()),
					{}, params | FromUserInitiated);
			iem->HandleEntity (entity);
		}

		return true;
	}
}
}
}
