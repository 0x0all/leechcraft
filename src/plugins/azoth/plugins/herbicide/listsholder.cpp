/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "listsholder.h"
#include <QVariant>
#include <util/sll/functor.h>
#include <interfaces/azoth/iaccount.h>

#if QT_VERSION < 0x050600
uint qHash (const QRegExp& rx)
{
	return qHash (rx.pattern ());
}
#endif

namespace LeechCraft
{
namespace Azoth
{
namespace Herbicide
{
	ListsHolder::ListsHolder (const std::function<QVariant (IAccount*, QByteArray)>& propGetter)
	: PropGetter_ { propGetter }
	{
		ReloadLists (nullptr);
	}

	namespace
	{
		QByteArray GetID (IAccount *acc)
		{
			return acc ?
					acc->GetAccountID () :
					QByteArray {};
		}
	}

	QSet<QRegExp> ListsHolder::GetWhitelist (IAccount *acc)
	{
		return PreloadList (acc).White_;
	}

	QSet<QRegExp> ListsHolder::GetBlacklist (IAccount *acc)
	{
		return PreloadList (acc).Black_;
	}

	namespace
	{
		QSet<QRegExp> GetRegexps (const QVariant& var)
		{
			QSet<QRegExp> result;

			const auto& strings = var.toStringList ();
			for (auto string : strings)
			{
				string = string.trimmed ();
				if (string.isEmpty ())
					continue;
				result << QRegExp (string);
			}

			return result;
		}
	}

	void ListsHolder::ReloadLists (IAccount *acc)
	{
		auto& listInfo = Acc2ListInfo_ [GetID (acc)];

		listInfo.White_ = GetRegexps (PropGetter_ (acc, "WhitelistRegexps"));
		listInfo.Black_ = GetRegexps (PropGetter_ (acc, "BlacklistRegexps"));
	}

	ListsHolder::ListInfo& ListsHolder::PreloadList (IAccount *acc)
	{
		const auto& id = GetID (acc);
		if (!Acc2ListInfo_.contains (id))
			ReloadLists (acc);

		return Acc2ListInfo_ [id];
	}
}
}
}
