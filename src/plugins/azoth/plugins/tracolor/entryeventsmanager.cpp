/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "entryeventsmanager.h"
#include <cmath>
#include <QTimer>
#include <util/sll/qtutil.h>
#include <interfaces/azoth/iclentry.h>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Azoth
{
namespace Tracolor
{
	EntryEventsManager::EntryEventsManager (QObject *parent)
	: QObject { parent }
	{
		auto timer = new QTimer { this };
		timer->start (10000);
		connect (timer,
				SIGNAL (timeout ()),
				this,
				SLOT (decayRates ()));

		XmlSettingsManager::Instance ().RegisterObject ("DecayRate", this, "decayRates");
	}

	void EntryEventsManager::AddEntry (QObject*)
	{
	}

	void EntryEventsManager::RemoveEntry (QObject *entryObj)
	{
		EntryEvents_.remove (qobject_cast<ICLEntry*> (entryObj)->GetEntryID ().toUtf8 ());
	}

	void EntryEventsManager::HandleEvent (const QByteArray& entryId, const QByteArray& eventId)
	{
		EntryEvents_ [entryId] [eventId].DT_ = QDateTime::currentDateTime ();
		emit entryEventRateChanged (entryId);
	}

	double EntryEventsManager::GetEntryEventRate (const QByteArray& entryId, const QByteArray& eventId) const
	{
		const auto& date = EntryEvents_.value (entryId).value (eventId).DT_;
		if (!date.isValid ())
			return 0;

		const auto k = XmlSettingsManager::Instance ().property ("DecayRate").toDouble ();
		const auto diff = date.secsTo (QDateTime::currentDateTime ()) / 60.0;
		return 1 / (k * diff + 1);
	}

	void EntryEventsManager::decayRates ()
	{
		for (const auto& pair : Util::Stlize (EntryEvents_))
			emit entryEventRateChanged (pair.first);
	}
}
}
}
