/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "capsstorageondisk.h"
#include <QDir>
#include <QDataStream>
#include <QSqlError>
#include <QXmppDiscoveryIq.h>
#include <util/sys/paths.h>
#include <util/db/dblock.h>
#include <util/db/util.h>

namespace LeechCraft
{
namespace Azoth
{
namespace Xoox
{
	CapsStorageOnDisk::CapsStorageOnDisk (QObject *parent)
	: QObject { parent }
	{
		DB_.setDatabaseName (Util::CreateIfNotExists ("azoth/xoox").filePath ("caps2.db"));
		if (!DB_.open ())
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot open the database";
			Util::DBLock::DumpError (DB_.lastError ());
			throw std::runtime_error { "Cannot create database" };
		}

		Util::RunTextQuery (DB_, "PRAGMA synchronous = NORMAL;");
		Util::RunTextQuery (DB_, "PRAGMA journal_mode = WAL;");

		InitTables ();
		InitQueries ();
	}

	namespace
	{
		QByteArray SerializeFeatures (const QStringList& features)
		{
			QByteArray result;

			QDataStream str { &result, QIODevice::WriteOnly };
			str << features;

			return result;
		}
	}

	void CapsStorageOnDisk::AddFeatures (const QString& ver, const QStringList& features)
	{
		Util::DBLock lock { DB_ };
		lock.Init ();

		InsertFeature_.bindValue (":ver", ver);
		InsertFeature_.bindValue (":features", SerializeFeatures (features));
		Util::DBLock::Execute (InsertFeature_);

		lock.Good ();
	}

	void CapsStorageOnDisk::AddIdentities (const QString& ver,
			const QList<QXmppDiscoveryIq::Identity>& identities)
	{
		Util::DBLock lock { DB_ };
		lock.Init ();

		for (const auto& id : identities)
		{
			InsertIdentity_.bindValue (":ver", ver);
			InsertIdentity_.bindValue (":category", id.category ());
			InsertIdentity_.bindValue (":language", id.category ());
			InsertIdentity_.bindValue (":name", id.category ());
			InsertIdentity_.bindValue (":type", id.category ());
			Util::DBLock::Execute (InsertIdentity_);
		}

		lock.Good ();
	}

	void CapsStorageOnDisk::InitTables ()
	{
		if (DB_.tables ().contains ("Features"))
			return;

		Util::DBLock lock { DB_ };
		lock.Init ();

		Util::RunQuery (DB_, "azoth/xoox", "create_features");
		Util::RunQuery (DB_, "azoth/xoox", "create_identities");

		lock.Good ();
	}

	void CapsStorageOnDisk::InitQueries ()
	{
		InsertFeature_ = QSqlQuery { DB_ };
		InsertFeature_.prepare (Util::LoadQuery ("azoth/xoox", "insert_feature"));

		InsertIdentity_ = QSqlQuery { DB_ };
		InsertIdentity_.prepare (Util::LoadQuery ("azoth/xoox", "insert_identity"));
	}
}
}
}
