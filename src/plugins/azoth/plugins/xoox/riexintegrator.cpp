/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "riexintegrator.h"
#include "clientconnection.h"
#include "riexintegrator.h"
#include "glooxaccount.h"
#include "xeps/riexmanager.h"

namespace LeechCraft::Azoth::Xoox
{
	RIEXIntegrator::RIEXIntegrator (RIEXManager& mgr, GlooxAccount& acc, QObject *parent)
	: QObject { parent }
	, Mgr_ { mgr }
	, Acc_ { acc }
	{
		connect (&mgr,
				&RIEXManager::gotItems,
				this,
				&RIEXIntegrator::HandleRIEX);
	}

	void RIEXIntegrator::HandleRIEX (const QString& msgFrom, const QList<RIEXItem>& items, const QString& body)
	{
		auto [jid, resource] = ClientConnection::Split (msgFrom);
		if (!items.isEmpty ())
			Acc_.riexItemsSuggested (items, Acc_.GetClientConnection ()->GetCLEntry (jid), body);
	}

	void RIEXIntegrator::SuggestItems (const QList<RIEXItem>& items, QObject *to, const QString& message)
	{
		const auto entry = qobject_cast<EntryBase*> (to);
		if (!entry)
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to cast"
					<< to
					<< "to EntryBase";
			return;
		}

		QList<RIEXItem> add;
		QList<RIEXItem> del;
		QList<RIEXItem> modify;
		for (const auto& item : items)
		{
			switch (item.Action_)
			{
			case RIEXItem::AAdd:
				add << RIEXItem { RIEXItem::AAdd, item.ID_, item.Nick_, item.Groups_ };
				break;
			case RIEXItem::ADelete:
				del << RIEXItem { RIEXItem::ADelete, item.ID_, item.Nick_, item.Groups_ };
				break;
			case RIEXItem::AModify:
				modify << RIEXItem { RIEXItem::AModify, item.ID_, item.Nick_, item.Groups_ };
				break;
			default:
				qWarning () << Q_FUNC_INFO
						<< "unknown action"
						<< item.Action_
						<< "for item"
						<< item.ID_;
				break;
			}
		}

		if (!add.isEmpty ())
			Mgr_.SuggestItems (entry, add, message);
		if (!modify.isEmpty ())
			Mgr_.SuggestItems (entry, modify, message);
		if (!del.isEmpty ())
			Mgr_.SuggestItems (entry, del, message);
	}

}
