/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2011  Alexander Konovalov
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_SECMAN_SECURESTORAGE_CRYPTOSYSTEM_TEST_H
#define PLUGINS_SECMAN_SECURESTORAGE_CRYPTOSYSTEM_TEST_H
#include <QObject>

namespace LC
{
namespace Plugins
{
namespace SecMan
{
namespace StoragePlugins
{
namespace SecureStorage
{

	class CryptoSystemTest : public QObject
	{
		Q_OBJECT
	private slots:
		/** Initialization. */
		void initTestCase ();
		/** Test SHA-256 hash. */
		void testHash ();
		/** Check that ciphertexts (and HMAC's) of same data are different. */
		void testDifferentCipherText ();
		/** Check that we get the original data after encrypting and decrypting. */
		void testEncryptDecrypt ();
		/** 
		 * Check that we get the original data after encrypting and decrypting 
		 * (with random data and length). 
		 */
		void testEncryptDecryptRandom ();
		/** 
		 * Check that we get the original data after encrypting and decrypting
		 * (with different lengthes and random data). 
		 */
		void testEncryptDecryptLength ();
		/**
		 * Check that cryptosystem operates correctly with too short ciphertexts.
		 */
		void testDecryptShortCipherText ();
	};
}
}
}
}
}
#endif
