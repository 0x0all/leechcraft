/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "xwrapper.h"
#include <QString>
#include <X11/Xlib.h>

namespace LeechCraft
{
namespace Krigstask
{
	XWrapper::XWrapper ()
	: Display_ (QX11Info::display ())
	, AppWin_ (QX11Info::appRootWindow ())
	{
	}

	QList<Window> XWrapper::GetWindows ()
	{
		ulong length = 0;
		Window *data = 0;

		QList<Window> result;
		if (GetRootWinProp (GetAtom ("_NET_CLIENT_LIST"), &length, reinterpret_cast<uchar**> (&data)))
			for (ulong i = 0; i < length; ++i)
				result << data [i];
		return result;
	}

	Atom XWrapper::GetAtom (const QString& name)
	{
		if (Atoms_.contains (name))
			return Atoms_ [name];

		auto atom = XInternAtom (Display_, name.toLocal8Bit (), false);
		Atoms_ [name] = atom;
		return atom;
	}

	bool XWrapper::GetWinProp (Window win, Atom property, ulong *length, unsigned char **result, Atom req) const
	{
		int fmt = 0;
		ulong type = 0, rest = 0;
		return XGetWindowProperty (Display_, win,
				property, 0, 1024, false, req, &type,
				&fmt, length, &rest, result) == Success;
	}

	bool XWrapper::GetRootWinProp (Atom property, ulong *length, uchar **result, Atom req) const
	{
		return GetWinProp (AppWin_, property, length, result, req);
	}
}
}
