/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "xwrapper.h"
#include <limits>
#include <type_traits>
#include <QString>
#include <QPixmap>
#include <QIcon>
#include <QAbstractEventDispatcher>
#include <QtDebug>
#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/Xatom.h>

namespace LeechCraft
{
namespace Krigstask
{
	namespace
	{
		bool EventFilter (void *msg)
		{
			return XWrapper::Instance ().Filter (msg);
		}
	}

	XWrapper::XWrapper ()
	: Display_ (QX11Info::display ())
	, AppWin_ (QX11Info::appRootWindow ())
	{
		QAbstractEventDispatcher::instance ()->setEventFilter (&EventFilter);
	}

	XWrapper& XWrapper::Instance ()
	{
		static XWrapper w;
		return w;
	}

	bool XWrapper::Filter (void *msg)
	{
		auto ev = static_cast<XEvent*> (msg);

		if (ev->type == PropertyNotify && ev->xproperty.window == AppWin_)
			HandlePropNotify (&ev->xproperty);

		return false;
	}

	namespace
	{
		template<typename T>
		struct IsDoublePtr : std::false_type {};

		template<typename T>
		struct IsDoublePtr<T**> : std::true_type {};

		template<typename T>
		class Guarded
		{
			T *Data_;
		public:
			Guarded ()
			: Data_ { nullptr }
			{
			}

			~Guarded ()
			{
				if (Data_)
					XFree (Data_);
			}

			T** Get (bool clear = true)
			{
				if (clear && Data_)
					XFree (Data_);
				return &Data_;
			}

			template<typename U>
			U GetAs (bool clear = true)
			{
				if (clear && Data_)
					XFree (Data_);
				return IsDoublePtr<U>::value ?
						reinterpret_cast<U> (&Data_) :
						reinterpret_cast<U> (Data_);
			}

			T operator[] (size_t idx) const
			{
				return Data_ [idx];
			}

			T& operator[] (size_t idx)
			{
				return Data_ [idx];
			}

			operator bool () const
			{
				return Data_ != nullptr;
			}

			bool operator! () const
			{
				return !Data_;
			}
		};
	}

	QList<Window> XWrapper::GetWindows ()
	{
		ulong length = 0;
		Guarded<Window> data;

		QList<Window> result;
		if (GetRootWinProp (GetAtom ("_NET_CLIENT_LIST"), &length, data.GetAs<uchar**> ()))
			for (ulong i = 0; i < length; ++i)
				result << data [i];
		return result;
	}

	QString XWrapper::GetWindowTitle (Window wid)
	{
		QString name;

		ulong length = 0;
		Guarded<uchar> data;

		auto utf8Str = GetAtom ("UTF8_STRING");

		if (GetWinProp (wid, GetAtom ("_NET_WM_VISIBLE_NAME"), &length, data.Get (), utf8Str))
			name = QString::fromUtf8 (data.GetAs<char*> (false));

		if (name.isEmpty ())
			if (GetWinProp (wid, GetAtom ("_NET_WM_NAME"), &length, data.Get (), utf8Str))
				name = QString::fromUtf8 (data.GetAs<char*> (false));

		if (name.isEmpty ())
			if (GetWinProp (wid, GetAtom ("XA_WM_NAME"), &length, data.Get (), XA_STRING))
				name = QString::fromUtf8 (data.GetAs<char*> (false));

		if (name.isEmpty ())
		{
			XFetchName (Display_, wid, data.GetAs<char**> ());
			name = QString (data.GetAs<char*> (false));
		}

		if (name.isEmpty ())
		{
			XTextProperty prop;
			if (XGetWMName (Display_, wid, &prop))
			{
				name = QString::fromUtf8 (reinterpret_cast<char*> (prop.value));
				XFree (prop.value);
			}
		}

		return name;
	}

	QIcon XWrapper::GetWindowIcon (Window wid)
	{
		int fmt = 0;
		ulong type, count, extra;
		Guarded<ulong> data;

		XGetWindowProperty (Display_, wid, GetAtom ("_NET_WM_ICON"),
				0, std::numeric_limits<long>::max (), False, AnyPropertyType,
				&type, &fmt, &count, &extra,
				data.GetAs<uchar**> ());

		if (!data)
			return {};

		QIcon icon;

		auto cur = *data.Get (false);
		auto end = cur + count;
		while (cur < end)
		{
			QImage img (cur [0], cur [1], QImage::Format_ARGB32);
			cur += 2;
			for (int i = 0; i < img.byteCount () / 4; ++i, ++cur)
				reinterpret_cast<uint*> (img.bits ()) [i] = *cur;

			icon.addPixmap (QPixmap::fromImage (img));
		}

		return icon;
	}

	XWrapper::WinStateFlags XWrapper::GetWindowState (Window wid)
	{
		WinStateFlags result;

		ulong length = 0;
		ulong *data = 0;
		if (!GetWinProp (wid, GetAtom ("_NET_WM_STATE"),
				&length, reinterpret_cast<uchar**> (&data), XA_ATOM))
			return result;

		for (auto i = 0; i < length; ++i)
		{
			const auto curAtom = data [i];

			auto set = [this, &curAtom, &result] (const QString& atom, WinStateFlag flag)
			{
				if (curAtom == GetAtom ("_NET_WM_STATE_" + atom))
					result |= flag;
			};

			set ("MODAL", WinStateFlag::Modal);
			set ("STICKY", WinStateFlag::Sticky);
			set ("MAXIMIZED_VERT", WinStateFlag::MaximizedVert);
			set ("MAXIMIZED_HORZ", WinStateFlag::MaximizedHorz);
			set ("SHADED", WinStateFlag::Shaded);
			set ("SKIP_TASKBAR", WinStateFlag::SkipTaskbar);
			set ("SKIP_PAGER", WinStateFlag::SkipPager);
			set ("FULLSCREEN", WinStateFlag::Fullscreen);
			set ("ABOVE", WinStateFlag::OnTop);
			set ("BELOW", WinStateFlag::OnBottom);
			set ("DEMANDS_ATTENTION", WinStateFlag::Attention);
		}

		XFree (data);

		return result;
	}

	bool XWrapper::ShouldShow (Window wid)
	{
		const QList<Atom> ignoreAtoms
		{
			GetAtom ("_NET_WM_WINDOW_TYPE_DESKTOP"),
			GetAtom ("_NET_WM_WINDOW_TYPE_DOCK"),
			GetAtom ("_NET_WM_WINDOW_TYPE_TOOLBAR"),
			GetAtom ("_NET_WM_WINDOW_TYPE_MENU"),
			GetAtom ("_NET_WM_WINDOW_TYPE_SPLASH"),
			GetAtom ("_NET_WM_WINDOW_TYPE_POPUP_MENU")
		};

		for (const auto& type : GetWindowType (wid))
			if (ignoreAtoms.contains (type))
				return false;

		if (GetWindowState (wid) & WinStateFlag::SkipTaskbar)
			return false;

		Window transient = None;
		if (!XGetTransientForHint (Display_, wid, &transient))
			return true;

		if (transient == 0 || transient == wid || transient == AppWin_)
			return true;

		return !GetWindowType (transient).contains (GetAtom ("_NET_WM_WINDOW_TYPE_NORMAL"));
	}

	template<typename T>
	void XWrapper::HandlePropNotify (T ev)
	{
		if (ev->atom == GetAtom ("_NET_CLIENT_LIST"))
			emit windowListChanged ();
		else if (ev->atom == GetAtom ("_NET_ACTIVE_WINDOW"))
			emit activeWindowChanged ();
		else if (ev->atom == GetAtom ("_NET_CURRENT_DESKTOP"))
			emit desktopChanged ();
	}

	Atom XWrapper::GetAtom (const QString& name)
	{
		if (Atoms_.contains (name))
			return Atoms_ [name];

		auto atom = XInternAtom (Display_, name.toLocal8Bit (), false);
		Atoms_ [name] = atom;
		return atom;
	}

	bool XWrapper::GetWinProp (Window win, Atom property,
			ulong *length, unsigned char **result, Atom req) const
	{
		int fmt = 0;
		ulong type = 0, rest = 0;
		return XGetWindowProperty (Display_, win,
				property, 0, 1024, false, req, &type,
				&fmt, length, &rest, result) == Success;
	}

	bool XWrapper::GetRootWinProp (Atom property,
			ulong *length, uchar **result, Atom req) const
	{
		return GetWinProp (AppWin_, property, length, result, req);
	}

	QList<Atom> XWrapper::GetWindowType (Window wid)
	{
		QList<Atom> result;

		ulong length = 0;
		ulong *data = nullptr;

		if (!GetWinProp (wid, GetAtom ("_NET_WM_WINDOW_TYPE"),
				&length, reinterpret_cast<uchar**> (&data)))
			return result;

		for (auto i = 0; i < length; ++i)
			result << data [i];

		XFree (data);
		return result;
	}
}
}
