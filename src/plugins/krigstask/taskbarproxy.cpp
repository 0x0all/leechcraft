/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "taskbarproxy.h"
#include <functional>
#include <QMenu>
#include <QtDebug>
#include <util/x11/xwrapper.h>

typedef std::function<void (QString)> Actor_f;

Q_DECLARE_METATYPE (Actor_f);

namespace LeechCraft
{
namespace Krigstask
{
	TaskbarProxy::TaskbarProxy (ICoreProxy_ptr proxy, QObject *parent)
	: QObject (parent)
	, Proxy_ (proxy)
	{
	}

	void TaskbarProxy::raiseWindow (const QString& widStr)
	{
		Util::XWrapper::Instance ().RaiseWindow (widStr.toULong ());
	}

	void TaskbarProxy::minimizeWindow (const QString& widStr)
	{
		Util::XWrapper::Instance ().MinimizeWindow (widStr.toULong ());
	}

	void TaskbarProxy::toggleShadeWindow (const QString& widStr)
	{
		auto& w = Util::XWrapper::Instance ();

		const auto& wid = widStr.toULong ();
		if (w.GetWindowState (wid) & Util::WinStateFlag::Shaded)
			w.UnshadeWindow (wid);
		else
			w.ShadeWindow (wid);
	}

	void TaskbarProxy::closeWindow (const QString& widStr)
	{
		Util::XWrapper::Instance ().CloseWindow (widStr.toULong ());
	}

	void TaskbarProxy::showMenu (const QString& widStr, int x, int y)
	{
		auto& w = Util::XWrapper::Instance ();

		const auto& wid = widStr.toULong ();

		const auto state = w.GetWindowState (wid);
		const auto actions = w.GetWindowActions (wid);

		auto menu = new QMenu;
		menu->setAttribute (Qt::WA_DeleteOnClose);

		auto minimizeAct = menu->addAction (tr ("Minimize"));
		minimizeAct->setCheckable (true);
		if (state & Util::WinStateFlag::Hidden)
		{
			minimizeAct->setEnabled (true);
			minimizeAct->setChecked (true);
		}
		else
			minimizeAct->setEnabled (actions & Util::AllowedActionFlag::Minimize);
		minimizeAct->setProperty ("Actor",
				QVariant::fromValue<Actor_f> ([this, state] (const QString& wid)
				{
					state & Util::WinStateFlag::Hidden ?
							raiseWindow (wid) :
							minimizeWindow (wid);
				}));

		auto shadeAct = menu->addAction (tr ("Shade"));
		shadeAct->setEnabled (actions & Util::AllowedActionFlag::Shade);
		shadeAct->setCheckable (true);
		shadeAct->setChecked (state & Util::WinStateFlag::Shaded);
		shadeAct->setProperty ("Actor",
				QVariant::fromValue<Actor_f> ([this] (const QString& wid) { toggleShadeWindow (wid); }));

		auto closeAct = menu->addAction (tr ("Close"));
		closeAct->setEnabled (actions & Util::AllowedActionFlag::Close);
		closeAct->setProperty ("Actor",
				QVariant::fromValue<Actor_f> ([this] (const QString& wid) { closeWindow (wid); }));
		closeAct->setIcon (Proxy_->GetIcon ("window-close"));

		for (auto act : menu->actions ())
		{
			act->setProperty ("WID", widStr);
			connect (act,
					SIGNAL (triggered ()),
					this,
					SLOT (handleAction ()));
		}

		menu->popup ({ x, y });
	}

	void TaskbarProxy::handleAction ()
	{
		const auto& widStr = sender ()->property ("WID").toString ();
		sender ()->property ("Actor").value<Actor_f> () (widStr);
	}
}
}
