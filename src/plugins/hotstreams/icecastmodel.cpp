/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2012  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "icecastmodel.h"
#include <QUrl>

namespace LeechCraft
{
namespace HotStreams
{
	bool operator== (const IcecastModel::StationInfo& s1, const IcecastModel::StationInfo& s2)
	{
		return s1.Bitrate_ == s2.Bitrate_ &&
				s1.Name_ == s2.Name_ &&
				s1.Genre_ == s2.Genre_ &&
				s1.MIME_ == s2.MIME_ &&
				s1.URLs_ == s2.URLs_;
	}

	IcecastModel::IcecastModel (QObject *parent)
	: QAbstractItemModel { parent }
	{
	}

	QModelIndex IcecastModel::index (int row, int column, const QModelIndex& parent) const
	{
	}

	QModelIndex IcecastModel::parent (const QModelIndex& child) const
	{
	}

	int IcecastModel::rowCount (const QModelIndex& parent) const
	{
	}

	int IcecastModel::columnCount (const QModelIndex& parent) const
	{
	}

	QVariant IcecastModel::data (const QModelIndex& index, int role) const
	{
	}

	void IcecastModel::SetStations (const StationInfoList_t& stations)
	{
		if (stations == Stations_)
			return;

		const auto prevSize = Stations_.size ();
		if (prevSize)
			beginRemoveRows ({}, 0, prevSize - 1);
		Stations_.clear ();
		if (prevSize)
			endRemoveRows ();

		const auto newSize = stations.size ();
		if (newSize)
			beginInsertRows ({}, 0, newSize - 1);
		Stations_ = stations;
		if (newSize)
			endInsertRows ();
	}
}
}
