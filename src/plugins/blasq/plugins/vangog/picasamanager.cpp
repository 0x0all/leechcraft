/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2013  Oleg Linkin MaledictusDeMagog@gmail.com
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "picasamanager.h"
#include <QNetworkReply>
#include <QNetworkRequest>
#include <QtDebug>
#include <QDomDocument>
#include <qjson/parser.h>
#include <qjson/serializer.h>
#include <boost/concept_check.hpp>
#include "picasaaccount.h"

namespace LeechCraft
{
namespace Blasq
{
namespace Vangog
{
	PicasaManager::PicasaManager (PicasaAccount *account, QObject *parent)
	: QObject (parent)
	, Account_ (account)
	{
	}

	void PicasaManager::UpdateCollections ()
	{
		ApiCallsQueue_ << [this] (const QString& key) { RequestCollections (key); };
		RequestAccessToken ();
	}

	void PicasaManager::RequestAccessToken ()
	{
		QNetworkRequest request (QUrl ("https://accounts.google.com/o/oauth2/token"));
		QString str = QString ("refresh_token=%1&client_id=%2&client_secret=%3&grant_type=%4")
				.arg (Account_->GetRefreshToken ())
				.arg ("844868161425.apps.googleusercontent.com")
				.arg ("l09HkM6nbPMEYcMdcdeGBdaV")
				.arg ("refresh_token");

		request.setHeader (QNetworkRequest::ContentTypeHeader, "application/x-www-form-urlencoded");

		QNetworkReply *reply = Account_->GetProxy ()->
				GetNetworkAccessManager ()->post (request, str.toUtf8 ());

		connect (reply,
				SIGNAL (finished ()),
				this,
				SLOT (handleAuthTokenRequestFinished ()));
	}

	void PicasaManager::ParseError (const QVariantMap& map)
	{

	}

	namespace
	{
		QNetworkRequest CreateRequest (const QUrl& url)
		{
			QNetworkRequest request (url);
			request.setRawHeader ("GData-Version", "2");

			return request;
		}
	}

	void PicasaManager::RequestCollections (const QString& key)
	{
		QString urlStr = QString ("https://picasaweb.google.com/data/feed/api/user/%1?access_token=%2&access=all")
				.arg (Account_->GetLogin ())
				.arg (key);
		QNetworkReply *reply = Account_->GetProxy ()->GetNetworkAccessManager ()->
				get (CreateRequest (QUrl (urlStr)));

		connect (reply,
				SIGNAL (finished ()),
				this,
				SLOT (handleRequestCollectionFinished ()));
	}

	void PicasaManager::handleAuthTokenRequestFinished ()
	{
		QNetworkReply *reply = qobject_cast<QNetworkReply*> (sender ());
		if (!reply)
			return;

		reply->deleteLater ();

		bool ok = false;
		QVariant res = QJson::Parser ().parse (reply->readAll (), &ok);

		if (!ok)
		{
			qWarning () << Q_FUNC_INFO << "parse error";
			return;
		}

		QString accessKey = res.toMap ().value ("access_token").toString ();
		qDebug () << accessKey;
		if (accessKey.isEmpty ())
		{
			qWarning () << Q_FUNC_INFO << "access token is empty";
			return;
		}

		if (ApiCallsQueue_.isEmpty ())
			return;

		ApiCallsQueue_.dequeue () (accessKey);
	}

	namespace
	{
		QByteArray CreateDomDocumentFromReply (QNetworkReply *reply, QDomDocument &document)
		{
			if (!reply)
				return QByteArray ();

			const auto& content = reply->readAll ();
			reply->deleteLater ();
			QString errorMsg;
			int errorLine = -1, errorColumn = -1;
			if (!document.setContent (content, &errorMsg, &errorLine, &errorColumn))
			{
				qWarning () << Q_FUNC_INFO
						<< errorMsg
						<< "in line:"
						<< errorLine
						<< "column:"
						<< errorColumn;
				return QByteArray ();
			}

			return content;
		}
	}

	namespace
	{
		Access PicasaRightsToAccess (const QString& rights)
		{
			if (rights == "protected")
				return Access::Private;
			else
				return Access::Public;
		}

		Author PicasaAuthorToAuthor (const QDomElement& elem)
		{
			Author author;

			const auto& fields = elem.childNodes ();
			for (int i = 0, size = fields.size (); i < size; ++i)
			{
				const auto& field = fields.at (i).toElement ();
				const QString& name = field.tagName ();
				const QString& value = field.text ();
				if (name == "name")
					author.Name_ = value;
				else if (name == "uri")
					author.Image_ = value;
			}

			return author;
		}

		Thumbnail PicasaMediaGroupToThumbnail (const QDomElement& elem)
		{
			Thumbnail thumbnail;
			const auto& fields = elem.childNodes ();
			for (int i = 0, count = fields.size (); i < count; ++i)
			{
				const auto& field = fields.at (i).toElement ();
				const QString& name = field.tagName ();
				if (name == "media:thumbnail")
				{
					thumbnail.Height_ = field.attribute ("height").toInt ();
					thumbnail.Width_ = field.attribute ("width").toInt ();
					thumbnail.Url_ = QUrl (field.attribute ("url"));
					break;
				}
			}

			return thumbnail;
		}

		Album PicasaEntryToAlbum (const QDomElement& elem)
		{
			Album album;

			const auto& fields = elem.childNodes ();
			for (int i = 0, count = fields.size (); i < count; ++i)
			{
				const auto& field = fields.at (i).toElement ();
				const QString& name = field.tagName ();
				const QString& value = field.text ();
				if (name == "published")
					album.Published_ = QDateTime::fromString (value, Qt::ISODate);
				else if (name == "updated")
					album.Updated_ = QDateTime::fromString (value, Qt::ISODate);
				else if (name == "title")
					album.Title_ = value;
				else if (name == "rights")
					album.Access_ = PicasaRightsToAccess (value);
				else if (name == "author")
					album.Author_ = PicasaAuthorToAuthor (field);
				else if (name == "gphoto:numphotos")
					album.NumberOfPhoto_ = value.toInt ();
				else if (name == "gphoto:bytesUsed")
					album.BytesUsed_ = value.toULongLong ();
				else if (name == "media:group")
					//TODO check is it possible to more then one thumbnail
					album.Thumbnails_ << PicasaMediaGroupToThumbnail (field);
			}

			return album;
		}


		QList<Album> ParseAlbums (const QDomDocument& document)
		{
			QList<Album> albums;
			const auto& EntryElements = document.elementsByTagName ("entry");
			if (EntryElements.isEmpty ())
				return albums;

			for (int i = 0, count = EntryElements.count (); i < count; ++i)
				albums << PicasaEntryToAlbum (EntryElements.at (i).toElement ());

			return albums;
		}
	}
	void PicasaManager::handleRequestCollectionFinished ()
	{
		QNetworkReply *reply = qobject_cast<QNetworkReply*> (sender ());
		if (!reply)
			return;

		QDomDocument document;
		QByteArray content;
		content = CreateDomDocumentFromReply (reply, document);
		if (content.isEmpty ())
			return;

		auto albums = ParseAlbums (document);
		emit gotAlbums (albums);
	}

}
}
}
