/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "sessionmenumanager.h"
#include <QMenu>
#include <util/sll/slotclosure.h>

namespace LeechCraft
{
namespace TabSessManager
{
	SessionMenuManager::SessionMenuManager (QObject *parent)
	: QObject { parent }
	, SessMgrMenu_ { new QMenu { tr ("Sessions") } }
	, LoadSession_ { SessMgrMenu_->addMenu (tr ("Load session")) }
	, DeleteSession_ { SessMgrMenu_->addMenu (tr ("Delete session")) }
	{
		SessMgrMenu_->addSeparator ();
		SessMgrMenu_->addAction (tr ("Save current session..."),
				this,
				SIGNAL (saveCustomSessionRequested ()));

		SetMenusEnabled (false);
	}

	QMenu* SessionMenuManager::GetSessionsMenu () const
	{
		return SessMgrMenu_;
	}

	void SessionMenuManager::SetMenusEnabled (bool enable)
	{
		for (const auto menu : { LoadSession_, DeleteSession_ })
			menu->setEnabled (enable);
	}

	void SessionMenuManager::DeleteSession (const QString& name)
	{
		emit deleteRequested (name);

		KnownSessions_.remove (name);

		for (const auto menu : { LoadSession_, DeleteSession_ })
			for (const auto act : menu->actions ())
				if (act->text () == name)
				{
					menu->removeAction (act);
					break;
				}

		if (KnownSessions_.isEmpty ())
			SetMenusEnabled (false);
	}

	void SessionMenuManager::addCustomSession (const QString& name)
	{
		if (KnownSessions_.contains (name))
			return;

		KnownSessions_ << name;

		SetMenusEnabled (true);

		const auto loadAct = LoadSession_->addAction (name);
		new Util::SlotClosure<Util::NoDeletePolicy>
		{
			[this, name] { emit loadRequested (name); },
			loadAct,
			SIGNAL (triggered ()),
			loadAct
		};

		const auto deleteAct = DeleteSession_->addAction (name);
		new Util::SlotClosure<Util::NoDeletePolicy>
		{
			[this, name] { DeleteSession (name); },
			deleteAct,
			SIGNAL (triggered ()),
			deleteAct
		};
	}
}
}
