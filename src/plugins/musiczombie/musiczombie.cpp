/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2012  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "musiczombie.h"
#include <QIcon>
#include <QFuture>
#include <interfaces/core/icoreproxy.h>
#include <util/sll/queuemanager.h>
#include <util/util.h>
#include "pendingdisco.h"

#ifdef WITH_CHROMAPRINT
#include "pendingtagsfetch.h"
#endif

namespace LeechCraft
{
namespace MusicZombie
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		Util::InstallTranslator ("musiczombie");

		Queue_ = new Util::QueueManager (1000);
		AcoustidQueue_ = new Util::QueueManager (1000);

		Proxy_ = proxy;
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.MusicZombie";
	}

	void Plugin::Release ()
	{
		delete Queue_;
	}

	QString Plugin::GetName () const
	{
		return "MusicZombie";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Client for the MusicBrainz.org service.");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}

	QString Plugin::GetServiceName () const
	{
		return "MusicBrainz.org";
	}

	QFuture<Plugin::QueryResult_t> Plugin::GetDiscography (const QString& artist, const QStringList& hints)
	{
		const auto fetcher = new PendingDisco (Queue_, artist, {},
				hints, Proxy_->GetNetworkAccessManager (), this);
		return fetcher->GetFuture ();
	}

	QFuture<Plugin::QueryResult_t> Plugin::GetReleaseInfo (const QString& artist, const QString& release)
	{
		const auto fetcher = new PendingDisco (Queue_, artist, release,
				{ release }, Proxy_->GetNetworkAccessManager (), this);
		return fetcher->GetFuture ();
	}

#ifdef WITH_CHROMAPRINT
	QFuture<Media::AudioInfo> Plugin::FetchTags (const QString& filename)
	{
		auto fetcher = new PendingTagsFetch (AcoustidQueue_, Proxy_->GetNetworkAccessManager (), filename);
		return fetcher->GetFuture ();
	}
#endif
}
}

LC_EXPORT_PLUGIN (leechcraft_musiczombie, LeechCraft::MusicZombie::Plugin);
