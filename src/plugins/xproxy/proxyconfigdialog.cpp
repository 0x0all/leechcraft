/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "proxyconfigdialog.h"
#include "structures.h"

namespace LeechCraft
{
namespace XProxy
{
	ProxyConfigDialog::ProxyConfigDialog (QWidget *parent)
	: QDialog { parent }
	{
		Ui_.setupUi (this);
	}

	Proxy ProxyConfigDialog::GetProxy () const
	{
		auto type = QNetworkProxy::ProxyType::NoProxy;
		switch (Ui_.ProxyType_->currentIndex ())
		{
		case 0:
			type = QNetworkProxy::ProxyType::Socks5Proxy;
			break;
		case 1:
			type = QNetworkProxy::ProxyType::HttpProxy;
			break;
		case 2:
			type = QNetworkProxy::ProxyType::HttpCachingProxy;
			break;
		case 3:
			type = QNetworkProxy::ProxyType::FtpCachingProxy;
			break;
		case 4:
			type = QNetworkProxy::ProxyType::NoProxy;
			break;
		}

		return
		{
			type,
			Ui_.ProxyHost_->text (),
			Ui_.ProxyPort_->value (),
			Ui_.ProxyUser_->text (),
			Ui_.ProxyPassword_->text ()
		};
	}

	void ProxyConfigDialog::SetProxy (const Proxy& proxy)
	{
		Ui_.ProxyHost_->setText (proxy.Host_);
		Ui_.ProxyPort_->setValue (proxy.Port_);
		Ui_.ProxyUser_->setText (proxy.User_);
		Ui_.ProxyPassword_->setText (proxy.Pass_);
		switch (proxy.Type_)
		{
		case QNetworkProxy::ProxyType::Socks5Proxy:
			Ui_.ProxyType_->setCurrentIndex (0);
			break;
		case QNetworkProxy::ProxyType::HttpProxy:
			Ui_.ProxyType_->setCurrentIndex (1);
			break;
		case QNetworkProxy::ProxyType::HttpCachingProxy:
			Ui_.ProxyType_->setCurrentIndex (2);
			break;
		case QNetworkProxy::ProxyType::FtpCachingProxy:
			Ui_.ProxyType_->setCurrentIndex (3);
			break;
		case QNetworkProxy::ProxyType::NoProxy:
			Ui_.ProxyType_->setCurrentIndex (4);
			break;
		default:
			qWarning () << Q_FUNC_INFO
					<< "unknown proxy type"
					<< proxy.Type_;
			break;
		}
	}
}
}
