/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "proxiesconfigwidget.h"
#include <QStandardItemModel>
#include <QSettings>
#include "proxiesstorage.h"

namespace LeechCraft
{
namespace XProxy
{
	namespace
	{
		QString ProxyType2Str (QNetworkProxy::ProxyType type)
		{
			switch (type)
			{
			case QNetworkProxy::ProxyType::Socks5Proxy:
				return "SOCKS5";
				break;
			case QNetworkProxy::ProxyType::HttpProxy:
				return "HTTP";
				break;
			case QNetworkProxy::ProxyType::HttpCachingProxy:
				return ProxiesConfigWidget::tr ("caching HTTP");
				break;
			case QNetworkProxy::ProxyType::FtpCachingProxy:
				return ProxiesConfigWidget::tr ("caching FTP");
				break;
			case QNetworkProxy::ProxyType::NoProxy:
				return ProxiesConfigWidget::tr ("no proxy");
				break;
			default:
				return ProxiesConfigWidget::tr ("other type");
				break;
			}
		}

		QList<QStandardItem*> Proxy2Row (const Proxy& proxy)
		{
			QList<QStandardItem*> row;

			/*
			const auto& req = proxy.first;
			if (req.Protocols_.isEmpty ())
				row << new QStandardItem (ProxiesConfigWidget::tr ("any"));
			else
				row << new QStandardItem (req.Protocols_.join ("; "));
			const QString& targetStr = req.Host_.GetPattern () +
					":" +
					(req.Port_ > 0 ?
							QString::number (req.Port_) :
							ProxiesConfigWidget::tr ("any"));
			row << new QStandardItem (targetStr);
			*/

			row << new QStandardItem (ProxyType2Str (proxy.Type_));
			row << new QStandardItem (proxy.Host_ + ":" + QString::number (proxy.Port_));
			row << new QStandardItem (proxy.User_);

			return row;
		}
	}

	ProxiesConfigWidget::ProxiesConfigWidget (QWidget *parent)
	: QWidget (parent)
	, Model_ (new QStandardItemModel (this))
	{
		Ui_.setupUi (this);
		Ui_.ProxiesList_->setModel (Model_);

		connect (Ui_.ProxiesList_->selectionModel (),
				SIGNAL (currentRowChanged (QModelIndex, QModelIndex)),
				this,
				SLOT (handleItemSelected (QModelIndex)));

		reject ();
	}

	Proxy ProxiesConfigWidget::EntryFromUI () const
	{
		/*
		QString rxPat = Ui_.TargetHost_->text ();
		if (!rxPat.contains ("*") && !rxPat.contains ("^") && !rxPat.contains ("$"))
		{
			rxPat.prepend (".*");
			rxPat.append (".*");
		}

		ReqTarget targ
		{
			{ rxPat, Qt::CaseInsensitive },
			Ui_.TargetPort_->value (),
			Ui_.TargetProto_->text ().split (' ', QString::SkipEmptyParts)
		};
		*/

		auto type = QNetworkProxy::ProxyType::NoProxy;
		switch (Ui_.ProxyType_->currentIndex ())
		{
		case 0:
			type = QNetworkProxy::ProxyType::Socks5Proxy;
			break;
		case 1:
			type = QNetworkProxy::ProxyType::HttpProxy;
			break;
		case 2:
			type = QNetworkProxy::ProxyType::HttpCachingProxy;
			break;
		case 3:
			type = QNetworkProxy::ProxyType::FtpCachingProxy;
			break;
		case 4:
			type = QNetworkProxy::ProxyType::NoProxy;
			break;
		}
		Proxy proxy =
		{
			type,
			Ui_.ProxyHost_->text (),
			Ui_.ProxyPort_->value (),
			Ui_.ProxyUser_->text (),
			Ui_.ProxyPassword_->text ()
		};

		return proxy;
	}

	void ProxiesConfigWidget::accept ()
	{
		SaveSettings ();
	}

	void ProxiesConfigWidget::reject ()
	{
		Model_->clear ();

		const QStringList labels
		{
			tr ("Proxy type"),
			tr ("Proxy target"),
			tr ("User")
		};
		Model_->setHorizontalHeaderLabels (labels);

		LoadSettings ();
	}

	void ProxiesConfigWidget::handleItemSelected (const QModelIndex& idx)
	{
		Ui_.UpdateProxyButton_->setEnabled (idx.isValid ());
		Ui_.RemoveProxyButton_->setEnabled (idx.isValid ());

		const auto& proxy = Proxies_.value (idx.row ());
		/*
		Ui_.TargetHost_->setText (entry.first.Host_.GetPattern ());
		Ui_.TargetPort_->setValue (entry.first.Port_);
		Ui_.TargetProto_->setText (entry.first.Protocols_.join (" "));
		*/

		Ui_.ProxyHost_->setText (proxy.Host_);
		Ui_.ProxyPort_->setValue (proxy.Port_);
		Ui_.ProxyUser_->setText (proxy.User_);
		Ui_.ProxyPassword_->setText (proxy.Pass_);
		switch (proxy.Type_)
		{
		case QNetworkProxy::ProxyType::Socks5Proxy:
			Ui_.ProxyType_->setCurrentIndex (0);
			break;
		case QNetworkProxy::ProxyType::HttpProxy:
			Ui_.ProxyType_->setCurrentIndex (1);
			break;
		case QNetworkProxy::ProxyType::HttpCachingProxy:
			Ui_.ProxyType_->setCurrentIndex (2);
			break;
		case QNetworkProxy::ProxyType::FtpCachingProxy:
			Ui_.ProxyType_->setCurrentIndex (3);
			break;
		case QNetworkProxy::ProxyType::NoProxy:
			Ui_.ProxyType_->setCurrentIndex (4);
			break;
		default:
			qWarning () << Q_FUNC_INFO
					<< "unknown proxy type"
					<< proxy.Type_;
			break;
		}
	}

	void ProxiesConfigWidget::on_AddProxyButton__released ()
	{
		const auto& proxy = EntryFromUI ();
		Proxies_ << proxy;
		Model_->appendRow (Proxy2Row (proxy));
	}

	void ProxiesConfigWidget::on_UpdateProxyButton__released ()
	{
		const int row = Ui_.ProxiesList_->currentIndex ().row ();
		if (row < 0 || row >= Proxies_.size ())
			return;

		const auto& proxy = EntryFromUI ();
		Proxies_ [row] = proxy;
		Model_->removeRow (row);
		Model_->insertRow (row, Proxy2Row (proxy));
	}

	void ProxiesConfigWidget::on_RemoveProxyButton__released ()
	{
		const int row = Ui_.ProxiesList_->currentIndex ().row ();
		if (row < 0 || row >= Proxies_.size ())
			return;

		Proxies_.removeAt (row);
		Model_->removeRow (row);
	}
}
}
