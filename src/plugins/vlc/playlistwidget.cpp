/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2013  Vladislav Tyulbashev
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANusers/vtyulb/TY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include <vlc/vlc.h>
#include <QDragEnterEvent>
#include <QDropEvent>
#include <QVBoxLayout>
#include <QTreeWidget>
#include <QString>
#include "playlistwidget.h"

namespace LeechCraft
{
namespace vlc
{
	PlaylistWidget::PlaylistWidget (QWidget *parent)
	: QWidget (parent)
	{
		setAcceptDrops (true);
		Tree_ = new QTreeWidget;
		QVBoxLayout *layout = new QVBoxLayout;
		layout->addWidget (Tree_);
		setLayout (layout);
		setFixedWidth (200);
		Tree_->show ();
		Tree_->setFocusPolicy (Qt::NoFocus);
		Tree_->setHeaderLabel ("Playlist");
	}
	
	void PlaylistWidget::Init (libvlc_instance_t *instance, libvlc_media_player_t *player)
	{
		Player_ = libvlc_media_list_player_new (instance);
		Instance_ = instance;
		libvlc_media_list_player_set_media_player (Player_, player);
		Playlist_ = libvlc_media_list_new (Instance_);
		libvlc_media_list_player_set_media_list (Player_, Playlist_);
		
	}
	
	void PlaylistWidget::AddUrl (const QUrl& url)
	{
		libvlc_media_t *m = libvlc_media_new_path (Instance_, url.toString ().toUtf8 ());
		Tree_->addTopLevelItem (new QTreeWidgetItem ( { libvlc_media_get_meta (m, libvlc_meta_Title) } ));
		libvlc_media_list_add_media (Playlist_, m);
		libvlc_media_list_player_play (Player_);
		
		SyncOutput ();
	}
	
	bool PlaylistWidget::NowPlaying ()
	{
		return libvlc_media_list_player_is_playing (Player_);
	}
	
	void PlaylistWidget::togglePlay ()
	{
		if (NowPlaying ())
			libvlc_media_list_player_pause (Player_);
		else
			libvlc_media_list_player_play (Player_);
	}
	
	void PlaylistWidget::dragEnterEvent (QDragEnterEvent *event)
	{
		event->accept ();
	}

	void PlaylistWidget::dropEvent (QDropEvent *event)
	{
		QList <QUrl> urls = event->mimeData ()->urls ();
		for (int i = 0; i < urls.size (); i++)
			AddUrl (urls [i]);
	}
	
	void PlaylistWidget::Clear ()
	{
		libvlc_media_list_player_stop (Player_);
		while (libvlc_media_list_count (Playlist_))
			libvlc_media_list_remove_index (Playlist_, 0);
		
		SyncOutput ();
	}
	
	void PlaylistWidget::SyncOutput ()
	{
		Tree_->clear ();
		for (int i = 0; i < libvlc_media_list_count (Playlist_); i++)
			Tree_->addTopLevelItem (new QTreeWidgetItem ( { QString (libvlc_media_get_meta (libvlc_media_list_item_at_index (Playlist_, i), libvlc_meta_Title)) } ));
	}
}
}
