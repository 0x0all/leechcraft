/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2013  Vladislav Tyulbashev
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "vlcplayer.h"
#include <QVBoxLayout>
#include <QPushButton>
#include <QTime>
#include <QMouseEvent>
#include <QWidget>
#include <QTime>
#include <QSizePolicy>

namespace 
{
	QTime convertTime (libvlc_time_t t) 
	{
		return QTime (t / 1000 / 60 / 60, t / 1000 / 60 % 60, t / 1000 % 60, t % 1000);
	}
}

namespace LeechCraft
{
namespace vlc
{
	VlcPlayer::VlcPlayer (QWidget *parent)
	{
		const char * const vlc_args[] = 
		{
			"-I", "dummy", /* Don't use any interface */
			"--ignore-config", /* Don't use VLC's config */
			"--extraintf=logger", //log anything
			"--verbose=0"
		};

		M_ = nullptr;
		VlcInstance_ = libvlc_new (5, vlc_args);
		Mp_ = libvlc_media_player_new (VlcInstance_);
		libvlc_media_player_set_xwindow (Mp_, parent->winId ());
		Parent_ = parent;
	}
	
	VlcPlayer::~VlcPlayer ()
	{
		if (libvlc_media_player_get_media (Mp_))
			libvlc_media_release (libvlc_media_player_get_media (Mp_));
		libvlc_media_player_release (Mp_);
		libvlc_release (VlcInstance_);
	}
	
	void VlcPlayer::addUrl (QString file) 
	{
		libvlc_media_player_stop (Mp_);
		if (M_)
			libvlc_media_release (M_);
		M_ = libvlc_media_new_path (VlcInstance_, file.toLocal8Bit ());
		
		libvlc_media_player_set_media (Mp_, M_);
		libvlc_media_player_play (Mp_);
	}
	
	void VlcPlayer::ClearAll () 
	{	
	}
	
	bool VlcPlayer::NowPlaying ()
	{
		return libvlc_media_player_is_playing (Mp_);
	}
	
	double VlcPlayer::GetPosition () 
	{
		return libvlc_media_player_get_position (Mp_);
	}
	
	void VlcPlayer::togglePlay () 
	{
		if (NowPlaying ())
			libvlc_media_player_pause (Mp_);
		else
			libvlc_media_player_play (Mp_);
	}
	
	void VlcPlayer::stop () 
	{
		libvlc_media_player_stop (Mp_);
	}
	
	void VlcPlayer::changePosition (double pos)
	{
		if (libvlc_media_player_get_media (Mp_))
			libvlc_media_player_set_position (Mp_, pos);
	}	
	
	QTime VlcPlayer::GetFullTime ()
	{
		if (libvlc_media_player_get_media (Mp_))
			return convertTime (libvlc_media_player_get_length (Mp_));
		else
			return convertTime (0);
	}
	
	QTime VlcPlayer::GetCurrentTime () 
	{
		if (libvlc_media_player_get_media (Mp_))
			return convertTime (libvlc_media_player_get_time (Mp_));
		else
			return convertTime (0);
	}
	
	void VlcPlayer::switchWidget (QWidget *widget) 
	{
		libvlc_time_t cur;
		bool playingMedia = libvlc_media_player_get_media (Mp_);
		if (playingMedia)
			cur = libvlc_media_player_get_time (Mp_);
		
		libvlc_media_player_stop (Mp_);
		libvlc_media_player_set_xwindow (Mp_, widget->winId ());
		libvlc_media_player_play (Mp_);
		
		if (playingMedia)
			libvlc_media_player_set_time (Mp_, cur);
	}
	
	QWidget *VlcPlayer::GetParent ()
	{
		return Parent_;
	}
	
	libvlc_media_player_t *VlcPlayer::GetPlayer ()
	{
		return Mp_;
	}
}
}
