/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2013  Vladislav Tyulbashev
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "vlc.h"
#include "vlcwidget.h"
#include "vlcwidgettabclassinfo.h"
#include <QIcon>
#include <QMainWindow>
#include <QDebug>
#include <boost/graph/graph_concepts.hpp>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/core/irootwindowsmanager.h>


namespace LeechCraft
{
namespace vlc
{
	void Plugin::Init (ICoreProxy_ptr proxy)
	{
		Proxy_ = proxy;
		showWindow_ = new QAction(QIcon(), tr("Show test window"), this);
		allActionsThatIKnow_.append(showWindow_);
		connect(showWindow_, SIGNAL(triggered()), this, SLOT(createWindow()));
	}

	void Plugin::SecondInit ()
	{
	}

	QByteArray Plugin::GetUniqueID () const
	{
		return "org.LeechCraft.vlc";
	}

	void Plugin::Release ()
	{
	}

	QString Plugin::GetName () const
	{
		return "vlc";
	}

	QString Plugin::GetInfo () const
	{
		return tr ("Abstract information about vlc");
	}

	QIcon Plugin::GetIcon () const
	{
		return QIcon ();
	}
	
	QList<QAction*> Plugin::GetActions () const
	{
		return allActionsThatIKnow_;
	}
	
	void Plugin::createWindow () {
		qDebug() << "vlc::createWindow";
		//QMessageBox::about(Proxy_->GetRootWindowsManager()->GetMainWindow(0), tr("Hello title"), tr("Hello text"));
	}
	
	void Plugin::TabOpenRequested (const QByteArray& tabClass) {
		qDebug() << "vlc serious message";
		VlcWidget *widget = new VlcWidget;
		emit addNewTab (tr ("Hello, tab"), widget);
		QObject::connect(widget, SIGNAL(deleteMe(QWidget*)), this, SIGNAL(removeTab(QWidget*)));
	}
	
	LeechCraft::TabClasses_t Plugin::GetTabClasses () const {
		TabClasses_t res;
		res.append(VlcWidgetTabClassInfo::getInfo());
		return res;
	}
}
}

LC_EXPORT_PLUGIN (leechcraft_vlc, LeechCraft::vlc::Plugin);
