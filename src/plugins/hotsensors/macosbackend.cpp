/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "macosbackend.h"
#include <QtDebug>
#include <IOKit/IOKitLib.h>

namespace LeechCraft
{
namespace HotSensors
{
	namespace
	{
		class SMC
		{
			bool Valid_ = false;
			io_connect_t Conn_;
		public:
			SMC ();
			~SMC ();

			SMC (const SMC&) = delete;
			SMC& operator= (const SMC&) = delete;

			double GetTemp (const char *key);
		};

		SMC::SMC ()
		{
			mach_port_t masterPort;
			auto result = IOMasterPort (MACH_PORT_NULL, &masterPort);

			if (result != kIOReturnSuccess)
				return;

			auto matchingDict = IOServiceMatching ("AppleSMC");

			io_iterator_t iterator;
			result = IOServiceGetMatchingServices (masterPort, matchingDict, &iterator);
			if (result != kIOReturnSuccess)
			{
				qWarning () << Q_FUNC_INFO
						<< "no matching services:"
						<< result;
				return;
			}

			const auto device = IOIteratorNext (iterator);
			IOObjectRelease (iterator);

			if (!device)
			{
				qWarning () << Q_FUNC_INFO
						<< "no SMC found";
				return;
			}

			result = IOServiceOpen (device, mach_task_self (), 0, &Conn_);
			IOObjectRelease (device);
			if (result != kIOReturnSuccess)
			{
				qWarning () << Q_FUNC_INFO
						<< "cannot open service:"
						<< result;
				return;
			}

			Valid_ = true;
		}

		SMC::~SMC ()
		{
			IOServiceClose (Conn_);
		}

		double SMC::GetTemp (const char *key)
		{
		}
	}

	MacOsBackend::MacOsBackend (QObject *parent)
	: Backend { parent }
	{
	}

	void MacOsBackend::update ()
	{
		SMC smc;
	}
}
}
