/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "recsmanager.h"
#include <QStandardItem>
#include <QTimer>
#include <util/svcauth/vkauthmanager.h>

namespace LeechCraft
{
namespace TouchStreams
{
	RecsManager::RecsManager (boost::optional<qulonglong> uid,
			Util::SvcAuth::VkAuthManager *authMgr,
			Util::QueueManager *queueMgr,
			const ICoreProxy_ptr& proxy,
			QObject *parent)
	: QObject { parent }
	, UID_ { uid }
	, AuthMgr_ { authMgr }
	, QueueMgr_ { queueMgr }
	, Proxy_ { proxy }
	, RootItem_ { new QStandardItem }
	{
		RootItem_->setIcon (QIcon (":/touchstreams/resources/images/vk.svg"));
		RootItem_->setEditable (false);

		AuthMgr_->ManageQueue (&RequestQueue_);

		if (!UID_)
		{
			if (AuthMgr_->HadAuthentication ())
				QTimer::singleShot (1000,
						this,
						SLOT (refetchRecs ()));
			connect (AuthMgr_,
					SIGNAL (justAuthenticated ()),
					this,
					SLOT (refetchRecs ()));
		}
	}

	QStandardItem* RecsManager::GetRootItem () const
	{
		return RootItem_;
	}

	QStandardItem* RecsManager::RefreshItems (const QList<QStandardItem*>& items)
	{
		return RootItem_;
	}
}
}
