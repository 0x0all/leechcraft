/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "tracksrestorehandler.h"
#include <QFuture>
#include <util/sll/functional.h>
#include <util/sll/prelude.h>
#include <util/sll/queuemanager.h>
#include <util/sll/urlaccessor.h>
#include <util/sll/urloperator.h>
#include <util/svcauth/vkauthmanager.h>
#include <util/threads/futures.h>

namespace LeechCraft
{
namespace TouchStreams
{
	namespace
	{
		QPair<QString, QString> ParseID (const QString& urlStr)
		{
			const Util::UrlAccessor acc { QUrl::fromEncoded (urlStr.toLatin1 ()) };
			return { acc ["owner_id"], acc ["audio_id"] };
		}

		QHash<QString, QList<QString>> ToHash (const QList<QPair<QString, QString>>& pairs)
		{
			QHash<QString, QList<QString>> result;
			for (const auto& pair : pairs)
				result [pair.first] << pair.second;
			return result;
		}
	}

	TracksRestoreHandler::TracksRestoreHandler (const QStringList& ids,
			Util::SvcAuth::VkAuthManager *authMgr, Util::QueueManager *queueMgr, QObject *parent)
	: QObject { parent }
	, AuthMgr_ { authMgr }
	, Queue_ { queueMgr }
	, IDs_ { ToHash (Util::Map (ids, ParseID)) }
	{
		Util::Sequence (this, AuthMgr_->GetAuthKeyFuture ()) >>
				Util::BindMemFn (&TracksRestoreHandler::Request, this);
	}

	QFuture<Media::RadiosRestoreResult_t> TracksRestoreHandler::GetFuture () const
	{
		return {};
	}

	void TracksRestoreHandler::Request (const QString& key)
	{
		QUrl url ("https://api.vk.com/method/audio.get");
		Util::UrlOperator { url }
				("access_token", key)
				("count", "6000");
	}
}
}
