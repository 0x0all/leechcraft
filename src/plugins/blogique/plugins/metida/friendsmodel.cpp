/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "friendsmodel.h"
#include <QtDebug>
#include <QMimeData>
#include "frienditemdelegate.h"

namespace LeechCraft
{
namespace Blogique
{
namespace Metida
{
	FriendsModel::FriendsModel (QObject *parent)
	: QStandardItemModel (parent)
	{
	}

	Qt::ItemFlags FriendsModel::flags (const QModelIndex& index) const
	{
		Qt::ItemFlags defFlags = Qt::ItemIsSelectable | Qt::ItemIsEnabled;
		return index.parent ().isValid () ?
			Qt::ItemIsDragEnabled | defFlags:
			Qt::ItemIsDropEnabled | defFlags;
	}

	Qt::DropActions FriendsModel::supportedDropActions () const
	{
		return Qt::MoveAction;
	}

	QStringList FriendsModel::mimeTypes () const
	{
		return { "application/lj.friend" };
	}

	QMimeData* FriendsModel::mimeData (const QModelIndexList& indexes) const
	{
		QMimeData *mimeData = new QMimeData ();
		QByteArray encodedData;

		QDataStream stream (&encodedData, QIODevice::WriteOnly);

		Q_FOREACH (const QModelIndex& index, indexes)
			if (index.isValid ())
				stream << data (index).toString ()
						<< data (index, ItemColorRoles::BackgroundColor).toString ()
						<< data (index, ItemColorRoles::ForegroundColor).toString ()
						<< index.parent ().data (ItemGroupRoles::GroupId).toInt ();

		mimeData->setData ("application/lj.friend", encodedData);
		return mimeData;
	}

	bool FriendsModel::dropMimeData (const QMimeData *mime,
			Qt::DropAction action, int, int, const QModelIndex& parent)
	{
		if (action == Qt::IgnoreAction)
			return true;

		int newGrp = parent.isValid () ?
			parent.data (ItemGroupRoles::GroupId).toInt () :
			-1;

		QDataStream stream (mime->data ("application/lj.friend"));
		QString name, bgColor, fgColor;
		int id = -1;
		stream >> name
				>> bgColor
				>> fgColor
				>> id;

		if (newGrp == id)
			return false;

		emit userGroupChanged (name, bgColor, fgColor, newGrp);
		return true;
	}

}
}
}

