/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "updatetypedialog.h"
#include <QDateTime>
#include <QStackedWidget>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Blogique
{
namespace Metida
{
	UpdateTypeDialog::UpdateTypeDialog (LoadType lt, QWidget *parent)
	: QDialog (parent)
	, LT_ (lt)
	{
		Ui_.setupUi (this);

		switch (LT_)
		{
		case LoadType::LoadLastEvents:
			Ui_.UpdatesWidgetStack_->setCurrentIndex (LoadLastEvents);
			Ui_.EntriesCount_->setValue (XmlSettingsManager::Instance ()
					.Property ("LoadEntriesToView", 20).toInt ());
			break;
		case LoadType::LoadChangesEvents:
			Ui_.UpdatesWidgetStack_->setCurrentIndex (LoadChangesEvents);
			Ui_.DateEdit_->setDateTime (XmlSettingsManager::Instance ()
					.Property ("ChangedDateToView",
						QDateTime::fromString ("01.01.1980 00:00", "dd.MM.yyyy hh:mm"))
							.toDateTime ());
			break;
		};
	}

	int UpdateTypeDialog::GetCount () const
	{
		return  Ui_.EntriesCount_->value ();
	}

	QDateTime UpdateTypeDialog::GetDateTime () const
	{
		return  Ui_.DateEdit_->dateTime ();
	}

	void UpdateTypeDialog::accept ()
	{
		switch (LT_)
		{
		case LoadType::LoadLastEvents:
			XmlSettingsManager::Instance ()
					.setProperty ("LoadEntriesToView", Ui_.EntriesCount_->value ());
			XmlSettingsManager::Instance ()
					.setProperty ("LoadLastAsk", !Ui_.UpdateAsk_->isChecked ());
			break;
		case LoadType::LoadChangesEvents:
			XmlSettingsManager::Instance ()
					.setProperty ("ChangedDateToView", QDateTime::currentDateTime ());
			XmlSettingsManager::Instance ()
					.setProperty ("LoadChangedAsk", !Ui_.UpdateAsk_->isChecked ());
			break;
		};
		QDialog::accept ();
	}

}
}
}
