/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2013  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QWidget>
#include "interfaces/blogique/iaccount.h"
#include "ui_blogentrieswidget.h"

class QStandardItemModel;
class QStandardItem;

namespace LC
{
namespace Blogique
{
	class EntriesFilterProxyModel;

	class BlogEntriesWidget : public QWidget
	{
		Q_OBJECT

		Ui::BlogEntriesWidget Ui_;
		IAccount *Account_;
		QStandardItemModel *BlogEntriesModel_;
		EntriesFilterProxyModel *FilterProxyModel_;
		QHash<QStandardItem*, Entry> Item2Entry_;
		QList<QAction*> LoadActions_;

	public:
		explicit BlogEntriesWidget (QWidget *parent = 0, Qt::WindowFlags f = 0);
		QString GetName () const;
		void SetAccount (IAccount *account);
	private:
		Entry GetEntry (const QModelIndex& index = QModelIndex ());
		void FillCurrentTab (const QModelIndex& index = QModelIndex ());

	public slots:
		void clear ();
	private slots:
		void fillView (const QList<Entry>& entries);
		void fillStatistic (const QMap<QDate, int>& statistics);
		void saveSplitterPosition (int pos, int index);
		void loadPostsByDate (const QDate& date);
		void handleOpenBlogEntryInCurrentTab (const QModelIndex& index = QModelIndex ());
		void handleOpenBlogEntryInNewTab (const QModelIndex& index = QModelIndex ());
		void on_BlogEntriesFilter__textChanged (const QString& text);
		void on_RemoveBlogEntry__released ();
		void on_BlogEntriesView__doubleClicked (const QModelIndex& index);
		void handleCalendarVisibilityChanged (bool visible);

	signals:
		void fillCurrentWidgetWithBlogEntry (const Entry& e);
		void fillNewWidgetWithBlogEntry (const Entry& e, const QByteArray& accId);

		void entryAboutToBeRemoved ();
		void entriesListUpdated ();
	};
}
}
