/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "udevbackend.h"
#include <QSocketNotifier>
#include <libudev.h>

namespace LeechCraft
{
namespace Devmon
{
	UDevBackend::UDevBackend (ICoreProxy_ptr proxy, QObject *parent)
	: QObject (parent)
	, Proxy_ (proxy)
	, UDev_ (udev_new (), udev_unref)
	, Mon_ (udev_monitor_new_from_netlink (UDev_.get (), "udev"), udev_monitor_unref)
	{
		udev_set_userdata (UDev_.get (), this);

		udev_monitor_filter_add_match_subsystem_devtype (Mon_.get (), "usb", "usb_device");
		udev_monitor_enable_receiving (Mon_.get ());

		Notifier_ = new QSocketNotifier (udev_monitor_get_fd (Mon_.get ()),
				QSocketNotifier::Read, this);
		connect (Notifier_,
				SIGNAL (activated (int)),
				this,
				SLOT (handleSocket (int)));
	}

	void UDevBackend::handleSocket (int fd)
	{
		Notifier_->setEnabled (false);
		const auto device = udev_monitor_receive_device (Mon_.get ());
		Notifier_->setEnabled (true);
	}
}
}
