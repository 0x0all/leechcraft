/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QStringList>
#include <QtPlugin>

namespace LC
{
namespace Monocle
{
	/** @brief Interface for backend plugins providing default extensions
	 * for their relevant file types.
	 *
	 * This interface is used by Monocle core to know which file types
	 * with which extensions can be handled. It may then, for example,
	 * provide separate filters for each of the document types in a file
	 * open dialog.
	 *
	 * For example, a PDF backend plugin may know that PDF documents
	 * typically has \em .pdf extension.
	 */
	class IKnowFileExtensions
	{
	protected:
		virtual ~IKnowFileExtensions () {}
	public:
		/** @brief Describes a single typical file type.
		 *
		 * A single file type may have multiple typical extensions in the
		 * wild, thus it contains a list of extensions in the Extensions_
		 * field.
		 */
		struct ExtInfo
		{
			/** @brief Human-readable description.
			 *
			 * For example, "DjVu files".
			 */
			QString Description_;

			/** @brief Typically used extensions for the file type.
			 *
			 * For example, for DjVu format this will have \em djvu and
			 * \em djvu extensions.
			 */
			QList<QString> Extensions_;
		};

		/** @brief Returns the list of supported typical file extensions.
		 *
		 * @return The list of ExtInfo objects.
		 */
		virtual QList<ExtInfo> GetKnownFileExtensions () const = 0;
	};
}
}

Q_DECLARE_INTERFACE (LC::Monocle::IKnowFileExtensions,
		"org.LeechCraft.Monocle.IKnowFileExtensions/1.0")
