/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "filewatcher.h"
#include <QTimer>
#include <QFileInfo>
#include <QDir>
#include <QtDebug>
#include "documenttab.h"

namespace LeechCraft
{
namespace Monocle
{
	FileWatcher::FileWatcher (DocumentTab *tab)
	: QObject (tab)
	, Tab_ (tab)
	{
		connect (tab,
				SIGNAL (fileLoaded (QString)),
				this,
				SLOT (setWatched (QString)));

		connect (&Watcher_,
				SIGNAL (directoryChanged (QString)),
				this,
				SLOT (checkReload ()));
		connect (&Watcher_,
				SIGNAL (fileChanged (QString)),
				this,
				SLOT (checkReload ()));

		connect (&ReloadTimer_,
				&QTimer::timeout,
				this,
				&FileWatcher::doReload);
		ReloadTimer_.setSingleShot (true);
		ReloadTimer_.setInterval (750);
	}

	namespace
	{
		auto MakeIdentity (const QString& path)
		{
			const QFileInfo fi { path };
			return FileWatcher::FileIdentity_t { fi.size (), fi.lastModified () };
		}
	}

	void FileWatcher::checkReload ()
	{
		const auto& newIdentity = MakeIdentity (CurrentFile_);
		if (LastIdentity_ == newIdentity)
			return;

		LastIdentity_ = newIdentity;

		ReloadTimer_.start ();
	}

	void FileWatcher::doReload ()
	{
		Tab_->ReloadDoc (CurrentFile_);
	}

	void FileWatcher::setWatched (const QString& file)
	{
		if (CurrentFile_ == file)
			return;

		CurrentFile_ = file;

		const auto& existing = Watcher_.directories () + Watcher_.files ();
		if (!existing.isEmpty ())
			Watcher_.removePaths (existing);

		Watcher_.addPath (file);
		Watcher_.addPath (QFileInfo { file }.dir ().path ());

		LastIdentity_ = MakeIdentity (CurrentFile_);
	}
}
}
