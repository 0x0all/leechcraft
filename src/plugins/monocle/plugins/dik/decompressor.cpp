/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "decompressor.h"
#include <QByteArray>
#include <QtDebug>
#include "mobiparser.h"

namespace LeechCraft
{
namespace Monocle
{
namespace Dik
{
	class NullDecompressor : public Decompressor
	{
	public:
		QByteArray operator() (const QByteArray& data)
		{
			return data;
		}
	};

	namespace
	{
		const static uchar TokenCode [256] =
		{
			0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
		};
	}

	class RLEDecompressor : public Decompressor
	{
	public:
		QByteArray operator() (const QByteArray&);
	};

	QByteArray RLEDecompressor::operator() (const QByteArray& data)
	{
		QByteArray result;

		const int maxIndex = data.size () - 1;

		for (int i = 0; i < data.size (); )
		{
			bool end = false;
			const uchar token = data.at (i++);
			switch (TokenCode [token])
			{
			case 0:
				result.append (token);
				break;
			case 1:
				if (i + token > maxIndex)
				{
					end = true;
					break;
				}
				result.append (data.mid (i, token));
				i += token;
				break;
			case 2:
				result.append (' ');
				result.append (token ^ 0x80);
				break;
			case 3:
			{
				if (i + 1 > maxIndex)
				{
					end = true;
					break;
				}

				uint16_t n = token;
				n <<= 8;
				n += static_cast<uchar> (data.at (i++));

				const uint16_t copyLength = (n & 7) + 3;
				const uint16_t shift = (n & 0x3fff) / 8;
				const auto shifted = result.size () - shift;
				if (shifted > result.size () - 1)
				{
					end = true;
					break;
				}

				for (uint16_t j = 0; j < copyLength; ++j)
					result.append (result.at (shifted + j));
			}
			}

			if (end)
				break;
		}

		return result;
	}

	Decompressor::~Decompressor ()
	{
	}

	Decompressor_ptr Decompressor::Create (Type type, MobiParser *p)
	{
		switch (type)
		{
		case Type::None:
			return Decompressor_ptr (new NullDecompressor);
		case Type::RLE:
			return Decompressor_ptr (new RLEDecompressor);
		}

		qWarning () << Q_FUNC_INFO
				<< "unknown decompressor type";
		return {};
	}
}
}
}
