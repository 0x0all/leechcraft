/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "redirector.h"
#include <QTimer>
#include <QProcess>
#include <QTemporaryFile>
#include <QtDebug>
#include <QDir>

namespace LC
{
namespace Monocle
{
namespace Postrus
{
	Redirector::Redirector (const QString& src)
	: Source_ { src }
	, Process_ { new QProcess { this } }
	{
		QTimer::singleShot (0,
				this,
				&Redirector::StartConverting);
	}

	QObject* Redirector::GetQObject ()
	{
		return this;
	}

	QString Redirector::GetRedirectSource () const
	{
		return Source_;
	}

	QString Redirector::GetRedirectTarget () const
	{
		return {};
	}

	QString Redirector::GetRedirectedMime () const
	{
		return "application/pdf";
	}

	void Redirector::StartConverting ()
	{
		{
			QTemporaryFile file { QDir::tempPath () + "/lc_monocle_postrus.XXXXXX.pdf" };
			file.open ();
			Target_ = file.fileName ();
		}

		qDebug () << Q_FUNC_INFO
				<< Source_
				<< Target_;
		Process_->start ("ps2pdf", { "-dPDFSETTINGS=/prepress", "-dEmbedAllFonts=true", "-dSubsetFonts=false", "-r600", Source_, Target_ });
		connect (Process_,
				qOverload<int, QProcess::ExitStatus> (&QProcess::finished),
				this,
				&Redirector::HandleFinished);
	}

	void Redirector::HandleFinished ()
	{
		qDebug () << Q_FUNC_INFO
				<< Process_->exitStatus ()
				<< Process_->exitCode ();
		if (Process_->exitCode ())
			qWarning () << Q_FUNC_INFO
					<< Process_->readAllStandardError ();

		emit ready (Target_);
	}
}
}
}
