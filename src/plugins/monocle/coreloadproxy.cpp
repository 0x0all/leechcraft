/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "coreloadproxy.h"
#include <QTimer>
#include <QUrl>
#include <QtDebug>
#include "interfaces/monocle/iredirectproxy.h"
#include "core.h"

namespace LeechCraft
{
namespace Monocle
{
	CoreLoadProxy::CoreLoadProxy (const IDocument_ptr& doc)
	: SourcePath_ { doc->GetDocURL ().toLocalFile () }
	, Doc_ { doc }
	{
		QTimer::singleShot (0,
				this,
				SLOT (emitReady ()));
	}

	CoreLoadProxy::CoreLoadProxy (const IRedirectProxy_ptr& proxy)
	: SourcePath_ { proxy->GetRedirectSource () }
	, Proxy_ { proxy }
	{
		connect (proxy->GetQObject (),
				SIGNAL (ready (QString)),
				this,
				SLOT (handleRedirected (QString)));
	}

	IDocument_ptr CoreLoadProxy::GetDocument () const
	{
		return Doc_;
	}

	void CoreLoadProxy::handleRedirected (const QString& target)
	{
		auto subProxy = Core::Instance ().LoadDocument (target);
		if (!subProxy)
			emit ready (Doc_, SourcePath_);

		connect (subProxy,
				SIGNAL (ready (IDocument_ptr, QString)),
				this,
				SLOT (handleSubproxy (IDocument_ptr, QString)));
	}

	void CoreLoadProxy::handleSubproxy (const IDocument_ptr& doc, const QString& path)
	{
		qDebug () << Q_FUNC_INFO;
		if (!doc)
			qWarning () << Q_FUNC_INFO
					<< "redirection failed from"
					<< SourcePath_
					<< "to"
					<< path;

		Doc_ = doc;

		emitReady ();
	}

	void CoreLoadProxy::emitReady ()
	{
		emit ready (Doc_, SourcePath_);
		deleteLater ();
	}
}
}
