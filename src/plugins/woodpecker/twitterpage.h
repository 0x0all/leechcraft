/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2013  Slava Barinov <rayslava@gmail.com>
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QWidget>
#include <QScrollBar>
#include <QTimer>
#include <QMenu>
#include <QAction>

#include <interfaces/ihavetabs.h>
#include <interfaces/structures.h>

#include "twitterinterface.h"
#include "twitdelegate.h"

#include "ui_twitterpage.h"

namespace Ui {
	class TwitterPage;
}

namespace LeechCraft
{
namespace Woodpecker
{	
	class TwitterPage 
		: public QWidget, public ITabWidget
	{
			Q_OBJECT
			Q_INTERFACES (ITabWidget)
			

			const TabClassInfo TC_;
			QObject * const ParentPlugin_;
			
		private:
			volatile bool m_update_ready;	/**< The flag is checked by timer for UI update */
			QTimer *m_ui_update_timer;		/**< Timer checks m_update_ready and updates the UI */
			TwitDelegate *m_delegate;
			Ui::TwitterPage *ui;
			twitterInterface *interface;
			QTimer *m_twitter_timer;		/**< This timer sends network requests to get new twits */
			QSettings *settings;
			QList<std::shared_ptr<Tweet>> screenTwits;
			
			QToolBar *Toolbar_;
			QMenu *DoctypeMenu_;
			QMenu *RecentFilesMenu_;
			QString Filename_;
			bool Modified_;
			QMap<QString, QList<QAction*> > WindowMenus_;
			QHash<QString, QString> Extension2Lang_;

			QtMsgHandler DefaultMsgHandler_;
			QObject *WrappedObject_;
			bool TemporaryDocument_;

			QAction *actionRetwit_;
			QAction *actionReply_;
			QAction *actionSPAM_;
			QAction *actionOpenWeb_;

		public:
			explicit TwitterPage (const TabClassInfo&, QObject*);
			~TwitterPage();

			void Remove ();
			QToolBar* GetToolBar () const;
			QObject* ParentMultiTabs ();
			QList<QAction*> GetTabBarContextMenuActions () const;
			QMap<QString, QList<QAction*> > GetWindowMenus () const;
			TabClassInfo GetTabClassInfo () const;

		private slots:
			void on_TwitList__customContextMenuRequested (const QPoint&);
			void updateTweetList_ ();

		public slots:
			void tryToLogin();
			void requestUserTimeline (QString username);
			void updateScreenTwits (QList<std::shared_ptr<Tweet>> twits);
			void recvdAuth (QString token, QString tokenSecret);
			void twit();
			void retwit();
			void reply();
			void reply(QListWidgetItem*);
			void reportSpam();
			void sendReply();
			void webOpen();
			void scrolledDown(int sliderPos);
			void setUpdateReady();

		signals:
			void removeTab (QWidget*);
			void changeTabName (QWidget*, const QString&);
			void changeTabIcon (QWidget*, const QIcon&);
			void changeTooltip (QWidget*, QWidget*);
			void statusBarChanged (QWidget*, const QString&);
			void couldHandle (const LeechCraft::Entity&, bool*);
			void delegateEntity (const LeechCraft::Entity&,
					int*, QObject**);
			void gotEntity (const LeechCraft::Entity&);

	};
}
}

// kate: indent-mode cstyle; indent-width 4; replace-tabs off; tab-width 4;
