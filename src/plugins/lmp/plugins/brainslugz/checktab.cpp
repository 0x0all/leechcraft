/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "checktab.h"
#include <QStandardItemModel>
#include <QToolBar>
#include <QDeclarativeContext>
#include <QDeclarativeEngine>
#include <QSortFilterProxyModel>
#include <util/sys/paths.h>
#include <util/qml/colorthemeproxy.h>
#include <util/qml/themeimageprovider.h>
#include <interfaces/lmp/ilmpproxy.h>
#include <interfaces/lmp/ilocalcollection.h>
#include "checkmodel.h"
#include "checker.h"

namespace LeechCraft
{
namespace LMP
{
namespace BrainSlugz
{
	namespace
	{
		class MissingModel : public QSortFilterProxyModel
		{
		public:
			MissingModel (QAbstractItemModel *source, QObject *parent)
			: QSortFilterProxyModel { parent }
			{
				setSourceModel (source);
				setDynamicSortFilter (true);
			}
		protected:
			bool filterAcceptsRow (int row, const QModelIndex&) const
			{
				const auto& idx = sourceModel ()->index (row, 0);
				return idx.data (CheckModel::MissingCount).toInt ();
			}
		};
	}

	CheckTab::CheckTab (const ILMPProxy_ptr& lmpProxy,
			const ICoreProxy_ptr& coreProxy,
			const TabClassInfo& tc,
			QObject* plugin)
	: LmpProxy_ { lmpProxy }
	, CoreProxy_ { coreProxy }
	, TC_ (tc)
	, Plugin_ { plugin }
	, Toolbar_ { new QToolBar { this } }
	, Model_ { new CheckModel { lmpProxy->GetLocalCollection ()->GetAllArtists (), coreProxy, this } }
	, CheckedModel_ { new MissingModel { Model_, this } }
	{
		Ui_.setupUi (this);

		for (const auto& cand : Util::GetPathCandidates (Util::SysPath::QML, ""))
			Ui_.CheckView_->engine ()->addImportPath (cand);
		Ui_.CheckView_->engine ()->addImageProvider ("ThemeIcons",
				new Util::ThemeImageProvider { coreProxy });

		const auto root = Ui_.CheckView_->rootContext ();
		root->setContextProperty ("colorProxy",
				new Util::ColorThemeProxy { coreProxy->GetColorThemeManager (), this });
		root->setContextProperty ("artistsModel", Model_);
		root->setContextProperty ("checkedModel", CheckedModel_);
		root->setContextProperty ("checkingState", "");

		const auto& filename = Util::GetSysPath (Util::SysPath::QML, "lmp/brainslugz", "CheckView.qml");
		Ui_.CheckView_->setSource (QUrl::fromLocalFile (filename));

		SetupToolbar ();
	}

	TabClassInfo CheckTab::GetTabClassInfo () const
	{
		return TC_;
	}

	QObject* CheckTab::ParentMultiTabs ()
	{
		return Plugin_;
	}

	void CheckTab::Remove ()
	{
		emit removeTab (this);
		deleteLater ();
	}

	QToolBar* CheckTab::GetToolBar () const
	{
		return Toolbar_;
	}

	void CheckTab::SetupToolbar ()
	{
		const auto startAction = Toolbar_->addAction (tr ("Start"));
		startAction->setProperty ("ActionIcon", "system-run");
		connect (startAction,
				SIGNAL (triggered ()),
				this,
				SLOT (handleStart ()));
	}

	void CheckTab::handleStart ()
	{
		QList<Media::ReleaseInfo::Type> types;

		auto check = [&types] (QCheckBox *box, Media::ReleaseInfo::Type type)
		{
			if (box->checkState () == Qt::Checked)
				types << type;
		};
		check (Ui_.Album_, Media::ReleaseInfo::Type::Standard);
		check (Ui_.EP_, Media::ReleaseInfo::Type::EP);
		check (Ui_.Single_, Media::ReleaseInfo::Type::Single);

		Model_->RemoveUnscheduled ();

		new Checker { Model_, types, LmpProxy_, CoreProxy_, this };

		Ui_.CheckView_->rootContext ()->setContextProperty ("checkingState", "checking");
	}
}
}
}
