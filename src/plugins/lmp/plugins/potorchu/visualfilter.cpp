/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "visualfilter.h"
#include <QtDebug>
#include <QWidget>
#include <gst/gst.h>
#include <gst/interfaces/xoverlay.h>
#include <util/lmp/gstutil.h>

namespace LeechCraft
{
namespace LMP
{
namespace Potorchu
{
	namespace
	{
		void EnumerateVisualizers ()
		{
			const auto list = gst_registry_feature_filter (gst_registry_get_default (),
					[] (GstPluginFeature *feature, gpointer) -> gboolean
					{
						if (!GST_IS_ELEMENT_FACTORY (feature))
							return false;

						const auto factory = GST_ELEMENT_FACTORY (feature);
						const auto klass = gst_element_factory_get_klass (factory);
						return g_strrstr (klass, "Visualization") != nullptr;
					},
					false,
					nullptr);

			for (auto item = list; item; item = g_list_next (item))
			{
				const auto factory = GST_ELEMENT_FACTORY (item->data);
				qDebug () << gst_element_factory_get_longname (factory);
			}

			gst_plugin_feature_list_free (list);
		}
	}

	VisualFilter::VisualFilter (const QByteArray& effectId)
	: EffectId_ { effectId }
	, Elem_ { gst_bin_new ("visualbin") }
	, Tee_ { gst_element_factory_make ("tee", nullptr) }
	, TeeTemplate_ { gst_element_class_get_pad_template (GST_ELEMENT_GET_CLASS (Tee_), "src%d") }
	, AudioQueue_ { gst_element_factory_make ("queue", nullptr) }
	, VisQueue_ { gst_element_factory_make ("queue", nullptr) }
	, Visualizer_ { gst_element_factory_make ("synaescope", nullptr) }
	, XSink_ { gst_element_factory_make ("ximagesink", nullptr) }
	{
		const auto convIn = gst_element_factory_make ("audioconvert", nullptr);

		gst_bin_add_many (GST_BIN (Elem_), Tee_, AudioQueue_, VisQueue_, convIn, Visualizer_, XSink_, nullptr);

		TeeAudioPad_ = gst_element_request_pad (Tee_, TeeTemplate_, nullptr, nullptr);
		auto audioPad = gst_element_get_static_pad (AudioQueue_, "sink");
		gst_pad_link (TeeAudioPad_, audioPad);
		gst_object_unref (audioPad);

		gst_element_link_many (VisQueue_, convIn, Visualizer_, XSink_, nullptr);

		auto win = new QWidget;
		win->resize (800, 600);
		win->show ();

		gst_x_overlay_set_window_handle (GST_X_OVERLAY (XSink_), win->winId ());

		GstUtil::AddGhostPad (Tee_, Elem_, "sink");
		GstUtil::AddGhostPad (AudioQueue_, Elem_, "src");

		auto teeVisPad = gst_element_request_pad (Tee_, TeeTemplate_, nullptr, nullptr);
		auto streamPad = gst_element_get_static_pad (VisQueue_, "sink");
		gst_pad_link (teeVisPad, streamPad);
		gst_object_unref (streamPad);
	}

	QByteArray VisualFilter::GetEffectId () const
	{
		return EffectId_;
	}

	QByteArray VisualFilter::GetInstanceId () const
	{
		return EffectId_;
	}

	IFilterConfigurator* VisualFilter::GetConfigurator () const
	{
		return nullptr;
	}

	GstElement* VisualFilter::GetElement () const
	{
		return Elem_;
	}
}
}
}
