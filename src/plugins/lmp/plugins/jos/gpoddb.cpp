/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "gpoddb.h"
#include <QDir>
#include <QFutureWatcher>
#include <QtConcurrentRun>
#include <QtDebug>
#include <gpod/itdb.h>

namespace LeechCraft
{
namespace LMP
{
namespace jOS
{
	GpodDb::GpodDb (const QString& path, QObject *parent)
	: QObject (parent)
	{
		qDebug () << Q_FUNC_INFO;

		auto watcher = new QFutureWatcher<QPair<decltype (DB_), QString>> (this);
		connect (watcher,
				SIGNAL (finished ()),
				this,
				SLOT (handleLoadFinished ()));
		watcher->setFuture (QtConcurrent::run ([path] () -> QPair<decltype (DB_), QString>
				{
					GError *gerr = nullptr;
					const auto db = itdb_parse (QDir::toNativeSeparators (path).toUtf8 ().constData (), &gerr);

					if (db)
						return { db, {} };

					QString text;
					if (gerr)
					{
						text = tr ("Error loading iTunes database: %1.")
								.arg (gerr->message);
						g_error_free (gerr);
					}
					else
						text = tr ("Error loading iTunes database.");

					return { db, text };
				}));
	}

	GpodDb::~GpodDb ()
	{
		itdb_free (DB_);
	}

	void GpodDb::handleLoadFinished ()
	{
		auto watcher = dynamic_cast<QFutureWatcher<QPair<decltype (DB_), QString>>*> (sender ());
		const auto& result = watcher->result ();
		watcher->deleteLater ();

		if (!result.second.isEmpty ())
			emit error (result.second);
		else
		{
			DB_ = result.first;
			emit loaded ();
		}
	}
}
}
}
