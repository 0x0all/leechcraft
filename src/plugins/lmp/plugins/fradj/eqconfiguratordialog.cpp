/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "eqconfiguratordialog.h"
#include <QtDebug>
#include "eqbandwidget.h"

namespace LeechCraft
{
namespace LMP
{
namespace Fradj
{
	EqConfiguratorDialog::EqConfiguratorDialog (const BandInfos_t& bands,
			const QList<double>& gains, const QStringList& presets, QWidget *parent)
	: QDialog { parent }
	{
		Ui_.setupUi (this);
		Ui_.Preset_->addItems (presets);
		Ui_.Preset_->setCurrentIndex (-1);

		for (const auto& bandInfo : bands)
		{
			auto band = new EqBandWidget { bandInfo };
			Ui_.BandsLayout_->addWidget (band);
			Bands_ << band;
		}

		SetGains (gains);
	}

	QList<double> EqConfiguratorDialog::GetGains () const
	{
		QList<double> result;
		for (auto widget : Bands_)
			result << widget->GetGain ();
		return result;
	}

	void EqConfiguratorDialog::SetGains (const QList<double>& gains)
	{
		if (gains.size () != Bands_.size ())
		{
			qWarning () << Q_FUNC_INFO
					<< "gains count"
					<< gains.size ()
					<< "doesn't equal to bands count"
					<< Bands_.size ();
			return;
		}

		for (int i = 0; i < gains.size (); ++i)
			Bands_.at (i)->SetGain (gains.at (i));
	}

	void EqConfiguratorDialog::on_Preset__currentIndexChanged (const QString& preset)
	{
		emit presetRequested (this, preset);
	}
}
}
}
