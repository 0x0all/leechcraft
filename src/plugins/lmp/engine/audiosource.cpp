/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "audiosource.h"

namespace LeechCraft
{
namespace LMP
{
	AudioSource::AudioSource ()
	{
	}

	AudioSource::AudioSource (const QString& filename)
	: AudioSource_ (filename)
	{
	}

	AudioSource::AudioSource (const QUrl& url)
	: AudioSource_ (url)
	{
	}

	AudioSource::AudioSource (const AudioSource& source)
	: AudioSource_ (source.AudioSource_)
	{
	}

	AudioSource& AudioSource::operator= (const AudioSource& source)
	{
		AudioSource_ = source.AudioSource_;
		return *this;
	}

	bool AudioSource::operator== (const AudioSource& source) const
	{
		return AudioSource_ == source.AudioSource_;
	}

	bool AudioSource::operator!= (const AudioSource& source) const
	{
		return !(*this == source);
	}

	QUrl AudioSource::ToUrl () const
	{
		return AudioSource_.type () == Phonon::MediaSource::LocalFile ?
				QUrl::fromLocalFile (AudioSource_.fileName ()) :
				AudioSource_.url ();
	}

	bool AudioSource::IsLocalFile () const
	{
		return AudioSource_.type () == Phonon::MediaSource::LocalFile;
	}

	QString AudioSource::GetLocalPath () const
	{
		return AudioSource_.fileName ();
	}

	bool AudioSource::IsRemote () const
	{
		if (IsEmpty ())
			return false;

		switch (AudioSource_.type ())
		{
		case Phonon::MediaSource::Url:
			return AudioSource_.url ().scheme () != "file";
		case Phonon::MediaSource::Stream:
			return true;
		default:
			return false;
		}
	}

	bool AudioSource::IsEmpty () const
	{
		return AudioSource_.type () == Phonon::MediaSource::Empty ||
				AudioSource_.type () == Phonon::MediaSource::Invalid;
	}

	AudioSource::Type AudioSource::GetType () const
	{
		switch (AudioSource_.type ())
		{
		case Phonon::MediaSource::LocalFile:
			return Type::File;
		case Phonon::MediaSource::Url:
			return Type::Url;
		case Phonon::MediaSource::Stream:
			return Type::Stream;
		default:
			return Type::Empty;
		}
	}

	const Phonon::MediaSource& AudioSource::ToPhonon () const
	{
		return AudioSource_;
	}

	AudioSource AudioSource::FromPhonon (const Phonon::MediaSource& source)
	{
		AudioSource s;
		s.AudioSource_ = source;
		return s;
	}

	uint qHash (const AudioSource& source)
	{
		const auto& src = source.ToPhonon ();

		uint hash = 0;
		switch (src.type ())
		{
		case Phonon::MediaSource::LocalFile:
			hash = qHash (src.fileName ());
			break;
		case Phonon::MediaSource::Url:
			hash = qHash (src.url ());
			break;
		case Phonon::MediaSource::Disc:
			hash = src.discType ();
			break;
		case Phonon::MediaSource::Stream:
			hash = qHash (src.deviceName ());
			break;
		default:
			hash = 0;
			break;
		}
		return hash << src.type ();
	}
}
}
