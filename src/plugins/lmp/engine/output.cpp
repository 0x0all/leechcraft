/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "output.h"
#include "path.h"
#include <gst/gst.h>

namespace LeechCraft
{
namespace LMP
{
	Output::Output (QObject *parent)
	: QObject (parent)
	, Bin_ (gst_bin_new ("audio_sink_bin"))
	, Equalizer_ (gst_element_factory_make ("equalizer-3bands", "equalizer"))
	, Converter_ (gst_element_factory_make ("audioconvert", "convert"))
	, Sink_ (gst_element_factory_make ("autoaudiosink", "audio_sink"))
	{
		gst_bin_add_many (GST_BIN (Bin_), Equalizer_, Converter_, Sink_, nullptr);
		gst_element_link_many (Equalizer_, Converter_, Sink_, nullptr);

		auto pad = gst_element_get_static_pad (Equalizer_, "sink");
		auto ghostPad = gst_ghost_pad_new ("sink", pad);
		gst_pad_set_active (ghostPad, TRUE);
		gst_element_add_pad (Bin_, ghostPad);
		gst_object_unref (pad);
		/*
		connect (Output_,
				SIGNAL (volumeChanged (qreal)),
				this,
				SIGNAL (volumeChanged (qreal)));
		connect (Output_,
				SIGNAL (volumeChanged (qreal)),
				this,
				SLOT (handlePhononVolumeChanged (qreal)));

		connect (Output_,
				SIGNAL (mutedChanged (bool)),
				this,
				SIGNAL (mutedChanged (bool)));
				*/
	}

	void Output::AddToPath (Path *path)
	{
		path->SetAudioBin (Bin_);
	}

	void Output::PostAdd (Path*)
	{
	}

	double Output::GetVolume () const
	{
// 		return Output_->volume ();
	}

	bool Output::IsMuted () const
	{
// 		return Output_->isMuted ();
	}

	void Output::setVolume (double volume)
	{
// 		Output_->setVolume (volume);
	}

	void Output::setVolume (int volume)
	{
// 		setVolume (volume / 100.);
	}

	void Output::toggleMuted ()
	{
// 		Output_->setMuted (!Output_->isMuted ());
// 		emit mutedChanged (Output_->isMuted ());
	}

	void Output::handlePhononVolumeChanged (qreal volume)
	{
// 		emit volumeChanged (static_cast<int> (volume * 100));
	}
}
}
