/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QObject>
#include <QImage>
#include <interfaces/media/idiscographyprovider.h>
#include <interfaces/core/icoreproxyfwd.h>

#if QT_VERSION < 0x050000
class QDeclarativeView;
#else
class QQuickWidget;
#endif

class QStandardItemModel;
class QStandardItem;

namespace Media
{
	class IArtistBioFetcher;
	class IAlbumArtProvider;
	struct AlbumInfo;
}

namespace LeechCraft
{
namespace LMP
{
	class BioPropProxy;

	class BioViewManager : public QObject
	{
		Q_OBJECT

#if QT_VERSION < 0x050000
		QDeclarativeView * const View_;
#else
		QQuickWidget * const View_;
#endif

		QString CurrentArtist_;

		BioPropProxy *BioPropProxy_;
		QStandardItemModel *DiscoModel_;
		QList<QList<Media::ReleaseTrackInfo>> Album2Tracks_;
	public:
#if QT_VERSION < 0x050000
		BioViewManager (const ICoreProxy_ptr&, QDeclarativeView*, QObject* = nullptr);
#else
		BioViewManager (const ICoreProxy_ptr&, QQuickWidget*, QObject* = nullptr);
#endif

		void InitWithSource ();
		void Request (Media::IArtistBioFetcher*, const QString&);
	private:
		QStandardItem* FindAlbumItem (const QString&) const;

		bool QueryReleaseImageLocal (const Media::AlbumInfo&) const;
		void QueryReleaseImage (Media::IAlbumArtProvider*, const Media::AlbumInfo&);
		void SetAlbumImage (const QString&, const QUrl&) const;
	private slots:
		void handleBioReady ();
		void handleDiscographyReady ();

		void handleAlbumPreviewRequested (int);
	signals:
		void gotArtistImage (const QString&, const QUrl&);
	};
}
}
