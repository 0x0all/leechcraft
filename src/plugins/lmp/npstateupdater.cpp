/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "npstateupdater.h"
#include <QLabel>
#include <util/xpc/util.h>
#include <interfaces/core/ientitymanager.h>
#include "player.h"
#include "engine/sourceobject.h"
#include "xmlsettingsmanager.h"
#include "core.h"
#include "nowplayingwidget.h"
#include "util.h"

namespace LeechCraft
{
namespace LMP
{
	NPStateUpdater::NPStateUpdater (QLabel *label,
			NowPlayingWidget *npWidget, Player *player, QObject* parent)
	: QObject { parent }
	, NPLabel_ { label }
	, NPWidget_ { npWidget }
	, Player_ { player }
	{
		connect (Player_,
				SIGNAL (songChanged (MediaInfo)),
				this,
				SLOT (update (MediaInfo)));
		connect (Player_,
				SIGNAL (songInfoUpdated (MediaInfo)),
				this,
				SLOT (update (MediaInfo)));
		connect (Player_->GetSourceObject (),
				SIGNAL (stateChanged (SourceState, SourceState)),
				this,
				SLOT (update ()));
	}

	void NPStateUpdater::AddPixmapHandler (const PixmapHandler_f& handler)
	{
		PixmapHandlers_ << handler;
	}

	QString NPStateUpdater::BuildNotificationText (const MediaInfo& info) const
	{
		if (Player_->GetState () == SourceState::Stopped)
			return tr ("Playback is stopped.");

		const auto& title = info.Title_.isEmpty () ? tr ("unknown song") : info.Title_;
		const auto& album = info.Album_.isEmpty () ? tr ("unknown album") : info.Album_;
		const auto& track = info.Artist_.isEmpty () ? tr ("unknown artist") : info.Artist_;

		return tr ("Now playing: %1 from %2 by %3")
				.arg ("<em>" + title + "</em>")
				.arg ("<em>" + album + "</em>")
				.arg ("<em>" + track + "</em>");
	}

	void NPStateUpdater::EmitNotification (const QString& text, QPixmap notifyPx) const
	{
		int width = notifyPx.width ();
		if (width > 200)
		{
			while (width > 200)
				width /= 2;
			notifyPx = notifyPx.scaledToWidth (width);
		}

		auto e = Util::MakeNotification ("LMP", text, PInfo_);
		e.Additional_ ["NotificationPixmap"] = notifyPx;
		Core::Instance ().GetProxy ()->GetEntityManager ()->HandleEntity (e);
	}

	namespace
	{
		struct PixmapInfo
		{
			QPixmap PX_;
			QString CoverPath_;
		};

		PixmapInfo GetPixmap (const MediaInfo& info)
		{
			PixmapInfo pi;

			pi.CoverPath_ = FindAlbumArtPath (info.LocalPath_);
			if (!pi.CoverPath_.isEmpty ())
				pi.PX_ = QPixmap (pi.CoverPath_);

			if (pi.PX_.isNull ())
			{
				pi.PX_ = QIcon::fromTheme ("media-optical").pixmap (128, 128);
				pi.CoverPath_.clear ();
			}

			return pi;
		}
	}

	void NPStateUpdater::Update (MediaInfo info) const
	{
		if (Player_->GetState () == SourceState::Stopped)
			info = MediaInfo {};

		const auto& pxInfo = GetPixmap (info);

		const auto& text = BuildNotificationText (info);
		NPLabel_->setText (text);

		NPWidget_->SetTrackInfo (info);

		for (const auto& pxHandler : PixmapHandlers_)
			pxHandler (info, pxInfo.CoverPath_, pxInfo.PX_);

		if (!text.isEmpty () &&
				XmlSettingsManager::Instance ().property ("EnableNotifications").toBool ())
			EmitNotification (text, pxInfo.PX_);
	}

	void NPStateUpdater::emitNotification () const
	{
		EmitNotification (BuildNotificationText (Player_->GetCurrentMediaInfo ()), {});
	}

	void NPStateUpdater::update () const
	{
		Update (Player_->GetCurrentMediaInfo ());
	}

	void NPStateUpdater::update (const MediaInfo& info) const
	{
		if (Player_->GetState () == SourceState::Stopped ||
				info.IsUseless ())
			return;

		Update (info);
	}
}
}
