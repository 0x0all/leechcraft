/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include <type_traits>
#include <boost/fusion/sequence/intrinsic/at.hpp>
#include <boost/fusion/include/at.hpp>
#include <QSqlQuery>

namespace LeechCraft
{
namespace Poleemery
{
namespace oral
{
	template<typename T>
	struct ObjectInfo
	{
		QSqlQuery SelectAll_;
		std::function<QList<T> (QSqlQuery)> DoSelectAll_;
		QSqlQuery InsertOne_;
		std::function<void (QSqlQuery&, T)> DoPrepareInsert_;
		QString CreateTable_;
	};

	template<typename T>
	struct PKey
	{
		typedef T value_type;

		T Val_;

		PKey& operator= (const value_type& val)
		{
			Val_ = val;
			return *this;
		}

		operator value_type () const
		{
			return Val_;
		}
	};

	template<typename T>
	struct IsPKey : std::false_type {};

	template<typename U>
	struct IsPKey<PKey<U>> : std::true_type {};

	template<typename Seq, int Idx>
	struct References
	{
		typedef typename std::decay<typename boost::fusion::result_of::at_c<Seq, Idx>::type>::type member_type;
		static_assert (IsPKey<member_type>::value, "References<> element must refer to a PKey<> element");

		typedef typename member_type::value_type value_type;
		value_type Val_;

		References& operator= (const value_type& val)
		{
			Val_ = val;
			return *this;
		}

		operator value_type () const
		{
			return Val_;
		}
	};
}
}
}
