/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "accountstab.h"
#include <QStandardItemModel>
#include "storage.h"
#include "accountpropsdialog.h"

namespace LeechCraft
{
namespace Poleemery
{
	AccountsTab::AccountsTab (Storage_ptr storage, const TabClassInfo& tc, QObject *plugin)
	: Storage_ (storage)
	, TC_ (tc)
	, ParentPlugin_ (plugin)
	, AccsModel_ (new QStandardItemModel (this))
	{
		AccsModel_->setHorizontalHeaderLabels ({ tr ("Account"), tr ("Type") });

		Ui_.setupUi (this);
		Ui_.AccountsView_->setModel (AccsModel_);

		for (const auto& acc : Storage_->GetAccounts ())
			AddAccount (acc);
	}

	TabClassInfo AccountsTab::GetTabClassInfo () const
	{
		return TC_;
	}

	QObject* AccountsTab::ParentMultiTabs ()
	{
		return ParentPlugin_;
	}

	void AccountsTab::Remove ()
	{
		emit removeTab (this);
		deleteLater ();
	}

	QToolBar* AccountsTab::GetToolBar () const
	{
		return 0;
	}

	void AccountsTab::AddAccount (const Account& acc)
	{
		QList<QStandardItem*> row
		{
			new QStandardItem (acc.Name_),
			new QStandardItem (ToHumanReadable (acc.Type_))
		};
		for (auto item : row)
			item->setEditable (false);
		AccsModel_->appendRow (row);
	}

	void AccountsTab::on_Add__released ()
	{
		AccountPropsDialog dia (this);
		if (dia.exec () != QDialog::Accepted)
			return;

		auto acc = dia.GetAccount ();
		Storage_->AddAccount (acc);
	}

	void AccountsTab::on_Modify__released ()
	{
	}

	void AccountsTab::on_Remove__released ()
	{
	}
}
}
