/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "currenciesmanager.h"
#include <QLocale>
#include <QSet>
#include <QStandardItemModel>
#include "xmlsettingsmanager.h"

namespace LeechCraft
{
namespace Poleemery
{
	CurrenciesManager::CurrenciesManager (QObject *parent)
	: QObject (parent)
	, Model_ (new QStandardItemModel (this))
	{
		Model_->setHorizontalHeaderLabels ({ tr ("Code"), tr ("Name") });
		connect (Model_,
				SIGNAL (itemChanged (QStandardItem*)),
				this,
				SLOT (handleItemChanged (QStandardItem*)));
		Enabled_ = XmlSettingsManager::Instance ().property ("EnabledLocales").toStringList ();
		if (Enabled_.isEmpty ())
		{
			Enabled_ << "USD";
			Enabled_ << QLocale::system ().currencySymbol (QLocale::CurrencyIsoCode);
		}
		Enabled_.sort ();

		struct CurInfo
		{
			QString Code_;
			QString Name_;
		};
		QSet<QString> knownCodes;
		QList<CurInfo> currencies;
		for (auto language = 2; language < 214; ++language)
			for (auto country = 0; country < 247; ++country)
			{
				const QLocale loc (static_cast<QLocale::Language> (language),
						static_cast<QLocale::Country> (country));

				const auto& code = loc.currencySymbol (QLocale::CurrencyIsoCode);
				if (code.isEmpty ())
					continue;

				if (knownCodes.contains (code))
					continue;

				knownCodes << code;
				currencies.push_back ({ code, loc.currencySymbol (QLocale::CurrencyDisplayName) });
			}

		std::sort (currencies.begin (), currencies.end (),
				[] (const CurInfo& l, const CurInfo& r) { return l.Code_ < r.Code_; });

		for (const auto& cur : currencies)
		{
			Currencies_ << cur.Code_;

			QList<QStandardItem*> row { new QStandardItem (cur.Code_), new QStandardItem (cur.Name_) };
			for (auto item : row)
				item->setEditable (false);

			if (cur.Code_ != "USD")
				row.first ()->setCheckState (Enabled_.contains (cur.Code_) ? Qt::Checked : Qt::Unchecked);

			Model_->appendRow (row);
		}
	}

	const QStringList& CurrenciesManager::GetEnabledCurrencies () const
	{
		return Enabled_;
	}

	QAbstractItemModel* CurrenciesManager::GetSettingsModel () const
	{
		return Model_;
	}

	void CurrenciesManager::handleItemChanged (QStandardItem *item)
	{
		if (item->column ())
			return;

		const auto& code = item->text ();
		if (item->checkState () == Qt::Unchecked)
			Enabled_.removeAll (code);
		else if (!Enabled_.contains (code))
		{
			Enabled_ << code;
			Enabled_.sort ();
		}

		XmlSettingsManager::Instance ().setProperty ("EnabledLocales", Enabled_);
	}
}
}
