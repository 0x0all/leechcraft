/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <boost/fusion/include/for_each.hpp>
#include <boost/fusion/include/fold.hpp>
#include <QStringList>
#include <QDateTime>
#include "oraltypes.h"

namespace LeechCraft
{
namespace Poleemery
{
namespace oral
{
	template<typename T1, typename T2, template<typename U> class Container, typename F>
	auto ZipWith (const Container<T1>& c1, const Container<T2>& c2, F f) -> Container<decltype (f (T1 (), T2 ()))>
	{
		Container<decltype (f (T1 (), T2 ()))> result;
		for (auto i1 = std::begin (c1), e1 = std::end (c1),
					i2 = std::begin (c2), e2 = std::end (c2);
				i1 != e1 && i2 != e2; ++i1, ++i2)
			result.push_back (f (*i1, *i2));
		return result;
	}

	template<typename T, template<typename U> class Container, typename F>
	auto Map (const Container<T>& c, F f) -> Container<decltype (f (T ()))>
	{
		Container<decltype (f (T ()))> result;
		for (auto t : c)
			result.push_back (f (t));
		return result;
	}

	template<typename S, typename N>
	struct GetFieldsNames_
	{
		QStringList operator() () const
		{
			const QString thisName { boost::fusion::extension::struct_member_name<S, N::value>::call () };
			return QStringList { thisName } + GetFieldsNames_<S, typename boost::mpl::next<N>::type> {} ();
		}
	};

	template<typename S>
	struct GetFieldsNames_<S, typename boost::fusion::result_of::size<S>::type>
	{
		QStringList operator() () const
		{
			return {};
		}
	};

	template<typename S>
	struct GetFieldsNames : GetFieldsNames_<S, boost::mpl::int_<0>>
	{
	};

	template<typename T>
	QString Type2Name ();

	template<>
	QString Type2Name<int> ()
	{
		return "INTEGER";
	}

	template<>
	QString Type2Name<QString> ()
	{
		return "TEXT";
	}

	struct Types
	{
		typedef QStringList result_type;

		template<typename T>
		QStringList operator() (const QStringList& init, const T&) const
		{
			return init + QStringList { Type2Name<T> () };
		}
	};

	template<typename T>
	QVariant ToVariant (const T& t)
	{
		return t;
	}

	struct Inserter
	{
		typedef QStringList result_type;

		QSqlQuery& Q_;

		template<typename T>
		QStringList operator() (QStringList bounds, const T& t) const
		{
			Q_.bindValue (bounds.takeFirst (), ToVariant<T> (t));
			return bounds;
		}
	};

	template<typename T>
	T FromVariant (const QVariant& v)
	{
		return v.value<T> ();
	}

	struct Selector
	{
		typedef int result_type;

		const QSqlQuery& Q_;

		template<typename T>
		int operator() (int index, T& t) const
		{
			t = FromVariant<T> (Q_.value (index));
			return index + 1;
		}
	};

	template<typename T>
	ObjectInfo<T> Adapt (const QString& table, const QSqlDatabase& db)
	{
		const QList<QString> fields = GetFieldsNames<T> {} ();
		const auto boundFields = Map (fields, [] (const QString& str) { return ':' + str; });

		const auto& insert = "INSERT INTO " + table +
				" (" + QStringList { fields }.join (", ") + ") VALUES (" +
				QStringList { boundFields }.join (", ") + ");";
		QSqlQuery insertQuery (db);
		insertQuery.prepare (insert);

		auto prepareInsert = [boundFields] (QSqlQuery& q, const T& t)
		{
			boost::fusion::fold (t, boundFields, Inserter { q });
		};

		const auto& selectAll = "SELECT " + QStringList { fields }.join (", ") + " FROM " + table;
		QSqlQuery selectQuery (db);
		selectQuery.prepare (selectAll);

		auto doSelect = [] (QSqlQuery q) -> QList<T>
		{
			if (!q.exec ())
			{
				Util::DBLock::DumpError (q);
				throw std::runtime_error ("Fetch query execution failed");
			}

			QList<T> result;
			while (q.next ())
			{
				T t;
				boost::fusion::fold (t, 0, Selector { q });
				result << t;
			}
			return result;
		};

		const QList<QString> types = boost::fusion::fold (T {}, QStringList {}, Types {});

		auto statements = ZipWith (types, fields,
				[] (const QString& type, const QString& field) { return field + " " + type; });
		statements.push_front ("Id INTEGER PRIMARY KEY");
		const auto& createTable = "CREATE TABLE " + table +  " (" + QStringList { statements }.join (", ") + ");";

		return { selectQuery, doSelect, insertQuery, prepareInsert, createTable };
	}
}
}
}
