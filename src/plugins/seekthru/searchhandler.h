/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QAbstractItemModel>
#include <QUrl>
#include <interfaces/ifinder.h>
#include <interfaces/structures.h>
#include "description.h"

class QToolBar;
class QAction;

class IEntityManager;

namespace LeechCraft
{
namespace Util
{
	class SelectableBrowser;
};

namespace SeekThru
{
	class SearchHandler : public QAbstractItemModel
	{
		Q_OBJECT

		static const QString OS_;

		Description D_;

		IEntityManager * const IEM_;

		QString SearchString_;
		struct Result
		{
			enum Type
			{
				TypeRSS,
				TypeAtom,
				TypeHTML
			} Type_ = TypeHTML;

			int TotalResults_ = 0;
			int StartIndex_ = 0;
			int ItemsPerPage_ = 0;
			QString Response_;
			QUrl RequestURL_;
		};

		QList<Result> Results_;
		QMap<int, Result> Jobs_;
		std::shared_ptr<Util::SelectableBrowser> Viewer_;
		std::shared_ptr<QToolBar> Toolbar_;
		std::shared_ptr<QAction> Action_;
	public:
		SearchHandler (const Description&, IEntityManager*);

		int columnCount (const QModelIndex& = QModelIndex ()) const override;
		QVariant data (const QModelIndex&, int = Qt::DisplayRole) const override;
		Qt::ItemFlags flags (const QModelIndex&) const override;
		QVariant headerData (int, Qt::Orientation, int = Qt::DisplayRole) const override;
		QModelIndex index (int, int, const QModelIndex& = QModelIndex()) const override;
		QModelIndex parent (const QModelIndex&) const override;
		int rowCount (const QModelIndex& = QModelIndex ()) const override;

		void Start (const Request&);
	private:
		void HandleJobFinished (Result, const QString&);
	private slots:
		void subscribe ();
	signals:
		void error (const QString&);
		void warning (const QString&);
	};

	typedef std::shared_ptr<SearchHandler> SearchHandler_ptr;
}
}
