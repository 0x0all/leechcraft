/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "compparamsmanager.h"
#include <QStandardItemModel>
#include <QCoreApplication>
#include <QSettings>

namespace LeechCraft
{
namespace Fenet
{
	CompParamsManager::CompParamsManager (QObject *parent)
	: QObject (parent)
	, ParamsModel_ (new QStandardItemModel (this))
	{
		ParamsModel_->setHorizontalHeaderLabels ({ tr ("Option"), tr ("Value"), tr ("Flag") });
	}

	QAbstractItemModel* CompParamsManager::GetModel () const
	{
		return ParamsModel_;
	}

	void CompParamsManager::SetCompInfo (const CompInfo& info)
	{
		if (auto rc = ParamsModel_->rowCount ())
			ParamsModel_->removeRows (0, rc);

		CurrentInfo_ = info;
		auto settings = GetCurrentSettings ();

		for (const auto& param : CurrentInfo_.Params_)
		{
			auto descItem = new QStandardItem (param.Desc_);
			descItem->setEditable (false);

			const auto value = settings->value (param.Name_, param.Default_).toDouble ();
			const auto valueItem = new QStandardItem (QString::number (value));
			valueItem->setData (QVariant::fromValue (param), Role::Description);

			auto nameItem = new QStandardItem (param.Name_);

			ParamsModel_->appendRow ({ descItem, valueItem, nameItem });
		}
	}

	std::shared_ptr<QSettings> CompParamsManager::GetCurrentSettings () const
	{
		auto settings = new QSettings (QCoreApplication::organizationName (),
				QCoreApplication::applicationName () + "_Fenet");
		settings->beginGroup ("Compositors");
		settings->beginGroup (CurrentInfo_.Name_);

		return std::shared_ptr<QSettings> (settings,
				[] (QSettings *settings)
				{
					settings->endGroup ();
					settings->endGroup ();
					delete settings;
				});
	}

	void CompParamsManager::save ()
	{
	}

	void CompParamsManager::revert ()
	{
	}
}
}
