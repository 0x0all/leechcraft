/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "wmfinder.h"
#include <QDir>
#include <QStandardItemModel>
#include <QtDebug>
#include <qjson/parser.h>
#include <util/sys/paths.h>

namespace LeechCraft
{
namespace Fenet
{
	WMFinder::WMFinder (QObject *parent)
	: QObject (parent)
	, Path_ (QString (qgetenv ("PATH")).split (":", QString::SkipEmptyParts))
	, FoundModel_ (new QStandardItemModel (this))
	{
		qDebug () << Q_FUNC_INFO << "searching for WMs...";

		const auto& cands = Util::GetPathCandidates (Util::SysPath::Share, "fenet/wms");
		for (const auto& cand : cands)
			for (const auto& entry : QDir (cand).entryInfoList ({ "*.json" }))
				HandleDescr (entry.absoluteFilePath ());

		qDebug () << Known_.size () << "known WMs;"
				<< Found_.size () << "found WMs";
	}

	const WMInfos_t& WMFinder::GetFound () const
	{
		return Found_;
	}

	QAbstractItemModel* WMFinder::GetFoundModel () const
	{
		return FoundModel_;
	}

	void WMFinder::HandleDescr (const QString& filePath)
	{
		QJson::Parser parser;

		QFile file (filePath);
		if (!file.open (QIODevice::ReadOnly))
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot open file"
					<< file.fileName ()
					<< file.errorString ();
			return;
		}

		bool ok = false;
		const auto& varmap = parser.parse (&file, &ok).toMap ();
		if (!ok)
		{
			qWarning () << Q_FUNC_INFO
					<< "cannot parse file"
					<< file.fileName ();
			return;
		}

		QStringList execNames;
		for (const auto& var : varmap ["execNames"].toList ())
			execNames << var.toString ();

		QString session = filePath;
		session.chop (5);
		session += ".sh";
		WMInfo info
		{
			varmap ["name"].toString (),
			varmap ["comment"].toString (),
			execNames,
			session
		};
		Known_ << info;

		if (std::any_of (execNames.begin (), execNames.end (),
				[this] (const QString& name) { return IsAvailable (name); }))
		{
			qDebug () << info.Name_ << "available";
			Found_ << info;

			auto item = new QStandardItem (info.Name_);
			item->setEditable (false);
			item->setToolTip (info.Comment_);
			FoundModel_->appendRow (item);
		}
	}

	bool WMFinder::IsAvailable (const QString& executable) const
	{
		if (QFileInfo (executable).isExecutable ())
			return true;

		for (const auto& dir : Path_)
			if (QFileInfo (dir + '/' + executable).isExecutable ())
				return true;

		return false;
	}
}
}
