/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QCoreApplication>

class QAction;
class QWidget;
class QMenu;

namespace LC
{
namespace Util
{
	class ShortcutManager;
}

namespace Aggregator
{
	struct AppWideActions
	{
		QAction *ActionAddFeed_ = nullptr;
		QAction *ActionUpdateFeeds_ = nullptr;
		QAction *ActionImportOPML_ = nullptr;
		QAction *ActionExportOPML_ = nullptr;
		QAction *ActionImportBinary_ = nullptr;
		QAction *ActionExportBinary_ = nullptr;
		QAction *ActionExportFB2_ = nullptr;
		QAction *ActionMarkAllAsRead_ = nullptr;

		explicit AppWideActions (Util::ShortcutManager*, QObject*);

		AppWideActions () = delete;
		AppWideActions (const AppWideActions&) = delete;
		AppWideActions (AppWideActions&&) = delete;
		AppWideActions& operator= (const AppWideActions&) = delete;
		AppWideActions& operator= (AppWideActions&&) = delete;

		QMenu* CreateToolMenu () const;
		void SetEnabled (bool);

		Q_DECLARE_TR_FUNCTIONS (AppWideActions)
	};

	struct ChannelActions
	{
		QAction *ActionRemoveFeed_ = nullptr;
		QAction *ActionUpdateSelectedFeed_ = nullptr;
		QAction *ActionRenameFeed_ = nullptr;
		QAction *ActionMarkChannelAsRead_ = nullptr;
		QAction *ActionMarkChannelAsUnread_ = nullptr;
		QAction *ActionRemoveChannel_ = nullptr;
		QAction *ActionChannelSettings_ = nullptr;

		explicit ChannelActions (Util::ShortcutManager*, QObject*);

		ChannelActions () = delete;
		ChannelActions (const ChannelActions&) = delete;
		ChannelActions (ChannelActions&&) = delete;
		ChannelActions& operator= (const ChannelActions&) = delete;
		ChannelActions& operator= (ChannelActions&&) = delete;

		Q_DECLARE_TR_FUNCTIONS (ChannelActions)
	};

	QMenu* CreateFeedsContextMenu (const ChannelActions&, const AppWideActions&);
}
}
