/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QObject>
#include <QUrl>
#include <QDir>
#include <interfaces/iinfo.h>
#include <interfaces/iplugin2.h>
#include <interfaces/aggregator/iaggregatorplugin.h>
#include <interfaces/aggregator/item.h>
#include <interfaces/core/ihookproxy.h>

namespace LC
{
namespace Aggregator
{
class IProxyObject;

struct Item;
using Item_cptr = std::shared_ptr<const Item>;

namespace BodyFetch
{
	class WorkerObject;

	class Plugin : public QObject
				 , public IInfo
				 , public IPlugin2
				 , public IAggregatorPlugin
	{
		Q_OBJECT
		Q_INTERFACES (IInfo
				IPlugin2
				LC::Aggregator::IAggregatorPlugin)

		LC_PLUGIN_METADATA ("org.LeechCraft.Aggregator.BodyFetch")

		ICoreProxy_ptr Proxy_;
		QDir StorageDir_;
		WorkerObject *WO_ = nullptr;
		QHash<int, QString> ContentsCache_;
		QSet<quint64> FetchedItems_;

		IProxyObject *AggregatorProxy_ = nullptr;
	public:
		void Init (ICoreProxy_ptr) override;
		void SecondInit () override;
		QByteArray GetUniqueID () const override;
		void Release () override;
		QString GetName () const override;
		QString GetInfo () const override;
		QIcon GetIcon () const override;

		QSet<QByteArray> GetPluginClasses () const override;

		void InitPlugin (IProxyObject*) override;
	public slots:
		void hookItemLoad (LC::IHookProxy_ptr proxy,
				Item*);
		void hookItemAdded (LC::IHookProxy_ptr proxy,
				const Item& item);
	private slots:
		void handleDownload (QUrl);
		void handleBodyFetched (quint64);
	signals:
		void downloadFinished (QUrl, QString);
	};
}
}
}
