/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_AGGREGATOR_SYNCDELTAGENERATOR_H
#define PLUGINS_AGGREGATOR_SYNCDELTAGENERATOR_H
#include <QMap>
#include <interfaces/isyncable.h>
#include <util/sync/syncops.h>
#include "feed.h"
#include "channel.h"
#include "item.h"

namespace LeechCraft
{
namespace Aggregator
{
	struct Feed;

	class SyncDeltaGenerator
	{
		enum PayloadType
		{
			PTFeedAdded = 1,
			PTChanAdded,
			PTItemAdded,
			PTItemRead,
			PTChannelTagsChanged,
			PTItemTagsChanged
		};
		
		typedef QMap<IDType_t, IDType_t> IDMap_t;
		IDMap_t Remote2LocalFeeds_;
		IDMap_t Remote2LocalChannels_;
		IDMap_t Remote2LocalItems_;
	public:
		Sync::Payloads_t GetFeedAdded (Feed_ptr);
		Sync::Payloads_t GetChanAdded (Channel_ptr);
		Sync::Payloads_t GetItemAdded (Item_ptr);
		Sync::Payloads_t GetItemRead (Item_ptr, bool);
		Sync::Payloads_t GetChannelTagsChanged (Channel_ptr, const QStringList&);
		Sync::Payloads_t GetItemTagsChanged (Item_ptr, const QStringList&);
		
		void ParseDelta (const Sync::Payload&);
	private:
		IDType_t FixFeedID (IDType_t);
		IDType_t FixChanID (IDType_t);
		IDType_t FixItemID (IDType_t);
	};
}
}

#endif
