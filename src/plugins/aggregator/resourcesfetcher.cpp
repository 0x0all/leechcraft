/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "resourcesfetcher.h"
#include <interfaces/core/ientitymanager.h>
#include <util/sll/either.h>
#include <util/sll/visitor.h>
#include <util/sys/paths.h>
#include <util/threads/futures.h>
#include <util/xpc/util.h>
#include "storagebackendmanager.h"

namespace LeechCraft::Aggregator
{
	ResourcesFetcher::ResourcesFetcher (IEntityManager *iem, QObject *parent)
	: QObject { parent }
	, EntityManager_ { iem }
	{
		connect (&StorageBackendManager::Instance (),
				&StorageBackendManager::channelAdded,
				this,
				[this] (const Channel& channel)
				{
					FetchPixmap (channel.ChannelID_, channel.PixmapURL_);
					FetchFavicon (channel.ChannelID_, channel.Link_);
				});
	}

	void ResourcesFetcher::FetchPixmap (IDType_t cid, const QString& pixmapUrl)
	{
		auto sb = StorageBackendManager::Instance ().MakeStorageBackendForThread ();

		QUrl urlObj { pixmapUrl };
		if (urlObj.isValid () && !urlObj.isRelative ())
			FetchExternalFile (pixmapUrl,
					[sb, cid] (const QString& path) { sb->SetChannelPixmap (cid, QImage { path }); });
	}

	void ResourcesFetcher::FetchFavicon (IDType_t cid, const QString& link)
	{
		QUrl oldUrl { link };
		oldUrl.setPath ("/favicon.ico");
		QString iconUrl = oldUrl.toString ();

		auto sb = StorageBackendManager::Instance ().MakeStorageBackendForThread ();

		FetchExternalFile (iconUrl,
				[sb, cid] (const QString& path) { sb->SetChannelFavicon (cid, QImage { path }); });
	}

	void ResourcesFetcher::FetchExternalFile (const QString& url, const std::function<void (QString)>& cont)
	{
		auto where = Util::GetTemporaryName ();

		const auto& e = Util::MakeEntity (QUrl (url),
				where,
				Internal |
					DoNotNotifyUser |
					DoNotSaveInHistory |
					NotPersistent |
					DoNotAnnounceEntity);

		const auto& delegateResult = EntityManager_->DelegateEntity (e);
		if (!delegateResult)
		{
			qWarning () << Q_FUNC_INFO
					<< "no plugin to delegate"
					<< url;
			return;
		}

		Util::Sequence (this, delegateResult.DownloadResult_) >>
				Util::Visitor
				{
					[=] (IDownload::Success) { cont (where); },
					[] (const IDownload::Error&) {}
				}.Finally ([where] { QFile::remove (where); });
	}

}
