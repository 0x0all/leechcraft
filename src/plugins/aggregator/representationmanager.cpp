/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "representationmanager.h"
#include "jobholderrepresentation.h"
#include "itemswidget.h"
#include "channelsmodelrepresentationproxy.h"
#include "channelsmodel.h"
#include "actionsstructs.h"
#include "core.h"

namespace LeechCraft::Aggregator
{
	RepresentationManager::RepresentationManager (const InitParams& params)
	{
		JobHolderRepresentation_ = new JobHolderRepresentation ();
		JobHolderRepresentation_->setSourceModel (params.ChannelsModel_);

		ReprWidget_ = new ItemsWidget;
		ReprWidget_->SetChannelsModel (params.ChannelsModel_);
		ReprWidget_->SetChannelsFilter (JobHolderRepresentation_);
		ReprWidget_->RegisterShortcuts (params.ShortcutMgr_);
		ReprWidget_->SetAppWideActions (params.AppWideActions_);
		ReprWidget_->SetChannelActions (params.ChannelActions_);

		ReprModel_ = new ChannelsModelRepresentationProxy { this };
		ReprModel_->setSourceModel (JobHolderRepresentation_);
		ReprModel_->SetWidgets (ReprWidget_->GetToolBar (), ReprWidget_);
		ReprModel_->SetMenu (CreateFeedsContextMenu (params.ChannelActions_, params.AppWideActions_));

		ReprWidget_->ConstructBrowser ();
	}

	QAbstractItemModel* RepresentationManager::GetRepresentation () const
	{
		return ReprModel_;
	}

	void RepresentationManager::HandleRowChanged (const QModelIndex& index)
	{
		auto si = Core::Instance ().GetProxy ()->MapToSource (index);
		if (si.model () != GetRepresentation ())
			si = {};
		si = ReprModel_->mapToSource (si);
		si = JobHolderRepresentation_->SelectionChanged (si);
		SelectedRepr_ = si;
		ReprWidget_->CurrentChannelChanged (si);
	}

	std::optional<QModelIndex> RepresentationManager::GetRelevantIndex () const
	{
		if (!ReprWidget_->isVisible ())
			return {};

		return JobHolderRepresentation_->mapToSource (SelectedRepr_);
	}
}
