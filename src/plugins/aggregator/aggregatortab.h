/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <memory>
#include <QWidget>
#include <util/sll/util.h>
#include <interfaces/ihavetabs.h>
#include <interfaces/ihaverecoverabletabs.h>
#include "ui_mainwidget.h"
#include "actionsstructs.h"

class ITagsManager;

namespace LeechCraft
{
namespace Util
{
	class FlatToFoldersProxyModel;
	class ShortcutManager;
}

namespace Aggregator
{
	class ChannelsFilterModel;
	class ChannelsModel;

	class AggregatorTab : public QWidget
						, public ITabWidget
						, public IRecoverableTab
	{
		Q_OBJECT
		Q_INTERFACES (ITabWidget IRecoverableTab)

		Ui::MainWidget Ui_;

		const TabClassInfo TabClass_;
		QObject * const ParentPlugin_;

		const std::shared_ptr<const ChannelActions> ChannelActions_;
		const std::shared_ptr<Util::FlatToFoldersProxyModel> FlatToFolders_;

		ChannelsFilterModel * const ChannelsFilterModel_;

		Util::DefaultScopeGuard UiStateGuard_;
	public:
		struct InitParams
		{
			const AppWideActions& AppWideActions_;
			const std::shared_ptr<const ChannelActions>& ChannelActions_;
			const TabClassInfo& TabClass_;
			ChannelsModel *ChannelsModel_;
			const ITagsManager * const TagsManager_;

			ItemsWidget::Dependencies ItemsWidgetDeps_;
		};

		AggregatorTab (const InitParams&, QObject*);

		QToolBar* GetToolBar () const override;
		TabClassInfo GetTabClassInfo () const override;
		QObject* ParentMultiTabs () override;
		void Remove () override;

		QByteArray GetTabRecoverData () const override;
		QIcon GetTabRecoverIcon () const override;
		QString GetTabRecoverName () const override;

		QModelIndex GetRelevantIndex () const;
		QList<QModelIndex> GetRelevantIndexes () const;
	protected:
		void keyPressEvent (QKeyEvent*) override;
	private slots:
		void handleItemsMovedToChannel (QModelIndex);
		void handleFeedsContextMenuRequested (const QPoint&);

		void currentChannelChanged ();
		void handleGroupChannels ();

		void on_MergeItems__toggled (bool);
	signals:
		void tabRecoverDataChanged () override;

		void removeTabRequested ();
	};
}
}
