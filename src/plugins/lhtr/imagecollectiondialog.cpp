/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "imagecollectiondialog.h"
#include <map>
#include <functional>
#include <QtDebug>
#include "imageinfosmodel.h"

namespace LeechCraft
{
namespace LHTR
{
	ImageCollectionDialog::ImageCollectionDialog (const RemoteImageInfos_t& infos, ICoreProxy_ptr proxy, QWidget *parent)
	: QDialog { parent }
	, Infos_ { infos }
	{
		Ui_.setupUi (this);

		auto model = new ImageInfosModel (Infos_, proxy, this);
		Ui_.Images_->setModel (model);
	}

	RemoteImageInfos_t ImageCollectionDialog::GetInfos () const
	{
		return Infos_;
	}

	ImageCollectionDialog::Placement ImageCollectionDialog::GetPlacement () const
	{
		switch (Ui_.ImagePlacement_->currentIndex ())
		{
		case 0:
			return Placement::Next;
		case 1:
			return Placement::Under;
		}

		qWarning () << Q_FUNC_INFO
				<< "unknown placement index"
				<< Ui_.ImagePlacement_->currentIndex ();
		return Placement::Next;
	}

	ImageCollectionDialog::Wrapping ImageCollectionDialog::GetWrapping () const
	{
		switch (Ui_.TextWrapping_->currentIndex ())
		{
		case 0:
			return Wrapping::None;
		case 1:
			return Wrapping::Left;
		case 2:
			return Wrapping::Right;
		}

		qWarning () << Q_FUNC_INFO
				<< "unknown text wrapping"
				<< Ui_.TextWrapping_->currentIndex ();
		return Wrapping::None;
	}
}
}
