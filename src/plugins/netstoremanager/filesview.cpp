/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "filesview.h"
#include <QAction>
#include <QDropEvent>
#include <QMenu>
#include "interfaces/netstoremanager/isupportfilelistings.h"

namespace LeechCraft
{
namespace NetStoreManager
{
	FilesView::FilesView (QWidget *parent)
	: QTreeView (parent)
	, CurrentEvent_ (0)
	{
		CopyItem_ = new QAction ("Copy here", this);
		connect (CopyItem_,
				SIGNAL (triggered ()),
				this,
				SLOT (handleCopyItem ()));

		MoveItem_ = new QAction ("Move here", this);
		connect (MoveItem_,
				SIGNAL (triggered ()),
				this,
				SLOT (handleMoveItem ()));

		Cancel_ = new QAction ("Cancel", this);
		connect (Cancel_,
				SIGNAL (triggered ()),
				this,
				SLOT (handleCancel ()));
	}

	void FilesView::dropEvent (QDropEvent *event)
	{
		auto mimeData = event->mimeData ();
		QDataStream stream (mimeData->data ("x-leechcraft/nsm-item"));
		QString name;
		QStringList id, parentId;
		bool isInTrash = false, isDir = false;
		stream >> name
				>> id
				>> isInTrash
				>> isDir
				>> parentId;

		const auto& targetIndex = indexAt (event->pos ());

		if (isInTrash &&
				targetIndex.data (ListingRole::ID).toString () != "netstoremanager.item_trash" &&
				!targetIndex.data (ListingRole::InTrash).toBool ())
		{
			emit restoredFromTrash (id);
			return;
		}

		if (!isInTrash &&
				(targetIndex.data (ListingRole::ID).toString () == "netstoremanager.item_trash" ||
						targetIndex.data (ListingRole::InTrash).toBool ()))
		{
			emit trashedItem (id);
			return;
		}

		if (!targetIndex.data (ListingRole::Directory).toBool () &&
			targetIndex.parent ().data (ListingRole::ID).toStringList () == parentId)
		{
			event->ignore ();
			return;
		}

		if (targetIndex.isValid ())
		{
			CurrentEvent_ = event;
			DraggedItemId_ = id;
			TargetItemId_ = targetIndex.data (ListingRole::Directory).toBool () ?
				targetIndex.data (ListingRole::ID).toStringList () :
				targetIndex.parent ().data (ListingRole::ID).toStringList ();

			QMenu *menu = new QMenu;

			if (!targetIndex.data (ListingRole::InTrash).toBool () &&
					targetIndex.data (ListingRole::ID).toStringList ().value (0) != "netstoremanager.item_trash")
				menu->addActions ({ CopyItem_, MoveItem_, menu->addSeparator (), Cancel_ });

			menu->exec (viewport ()->mapToGlobal (event->pos ()));
			menu->deleteLater ();
		}
		else
			event->ignore ();

		CurrentEvent_ = 0;
		DraggedItemId_.clear ();
		TargetItemId_.clear ();
	}

	void FilesView::handleCopyItem ()
	{
		if (!CurrentEvent_ ||
				DraggedItemId_.isEmpty ())
			return;

		CurrentEvent_->setDropAction (Qt::CopyAction);
		emit copiedItem (DraggedItemId_, TargetItemId_);
		CurrentEvent_->accept ();
	}

	void FilesView::handleMoveItem ()
	{
		if (!CurrentEvent_ ||
				DraggedItemId_.isEmpty ())
			return;
		CurrentEvent_->setDropAction (Qt::MoveAction);
		emit movedItem (DraggedItemId_, TargetItemId_);
		CurrentEvent_->accept ();
	}

	void FilesView::handleCancel ()
	{
		if (CurrentEvent_)
			CurrentEvent_->ignore ();
	}
}
}

