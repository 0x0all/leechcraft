/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#ifndef PLUGINS_NETSTOREMANAGER_MANAGERTAB_H
#define PLUGINS_NETSTOREMANAGER_MANAGERTAB_H
#include <functional>
#include <QWidget>
#include <interfaces/structures.h>
#include <interfaces/core/icoreproxy.h>
#include <interfaces/ihavetabs.h>
#include "ui_managertab.h"

class QStandardItem;
class QAction;

namespace LeechCraft
{
namespace NetStoreManager
{
	class IStorageAccount;
	class ISupportFileListings;
	class AccountsManager;
	class FilesModel;

	enum Columns
	{
		FirstColumnNumber
	};

	class ManagerTab : public QWidget
					 , public ITabWidget
	{
		Q_OBJECT
		Q_INTERFACES (ITabWidget)

		Ui::ManagerTab Ui_;

		QObject *Parent_;
		TabClassInfo Info_;
		ICoreProxy_ptr Proxy_;

		AccountsManager *AM_;
		FilesModel *Model_;

		QAction *CopyURL_;
		QAction *DeleteFile_;
		QAction *MoveToTrash_;
		QAction *UntrashFile_;
		QAction *EmptyTrash_;
		QAction *CreateDir_;
		QAction *UploadInCurrentDir_;
		QAction *Download_;
		QHash<IStorageAccount*, QHash<QString, bool>> Account2ItemExpandState_;
	public:
		ManagerTab (const TabClassInfo&, AccountsManager*, ICoreProxy_ptr, QObject*);

		TabClassInfo GetTabClassInfo () const;
		QObject* ParentMultiTabs ();
		void Remove ();
		QToolBar* GetToolBar () const;
	private:
		IStorageAccount* GetCurrentAccount () const;
		void CallOnSelection (std::function<void (ISupportFileListings*, const QList<QStringList>&)>);
		void ClearFilesModel ();
		void SaveModelState (const QModelIndex& parent = QModelIndex ());
		void RestoreModelState ();
		void ExpandModelItems (const QModelIndex& parent = QModelIndex ());
		QList<QStringList> GetTrashedFiles () const;
		QStandardItem* GetItemFromId (const QStringList& id) const;

	private slots:
		void handleGotListing (const QList<QList<QStandardItem*>>&);
		void handleGotFileUrl (const QUrl& url, const QStringList& id);
		void handleGotNewItem (const QList<QStandardItem*>& item,
				const QStringList& parentId);
		void flCopyURL ();
		void flDelete ();
		void flMoveToTrash ();
		void flRestoreFromTrash ();
		void flEmptyTrash ();
		void flCreateDir ();
		void flUploadInCurrentDir ();
		void flDownload ();
		void on_AccountsBox__activated (int);
		void on_Update__released ();
		void on_Upload__released ();
		void handleContextMenuRequested (const QPoint& point);
		void handleCopiedItem (const QStringList& itemId,
				const QStringList& newParentId);
		void handleMovedItem (const QStringList& itemId,
				const QStringList& newParentId);
		void handleRestoredFromTrash (const QStringList& id);
		void handleTrashedItem (const QStringList& id);

	signals:
		void removeTab (QWidget*);

		void uploadRequested (IStorageAccount *isa, const QString& file,
				const QStringList& parentId = QStringList ());

		void gotEntity (LeechCraft::Entity entity);
	};
}
}

#endif
