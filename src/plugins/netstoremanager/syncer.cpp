/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "syncer.h"
#include <QtDebug>
#include <QFileInfo>
#include "interfaces/netstoremanager/istorageaccount.h"
#include "utils.h"

namespace LeechCraft
{
namespace NetStoreManager
{
	Syncer::Syncer (const QString& dirPath, IStorageAccount *isa, QObject *parent)
	: QObject (parent)
	, BasePath_ (dirPath)
	, Account_ (isa)
	, SFLAccount_ (qobject_cast<ISupportFileListings*> (isa->GetQObject ()))
	{
	}

	QByteArray Syncer::GetAccountID () const
	{
		return Account_->GetUniqueID ();
	}

	QString Syncer::GetBasePath () const
	{
		return BasePath_;
	}

	void Syncer::SetItems (const QList<StorageItem>& items)
	{
		Id2Item_.clear ();
		for (const auto& item : items)
		{
			if (item.IsTrashed_)
				continue;
			Id2Item_ [item.ID_] = item;
		}
		auto paths = Utils::GetItemsPaths (Id2Item_);
	}

	void Syncer::start ()
	{
	}

	void Syncer::stop ()
	{
	}

	void Syncer::dirWasCreated (const QString& path)
	{
		if (!SFLAccount_)
			return;

		QString dirPath = path;
		dirPath.replace (BasePath_, "");
		if (Id2Path_.right.count (dirPath))
			return;

		SFLAccount_->CreateDirectory (QFileInfo (dirPath).fileName (),
				Id2Item_ [Id2Path_.right.at (dirPath)].ParentID_);
	}

	void Syncer::dirWasRemoved (const QString& path)
	{
		if (!SFLAccount_)
			return;

		QString dirPath = path;
		dirPath.replace (BasePath_, "");
		if (Id2Path_.right.count (dirPath))
			return;

		SFLAccount_->Delete ({ Id2Path_.right.at (dirPath) }, false);
	}

	void Syncer::fileWasCreated (const QString& path)
	{
		qDebug () << Q_FUNC_INFO << path;
	}

	void Syncer::fileWasRemoved (const QString& path)
	{
		qDebug () << Q_FUNC_INFO << path;
	}

	void Syncer::fileWasUpdated (const QString& path)
	{
		qDebug () << Q_FUNC_INFO << path;
	}

}
}
