/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2010-2012  Oleg Linkin
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <functional>
#include <QObject>
#include <QVariant>
#include <QStringList>
#include <QFileSystemWatcher>
#include <QPointer>
#include <QQueue>
#include "interfaces/netstoremanager/isupportfilelistings.h"

class QTimer;
class QThread;
class QStandardItem;

namespace LeechCraft
{
namespace NetStoreManager
{
	class ISupportFileListings;
	class FilesWatcherBase;
	class IStorageAccount;
	class AccountsManager;

	struct DownloadParams
	{
		DownloadParams () : Account_ (0) {};
		IStorageAccount *Account_;
		QString Path_;
		QString LocalHash_;
		QString RemoteHash_;
	};

	class SyncManager : public QObject
	{
		Q_OBJECT

		AccountsManager *AM_;
		QMap<QString, IStorageAccount*> Path2Account_;
		QTimer *Timer_;

		QThread *Thread_;
		FilesWatcherBase *FilesWatcher_;

		QMap<ISupportFileListings*, QMap<QString, QStringList>> Isfl2PathId_;
		QQueue<std::function<void (void)>> ApiCallQueue_;
		QTimer *QueueCheckTimer_;

		const int RemoteStorageCheckingTimeout_;
	public:
		SyncManager (AccountsManager *am, QObject *parent = 0);

		void Release ();
	private:
		void CreateDirectory (const QString& path);
		void RemoveDirectory (QMap<QString, QStringList>& map,
				const QString& basePath, const QString& path);
		void RemoveFile (QMap<QString, QStringList>& map,
				const QString& basePath, const QString& path);
		void DownloadFile (const QString& path, const QStringList& id,
				const QDateTime& modifiedDate, const QString& hash,
				IStorageAccount *isa);

	public slots:
		void handleDirectoryAdded (const QVariantMap& dirs);
	private slots:
		void handleTimeout ();
		void handleUpdateExceptionsList ();

		void handleDirWasCreated (const QString& path);
		void handleFileWasCreated (const QString& path);
		void handleDirWasRemoved (const QString& path);
		void handleFileWasRemoved (const QString& path);
		void handleEntryWasRenamed (const QString& oldPath, const QString&  newPath);
		void handleEntryWasMoved (const QString& oldPath, const QString& newPath);
		void handleFileWasUpdated (const QString& path);

		void handleGotListing (const QList<QList<QStandardItem*>>&);
		void handleGotNewItem (const QList<QStandardItem*>& item,
				const QStringList& parentId);
		void handleGotChanges (const QList<Change>& changes);

		void checkApiCallQueue ();

		void finishedHashCounting (const DownloadParams& params = DownloadParams ());
		
	signals:
		void uploadRequested (IStorageAccount *account,
				const QString& fileName, const QStringList& parentId);
	};
}
}
