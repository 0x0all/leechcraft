/**********************************************************************
 *  LeechCraft - modular cross-platform feature rich internet client.
 *  Copyright (C) 2010-2015  Oleg Linkin
 *
 *  Boost Software License - Version 1.0 - August 17th, 2003
 *
 *  Permission is hereby granted, free of charge, to any person or organization
 *  obtaining a copy of the software and accompanying documentation covered by
 *  this license (the "Software") to use, reproduce, display, distribute,
 *  execute, and transmit the Software, and to prepare derivative works of the
 *  Software, and to permit third-parties to whom the Software is furnished to
 *  do so, all subject to the following:
 *
 *  The copyright notices in the Software and this entire statement, including
 *  the above license grant, this restriction and the following disclaimer,
 *  must be included in all copies of the Software, in whole or in part, and
 *  all derivative works of the Software, unless such copies or derivative
 *  works are solely in the form of machine-executable object code generated by
 *  a source language processor.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 *  SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 *  FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 *
 **********************************************************************/

#include "downmanager.h"
#include <QDesktopServices>
#include <QFileInfo>
#include <interfaces/core/ientitymanager.h>
#include <interfaces/netstoremanager/istorageaccount.h>
#include <util/xpc/util.h>
#include <util/threads/futures.h>
#include <util/sll/visitor.h>
#include <util/sll/either.h>

namespace LeechCraft
{
namespace NetStoreManager
{
	DownManager::DownManager (ICoreProxy_ptr proxy, QObject *parent)
	: QObject { parent }
	, Proxy_ (proxy)
	{
	}

	void DownManager::SendEntity (const Entity& e)
	{
		Proxy_->GetEntityManager ()->HandleEntity (e);
	}

	void DownManager::DelegateEntity (const Entity& e, const QString& targetPath,
			bool openAfterDownload)
	{
		auto res = Proxy_->GetEntityManager ()->DelegateEntity (e);
		if (!res)
		{
			auto notif = Util::MakeNotification ("NetStoreManager",
				tr ("Could not find plugin to download %1.")
						.arg ("<em>" + e.Entity_.toString () + "</em>"),
				Priority::Critical);
			SendEntity (notif);
			return;
		}

		Util::Sequence (this, boost::any_cast<QFuture<IDownload::Result>> (res.ExtendedResult_)) >>
				Util::Visitor
				{
					[=] (IDownload::Success)
					{
						if (openAfterDownload)
							SendEntity (Util::MakeEntity (QUrl::fromLocalFile (targetPath),
									{}, OnlyHandle | FromUserInitiated));
					},
					[] (IDownload::Error) {}
				};
	}

	void DownManager::handleDownloadRequest (const QUrl& url,
			const QString& filePath, TaskParameters tp, bool open)
	{
		const auto& savePath = open ?
				QStandardPaths::writableLocation (QStandardPaths::TempLocation) + "/" + filePath :
				filePath;

		auto e = Util::MakeEntity (url, savePath, tp);
		e.Additional_ ["Filename"] = QFileInfo (filePath).fileName ();
		open ?
			DelegateEntity (e, savePath, open) :
			SendEntity (e);
	}
}
}
