/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QStringList>
#include <libtorrent/torrent_info.hpp>
#include <interfaces/structures.h>
#include "fileinfo.h"
#include "torrentfilesmodelbase.h"

namespace LeechCraft
{
namespace Plugins
{
namespace BitTorrent
{
	struct TorrentNodeInfo : public TorrentNodeInfoBase<TorrentNodeInfo>
	{
		int Priority_ = -1;
		float Progress_ = 0;

		using TorrentNodeInfoBase<TorrentNodeInfo>::TorrentNodeInfoBase;
	};
	typedef std::shared_ptr<TorrentNodeInfo> TorrentNodeInfo_ptr;

	class TorrentFilesModel : public TorrentFilesModelBase<TorrentNodeInfo>
	{
		Q_OBJECT

		const int Index_ = -1;
	public:
		enum
		{
			RoleFullPath = Qt::UserRole + 1,
			RoleFileName,
			RoleFileIndex,
			RoleSize,
			RoleProgress,
			RolePriority,
		};

		enum
		{
			ColumnPath,
			ColumnPriority,
			ColumnProgress,
			ColumnDynamicMax,
		};

		TorrentFilesModel (int);

		QVariant data (const QModelIndex&, int = Qt::DisplayRole) const override;
		Qt::ItemFlags flags (const QModelIndex&) const override;
		bool setData (const QModelIndex&, const QVariant&, int = Qt::EditRole) override;

		void ResetFiles (const boost::filesystem::path&, const QList<FileInfo>&);
		void UpdateFiles (const boost::filesystem::path&, const QList<FileInfo>&);

		void HandleFileActivated (QModelIndex) const;
	private:
		void UpdateSizeGraph (const TorrentNodeInfo_ptr&);
		void ClearEmptyParents (boost::filesystem::path);
	public slots:
		void update ();
		void handleFileRenamed (int, int, const QString&);
	};
}
}
}
