/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "jsonbookmarksimportpage.h"
#include <QFile>
#include <QMessageBox>
#include <QtDebug>
#include <util/sll/parsejson.h>
#include <util/xpc/util.h>

namespace LeechCraft
{
namespace NewLife
{
namespace Importers
{
	JsonBookmarksImportPage::JsonBookmarksImportPage (const ICoreProxy_ptr& proxy, QWidget *parent)
	: EntityGeneratingPage { proxy, parent }
	{
		Ui_.setupUi (this);
	}

	int JsonBookmarksImportPage::nextId () const
	{
		return -1;
	}

	void JsonBookmarksImportPage::initializePage ()
	{
		connect (wizard (),
				&QWizard::accepted,
				this,
				&JsonBookmarksImportPage::HandleAccepted);
	}

	namespace
	{
		template<typename T>
		QVariantList CollectBookmarks (const T& roots, const QStringList& tags)
		{
			QVariantList result;

			for (const auto& childVar : roots)
			{
				const auto& child = childVar.toMap ();

				const auto& name = child.value ("name").toString ();
				const auto& type = child.value ("type").toString ();

				if (type == "folder")
				{
					auto childTags = tags;
					if (!name.isEmpty ())
					{
						childTags << name;
						childTags.removeDuplicates ();
					}

					result += CollectBookmarks (child.value ("children").toList (), childTags);
				}
				else if (type == "url")
					result.push_back (QVariantMap {
								{ "Title", name },
								{ "URL", child.value ("url") },
								{ "Tags", tags }
							});
				else
					qWarning () << Q_FUNC_INFO
							<< "unknown element type"
							<< type;
			}

			return result;
		}
	}

	void JsonBookmarksImportPage::HandleAccepted ()
	{
		const auto& filePath = Ui_.Path_->text ();

		QFile file { filePath };
		if (!file.open (QIODevice::ReadOnly))
		{
			qWarning () << Q_FUNC_INFO
					<< "unable to open file"
					<< filePath
					<< file.errorString ();
			QMessageBox::critical (this,
					"LeechCraft",
					tr ("Unable to open file %1: %2.")
							.arg (filePath)
							.arg (file.errorString ()));
			return;
		}

		const auto& map = Util::ParseJson (&file, Q_FUNC_INFO).toMap ();
		const auto& roots = map.value ("roots").toMap ();

		const auto& bms = CollectBookmarks (roots, {});

		auto entity = Util::MakeEntity ({},
				{},
				FromUserInitiated,
				"x-leechcraft/browser-import-data");
		entity.Additional_ ["BrowserBookmarks"] = bms;
		SendEntity (entity);
	}
}
}
}
