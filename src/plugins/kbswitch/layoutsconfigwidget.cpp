/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "layoutsconfigwidget.h"
#include <QStandardItemModel>
#include "kbctl.h"
#include "flagiconprovider.h"

namespace LeechCraft
{
namespace KBSwitch
{
	namespace
	{
		QList<QPair<QString, QString>> ToSortedList (const QHash<QString, QString>& hash)
		{
			QList<QPair<QString, QString>> result;
			for (auto i = hash.begin (); i != hash.end (); ++i)
				result.append ({ i.value (), i.key () });

			std::sort (result.begin (), result.end (),
					[] (decltype (result.at (0)) l, decltype (result.at (0)) r)
						{ return l.first < r.first; });

			return result;
		}

		void SetList (const QHash<QString, QString>& hash, QStandardItemModel *model)
		{
			FlagIconProvider flagProv;

			for (const auto& pair : ToSortedList (hash))
			{
				const auto& img = flagProv.requestImage (pair.first, nullptr, {});
				QList<QStandardItem*> row
				{
					new QStandardItem ({ QPixmap::fromImage (img) }, pair.first),
					new QStandardItem (pair.second)
				};
				for (auto item : row)
					item->setEditable (false);
				model->appendRow (row);
			}
		}
	}

	LayoutsConfigWidget::LayoutsConfigWidget (QWidget *parent)
	: QWidget (parent)
	, AvailableModel_ (new QStandardItemModel (this))
	, EnabledModel_ (new QStandardItemModel (this))
	{
		const QStringList headers { tr ("code"), tr ("description") };
		AvailableModel_->setHorizontalHeaderLabels (headers);
		EnabledModel_->setHorizontalHeaderLabels (headers);

		Ui_.setupUi (this);
		Ui_.AvailableView_->setModel (AvailableModel_);
		Ui_.EnabledView_->setModel (EnabledModel_);

		auto layouts = KBCtl::Instance ().GetLayoutsD2N ();

		QHash<QString, QString> enabled;
		for (const auto& desc : KBCtl::Instance ().GetEnabledGroups ())
			enabled [desc] = layouts.take (desc);

		SetList (layouts, AvailableModel_);
		SetList (enabled, EnabledModel_);
	}
}
}
