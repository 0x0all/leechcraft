/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2012  Like-all
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "terminalwidget.h"
#include <QVBoxLayout>
#include <QEvent>
#include <QKeyEvent>
#include <QMessageBox>

namespace LeechCraft
{
namespace Shaitan
{
	namespace
	{
		class TerminalContainer : public QX11EmbedContainer
		{
		public:
			TerminalContainer (QWidget *parent)
			: QX11EmbedContainer (parent)
			{
			}

			virtual bool eventFilter (QObject *obj, QEvent *event)
			{
				if (obj == this && event->type () == QEvent::KeyPress)
				{
					auto keyEvent = static_cast<QKeyEvent*> (event);
					if (keyEvent->key () == (Qt::Key_PageDown & Qt::Key_Control) ||
						keyEvent->key () == (Qt::Key_PageUp & Qt::Key_Control))
						return false;
				}
				return QX11EmbedContainer::eventFilter (obj, event);
			}
		};
	}

	TerminalWidget::TerminalWidget (const TabClassInfo& tc, QObject *mt)
	: TC_ (tc)
	, ParentMT_ (mt)
	, Embedder_ (new TerminalContainer (this))
	{
		Process_ = new QProcess (this);

		auto lay = new QVBoxLayout;
		setLayout (lay);
		lay->addWidget (Embedder_);

		Embedder_->adjustSize ();

		Embedder_->show ();

		connect (Process_,
			SIGNAL (error (QProcess::ProcessError)),
			this,
			SLOT (gotError ()));

		Process_->start ("xterm",
			{ "-into", QString::number (Embedder_->winId ()) });
	}

	TabClassInfo TerminalWidget::GetTabClassInfo () const
	{
		return TC_;
	}

	QToolBar* TerminalWidget::GetToolBar () const
	{
		return 0;
	}

	QObject* TerminalWidget::ParentMultiTabs ()
	{
		return ParentMT_;
	}

	void TerminalWidget::Remove ()
	{
		emit removeTab (this);
		deleteLater ();
	}

	void TerminalWidget::gotError ()
	{
		QMessageBox::critical (this,
		      "LeechCraft",
		      tr ("XTerm has not started: %1.").arg (Process_->errorString()));
	}
}
}
