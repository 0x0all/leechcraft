/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "acceptedrejecteddialog.h"
#include <algorithm>
#include <QStandardItemModel>

namespace LeechCraft
{
namespace CertMgr
{
	AcceptedRejectedDialog::AcceptedRejectedDialog (ICoreProxy_ptr proxy)
	: Proxy_ { proxy }
	, Model_ { new QStandardItemModel { this } }
	, CoreSettings_ { QCoreApplication::organizationName (),
			QCoreApplication::applicationName () }
	{
		CoreSettings_.beginGroup ("SSL exceptions");

		Model_->setHorizontalHeaderLabels ({ tr ("Address"), tr ("State") });
		PopulateModel ();

		Ui_.setupUi (this);
		Ui_.View_->setModel (Model_);
	}

	AcceptedRejectedDialog::~AcceptedRejectedDialog ()
	{
		CoreSettings_.endGroup ();
	}

	void AcceptedRejectedDialog::PopulateModel ()
	{
		auto keys = CoreSettings_.allKeys ();
		std::sort (keys.begin (), keys.end ());

		for (const auto& key : keys)
		{
			const auto val = CoreSettings_.value (key).toBool ();

			QList<QStandardItem*> row
			{
				new QStandardItem { key },
				new QStandardItem { val ? tr ("allow") : tr ("deny") }
			};

			for (auto item : row)
				item->setEditable (false);

			Model_->appendRow (row);
		}
	}
}
}
