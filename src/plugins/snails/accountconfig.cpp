/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "accountconfig.h"
#include <QDataStream>

namespace LC::Snails
{
	QDataStream& operator<< (QDataStream& out, const AccountConfig& cfg)
	{
		out << static_cast<quint8> (1);
		out << cfg.AccName_
			<< cfg.Login_
			<< cfg.UseSASL_
			<< cfg.SASLRequired_
			<< static_cast<qint8> (cfg.InSecurity_)
			<< cfg.InSecurityRequired_
			<< static_cast<qint8> (cfg.OutSecurity_)
			<< cfg.OutSecurityRequired_
			<< cfg.SMTPNeedsAuth_
			<< cfg.InHost_
			<< cfg.InPort_
			<< cfg.OutHost_
			<< cfg.OutPort_
			<< cfg.OutLogin_
			<< static_cast<quint8> (cfg.OutType_)
			<< cfg.UserName_
			<< cfg.UserEmail_
			<< cfg.KeepAliveInterval_
			<< cfg.LogToFile_
			<< static_cast<quint8> (cfg.DeleteBehaviour_);
		return out;
	}

	QDataStream& operator>> (QDataStream& in, AccountConfig& cfg)
	{
		quint8 version = 0;
		in >> version;

		if (version != 1)
			throw std::runtime_error { "Unknown version " + std::to_string (version) };

		quint8 outType = 0;
		qint8 inSec = 0;
		qint8 outSec = 0;

		in >> cfg.AccName_
			>> cfg.Login_
			>> cfg.UseSASL_
			>> cfg.SASLRequired_
			>> inSec
			>> cfg.InSecurityRequired_
			>> outSec
			>> cfg.OutSecurityRequired_;

		cfg.InSecurity_ = static_cast<AccountConfig::SecurityType> (inSec);
		cfg.OutSecurity_ = static_cast<AccountConfig::SecurityType> (outSec);

		in >> cfg.SMTPNeedsAuth_
			>> cfg.InHost_
			>> cfg.InPort_
			>> cfg.OutHost_
			>> cfg.OutPort_
			>> cfg.OutLogin_
			>> outType;

		cfg.OutType_ = static_cast<AccountConfig::OutType> (outType);

		in >> cfg.UserName_
			>> cfg.UserEmail_
			>> cfg.KeepAliveInterval_
			>> cfg.LogToFile_;

		quint8 deleteBehaviour = 0;
		in >> deleteBehaviour;
		cfg.DeleteBehaviour_ = static_cast<AccountConfig::DeleteBehaviour> (deleteBehaviour);

		return in;
	}
}
