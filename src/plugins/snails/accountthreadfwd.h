/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <variant>
#include <vmime/exception.hpp>
#include <vmime/security/cert/X509Certificate.hpp>
#include <vmime/security/cert/certificateException.hpp>
#include <util/sll/void.h>
#include <util/sll/eitherfwd.h>

namespace LC
{
namespace Snails
{
	class GenericExceptionWrapper;

	template<typename... Rest>
	using InvokeError_t = std::variant<
				vmime::exceptions::authentication_error,
				vmime::exceptions::connection_error,
				vmime::security::cert::certificateException,
				GenericExceptionWrapper,
				Rest...
			>;

	template<typename R, typename... Rest>
	using EitherInvokeError_t = Util::Either<InvokeError_t<Rest...>, R>;

	namespace detail
	{
		template<typename>
		struct AsInvokeError;

		template<typename... List>
		struct AsInvokeError<std::variant<List...>>
		{
			using Type = InvokeError_t<List...>;
		};
	}

	template<typename Errs>
	using AsInvokeError_t = typename detail::AsInvokeError<Errs>::Type;

	namespace detail
	{
		template<typename, typename ErrList, typename... Errs>
		struct AddErrors;

		template<typename Res>
		struct AddErrors<void, Res>
		{
			using Type = Res;
		};

		template<template<typename...> class ErrCont, typename... Existing, typename Head, typename... Rest>
		struct AddErrors<
				std::enable_if_t<(std::is_same_v<Head, Existing> || ...)>,
				ErrCont<Existing...>,
				Head,
				Rest...
			> : AddErrors<void, ErrCont<Existing...>, Rest...> {};

		template<template<typename...> class ErrCont, typename... Existing, typename Head, typename... Rest>
		struct AddErrors<
				std::enable_if_t<!(std::is_same_v<Head, Existing> || ...)>,
				ErrCont<Existing...>,
				Head,
				Rest...
			> : AddErrors<void, ErrCont<Head, Existing...>, Rest...> {};
	}

	template<typename ErrList, typename... Errs>
	using AddErrors_t = typename detail::AddErrors<void, ErrList, Errs...>::Type;

	class AccountThread;
}
}
