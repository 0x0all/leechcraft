/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "accountdatabase.h"
#include <QDir>
#include <QSqlDatabase>
#include <QSqlError>
#include <QSqlQuery>
#include <QtDebug>
#include <util/db/dblock.h>
#include <util/sll/qtutil.h>
#include "account.h"

namespace LeechCraft
{
namespace Snails
{
	AccountDatabase::AccountDatabase (const QDir& dir, Account *acc, QObject *parent)
	: QObject { parent }
	, Acc_ { acc }
	, DB_ { std::make_shared<QSqlDatabase> (QSqlDatabase::addDatabase ("QSQLITE", "SnailsStorage_" + acc->GetID ())) }
	{
		if (!DB_->isValid ())
		{
			Util::DBLock::DumpError (DB_->lastError ());
			throw std::runtime_error ("Unable to add database connection.");
		}

		DB_->setDatabaseName (dir.filePath ("msgs.db"));
		if (!DB_->open ())
		{
			Util::DBLock::DumpError (DB_->lastError ());
			throw std::runtime_error (qPrintable (QString ("Could not initialize database: %1")
						.arg (DB_->lastError ().text ())));
		}

		InitTables ();
	}

	void AccountDatabase::InitTables ()
	{
		QHash<QString, QStringList> table2queries;
		table2queries ["messages"] << "CREATE TABLE messages ("
				"Id INTEGER PRIMARY KEY AUTOINCREMENT,"
				"MsgId TEXT UNIQUE NOT NULL,"
				"IsRead BOOL"
				")";
		table2queries ["folders"] << "CREATE TABLE folders ("
				"Id INTEGER PRIMARY KEY AUTOINCREMENT,"
				"FolderPath TEXT UNIQUE NOT NULL"
				");";
		table2queries ["msg2folder"] << "CREATE TABLE msg2folder ("
				"Id INTEGER PRIMARY KEY AUTOINCREMENT,"
				"MsgId INTEGER NOT NULL REFERENCES messages (Id) ON DELETE CASCADE,"
				"FolderId INTEGER NOT NULL REFERENCES folders (Id) ON DELETE CASCADE"
				");";

		QSqlQuery query { *DB_ };
		for (const auto& pair : Util::Stlize (table2queries))
			if (!DB_->tables ().contains (pair.first))
				for (const auto& queryStr : pair.second)
					if (!query.exec (queryStr))
					{
						Util::DBLock::DumpError (query);
						throw std::runtime_error ("Query execution failed for storage creation.");
					}

		query.exec ("PRAGMA foreign_keys = ON;");
		query.exec ("PRAGMA synchronous = OFF;");
	}
}
}
