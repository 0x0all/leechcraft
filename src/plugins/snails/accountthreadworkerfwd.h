/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <stdexcept>
#include <memory>
#include <boost/variant.hpp>
#include <vmime/net/message.hpp>
#include <util/sll/either.h>
#include <util/sll/void.h>
#include "attdescr.h"
#include "messageinfo.h"

namespace LeechCraft
{
namespace Snails
{
	struct FolderNotFound
	{
		const char* what () const;
	};

	struct MessageNotFound
	{
		const char* what () const;
	};

	struct FileOpenError
	{
		const char* what () const;
	};

	struct AttachmentNotFound
	{
		const char* what () const;
	};

	struct MessageBodies;

	using FetchWholeMessageResult_t = Util::Either<boost::variant<FolderNotFound, MessageNotFound>, MessageBodies>;

	using PrefetchWholeMessagesResult_t = Util::Either<boost::variant<FolderNotFound>, QHash<QByteArray, MessageBodies>>;

	using FetchAttachmentResult_t = Util::Either<
			boost::variant<MessageNotFound, FileOpenError, AttachmentNotFound>,
			Util::Void
		>;

	struct FetchedMessageInfo
	{
		MessageInfo Info_;
		vmime::shared_ptr<const vmime::header> Headers_;
	};

	struct FolderAlreadyExists
	{
		const char* what () const;
	};

	struct InvalidPathComponent
	{
		QString Component_;
		QByteArray FullMessage_ = "`" + Component_.toUtf8 () + "` is an invalid component name";

		const char* what () const;
	};

	using CreateFolderResult_t = Util::Either<boost::variant<FolderAlreadyExists, InvalidPathComponent>, Util::Void>;
}
}
