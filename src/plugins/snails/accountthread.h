/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#pragma once

#include <QThread>
#include <QFuture>
#include <vmime/security/cert/X509Certificate.hpp>
#include <util/threads/futures.h>
#include "taskqueuemanager.h"

namespace LeechCraft
{
namespace Snails
{
	class Account;
	class AccountThreadWorker;
	class TaskQueueManager;

	using CertList_t = std::vector<vmime::shared_ptr<vmime::security::cert::X509Certificate>>;

	struct Task
	{
		std::function<void (AccountThreadWorker*)> Executor_;
	};

	class AccountThread : public QThread
	{
		Q_OBJECT

		Account * const A_;
		const bool IsListening_;
		const QString Name_;
		const CertList_t Certs_;

		AccountThreadWorker *W_;

		QMutex FunctionsMutex_;
		QList<Task> Functions_;
	public:
		AccountThread (bool isListening, const QString& name,
				const CertList_t& certs, Account *acc);

		template<typename F, typename... Args>
		QFuture<Util::ResultOf_t<F (AccountThreadWorker*, Args...)>> Schedule (const F& func, const Args&... args)
		{
			QFutureInterface<Util::ResultOf_t<F (AccountThreadWorker*, Args...)>> iface;

			auto reporting = [func, iface, args...] (AccountThreadWorker *w) mutable
			{
				iface.reportStarted ();
				Util::ReportFutureResult (iface, func, w, args...);
			};

			{
				QMutexLocker locker { &FunctionsMutex_ };
				Functions_ << Task { reporting };
			}

			emit rotateFuncs ();

			return iface.future ();
		}
	protected:
		void run ();
	private:
		void RotateFuncs ();
		void ConnectSignals ();
	signals:
		void rotateFuncs ();
	};
}
}
