/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "progressmanager.h"
#include <QStandardItemModel>
#include <QtDebug>
#include <util/sll/slotclosure.h>
#include <util/sll/delayedexecutor.h>
#include <util/xpc/util.h>
#include "account.h"

namespace LeechCraft
{
namespace Snails
{
	ProgressManager::ProgressManager (QObject *parent)
	: QObject { parent }
	, Model_ { new QStandardItemModel { this } }
	{
		Model_->setColumnCount (3);
	}

	QAbstractItemModel* ProgressManager::GetRepresentation () const
	{
		return Model_;
	}

	ProgressListener_ptr ProgressManager::MakeProgressListener (const QString& context)
	{
		const auto pl = std::make_shared<ProgressListener> ();
		const ProgressListener_wptr weakPl { pl };

		Util::ExecuteLater ([this, weakPl, context]
				{
					const QList<QStandardItem*> row
					{
						new QStandardItem { context },
						new QStandardItem { tr ("Running") },
						new QStandardItem { {} }
					};
					for (const auto item : row)
						item->setEditable (false);

					Util::InitJobHolderRow (row);

					Model_->appendRow (row);

					QMutexLocker locker { &Listener2RowMutex_ };
					Listener2Row_ [weakPl] = row;

					if (weakPl.expired ())
						Listener2Row_.remove (weakPl);
				});

		connect (pl.get (),
				&ProgressListener::destroyed,
				this,
				[this, weakPl]
				{
					QList<QStandardItem*> row;
					{
						QMutexLocker locker { &Listener2RowMutex_ };
						row = Listener2Row_.take (weakPl);
					}

					if (!row.isEmpty ())
						Model_->removeRow (row.first ()->row ());
				});

		connect (pl.get (),
				&ProgressListener::gotProgress,
				this,
				[this, weakPl] (quint64 done, quint64 total)
				{
					QList<QStandardItem*> row;
					{
						QMutexLocker locker { &Listener2RowMutex_ };
						row = Listener2Row_.take (weakPl);
					}

					if (!row.isEmpty ())
						Util::SetJobHolderProgress (row, done, total, "%1/%2");
				});

		return pl;
	}
}
}
