/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2006-2014  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "msgtemplatesmanager.h"
#include <functional>
#include <QLocale>
#include <QtDebug>
#include <interfaces/itexteditor.h>
#include "message.h"

namespace LeechCraft
{
namespace Snails
{
	MsgTemplatesManager::MsgTemplatesManager (QObject *parent)
	: QObject { parent }
	{
	}

	QString MsgTemplatesManager::GetTemplatedText (ContentType type,
			MsgType msgType, const QString& body, const Message *msg) const
	{
		switch (type)
		{
		case ContentType::PlainText:
			return GetPlainText (msgType, body, msg);
		case ContentType::HTML:
			return GetHTMLText (msgType, body, msg);
		}

		qWarning () << Q_FUNC_INFO
				<< "unknown content type"
				<< static_cast<int> (type);
		return body;
	}

	namespace
	{
		auto GetFunctions ()
		{
			QHash<QString, std::function<QString (const Message*, QString)>> result;

			result ["ODATE"] = [] (const Message *msg, const QString&) { return msg->GetDate ().date ().toString (Qt::DefaultLocaleLongDate); };
			result ["OTIME"] = [] (const Message *msg, const QString&) { return msg->GetDate ().time ().toString (Qt::DefaultLocaleLongDate); };
			result ["ONAME"] = [] (const Message *msg, const QString&) { return msg->GetAddress (Message::Address::ReplyTo).first; };
			result ["OEMAIL"] = [] (const Message *msg, const QString&) { return msg->GetAddress (Message::Address::ReplyTo).second; };
			result ["ONAMEOREMAIL"] = [] (const Message *msg, const QString&)
						{
							const auto& addr = msg->GetAddress (Message::Address::ReplyTo);
							return addr.first.isEmpty () ? addr.second : addr.first;
						};
			result ["QUOTE"] = [] (const Message*, const QString& body) { return body; };

			return result;
		}

	}

	QString MsgTemplatesManager::GetPlainText (MsgType type, const QString& body, const Message *msg) const
	{
		return body;
	}

	QString MsgTemplatesManager::GetHTMLText (MsgType type, const QString& body, const Message *msg) const
	{
		return body;
	}
}
}
