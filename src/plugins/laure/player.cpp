/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2011-2012  Minh Ngo
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "player.h"
#include <QDebug>
#include <QSlider>
#include <QTimer>
#include <QPushButton>
#include <QTime>
#include "vlcwrapper.h"

namespace LeechCraft
{
namespace Laure
{
	const int pos_slider_max = 10000;

	Player::Player (QWidget *parent)
	: QFrame (parent)
	, Poller_ (new QTimer (this))
	{
		connect (Poller_,
				SIGNAL (timeout ()),
				this,
				SIGNAL (timeout ()));
		Poller_->start (300);
	}

	void Player::SetVLCWrapper (std::shared_ptr<VLCWrapper> core)
	{
		VLCWrapper_ = core;
		VLCWrapper_->setWindow (winId ());
	}

	namespace
	{
		QTime IntToQTime (int val)
		{
			return val < 0 ? QTime () : QTime (0, 0).addMSecs (val);
		}
	}

	QTime Player::GetTime () const
	{
		if (!VLCWrapper_)
			return QTime ();

		return IntToQTime (VLCWrapper_->GetTime ());
	}

	QTime Player::GetLength () const
	{
		if (!VLCWrapper_)
			return QTime ();

		return IntToQTime (VLCWrapper_->GetLength ());
	}

	int Player::GetPosition () const
	{
		if (!VLCWrapper_)
			return -1;

		return VLCWrapper_->GetMediaPosition () * pos_slider_max;
	}

	void Player::setPosition (int pos)
	{
		if (!VLCWrapper_)
			return;

		VLCWrapper_->setPosition (static_cast<float> (pos) / pos_slider_max);
	}
}
}

