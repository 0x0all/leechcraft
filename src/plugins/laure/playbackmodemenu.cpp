/**********************************************************************
 * LeechCraft - modular cross-platform feature rich internet client.
 * Copyright (C) 2011-2012  Minh Ngo
 * Copyright (C) 2006-2013  Georg Rudoy
 *
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 **********************************************************************/

#include "playbackmodemenu.h"
#include <QAction>

namespace LeechCraft
{
namespace Laure
{
	PlaybackModeMenu::PlaybackModeMenu (QWidget *parent)
	: QMenu (parent)
	, PlaybackMode_ (PlaybackModeDefault)
	{
		QAction *actionDefault = new QAction (tr ("Default"), this);
		QAction *actionLoop = new QAction (tr ("Loop"), this);
		QAction *actionRepeat = new QAction (tr ("Repeat"), this);
		
		actionDefault->setProperty ("ActionIcon", "view-list-details");
		actionLoop->setProperty ("ActionIcon", "media-playlist-shuffle");
		actionRepeat->setProperty ("ActionIcon", "media-playlist-repeat");

		addAction (actionDefault);
		addAction (actionLoop);
		addAction (actionRepeat);
		
		setProperty ("WatchActionIconChange", true);
		
		connect (actionDefault,
				SIGNAL (triggered (bool)),
				this,
				SLOT (handleMenuDefault ()));
		connect (actionLoop,
				SIGNAL (triggered (bool)),
				this,
				SLOT (handleMenuLoop ()));
		connect (actionRepeat,
				SIGNAL (triggered (bool)),
				this,
				SLOT (handleMenuRepeat ()));
	}
	
	PlaybackMode PlaybackModeMenu::GetPlaybackMode () const
	{
		return PlaybackMode_;
	}
	
	void PlaybackModeMenu::handleMenuDefault ()
	{
		setProperty ("ActionIcon", "services");
		emit playbackModeChanged (PlaybackModeDefault);
	}
	
	void PlaybackModeMenu::handleMenuLoop ()
	{
		setProperty ("ActionIcon", "media-playlist-shuffle");
		emit playbackModeChanged (PlaybackModeLoop);
	}
	
	void PlaybackModeMenu::handleMenuRepeat ()
	{
		setProperty ("ActionIcon", "media-playlist-repeat");
		emit playbackModeChanged (PlaybackModeRepeat);
	}
}
}